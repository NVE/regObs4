(function () {
  "use strict";

  (self["webpackChunkregobs4"] = self["webpackChunkregobs4"] || []).push([["node_modules_ionic_core_dist_esm_keyboard-5742b5da_js"], {
    /***/
    32177: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "KEYBOARD_DID_CLOSE": function KEYBOARD_DID_CLOSE() {
          return (
            /* binding */
            _KEYBOARD_DID_CLOSE
          );
        },

        /* harmony export */
        "KEYBOARD_DID_OPEN": function KEYBOARD_DID_OPEN() {
          return (
            /* binding */
            _KEYBOARD_DID_OPEN
          );
        },

        /* harmony export */
        "copyVisualViewport": function copyVisualViewport() {
          return (
            /* binding */
            _copyVisualViewport
          );
        },

        /* harmony export */
        "keyboardDidClose": function keyboardDidClose() {
          return (
            /* binding */
            _keyboardDidClose
          );
        },

        /* harmony export */
        "keyboardDidOpen": function keyboardDidOpen() {
          return (
            /* binding */
            _keyboardDidOpen
          );
        },

        /* harmony export */
        "keyboardDidResize": function keyboardDidResize() {
          return (
            /* binding */
            _keyboardDidResize
          );
        },

        /* harmony export */
        "resetKeyboardAssist": function resetKeyboardAssist() {
          return (
            /* binding */
            _resetKeyboardAssist
          );
        },

        /* harmony export */
        "setKeyboardClose": function setKeyboardClose() {
          return (
            /* binding */
            _setKeyboardClose
          );
        },

        /* harmony export */
        "setKeyboardOpen": function setKeyboardOpen() {
          return (
            /* binding */
            _setKeyboardOpen
          );
        },

        /* harmony export */
        "startKeyboardAssist": function startKeyboardAssist() {
          return (
            /* binding */
            _startKeyboardAssist
          );
        },

        /* harmony export */
        "trackViewportChanges": function trackViewportChanges() {
          return (
            /* binding */
            _trackViewportChanges
          );
        }
        /* harmony export */

      });

      var _KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';
      var _KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';
      var KEYBOARD_THRESHOLD = 150;
      var previousVisualViewport = {};
      var currentVisualViewport = {};
      var keyboardOpen = false;
      /**
       * This is only used for tests
       */

      var _resetKeyboardAssist = function _resetKeyboardAssist() {
        previousVisualViewport = {};
        currentVisualViewport = {};
        keyboardOpen = false;
      };

      var _startKeyboardAssist = function _startKeyboardAssist(win) {
        startNativeListeners(win);

        if (!win.visualViewport) {
          return;
        }

        currentVisualViewport = _copyVisualViewport(win.visualViewport);

        win.visualViewport.onresize = function () {
          _trackViewportChanges(win);

          if (_keyboardDidOpen() || _keyboardDidResize(win)) {
            _setKeyboardOpen(win);
          } else if (_keyboardDidClose(win)) {
            _setKeyboardClose(win);
          }
        };
      };
      /**
       * Listen for events fired by native keyboard plugin
       * in Capacitor/Cordova so devs only need to listen
       * in one place.
       */


      var startNativeListeners = function startNativeListeners(win) {
        win.addEventListener('keyboardDidShow', function (ev) {
          return _setKeyboardOpen(win, ev);
        });
        win.addEventListener('keyboardDidHide', function () {
          return _setKeyboardClose(win);
        });
      };

      var _setKeyboardOpen = function _setKeyboardOpen(win, ev) {
        fireKeyboardOpenEvent(win, ev);
        keyboardOpen = true;
      };

      var _setKeyboardClose = function _setKeyboardClose(win) {
        fireKeyboardCloseEvent(win);
        keyboardOpen = false;
      };
      /**
       * Returns `true` if the `keyboardOpen` flag is not
       * set, the previous visual viewport width equal the current
       * visual viewport width, and if the scaled difference
       * of the previous visual viewport height minus the current
       * visual viewport height is greater than KEYBOARD_THRESHOLD
       *
       * We need to be able to accommodate users who have zooming
       * enabled in their browser (or have zoomed in manually) which
       * is why we take into account the current visual viewport's
       * scale value.
       */


      var _keyboardDidOpen = function _keyboardDidOpen() {
        var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;
        return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD;
      };
      /**
       * Returns `true` if the keyboard is open,
       * but the keyboard did not close
       */


      var _keyboardDidResize = function _keyboardDidResize(win) {
        return keyboardOpen && !_keyboardDidClose(win);
      };
      /**
       * Determine if the keyboard was closed
       * Returns `true` if the `keyboardOpen` flag is set and
       * the current visual viewport height equals the
       * layout viewport height.
       */


      var _keyboardDidClose = function _keyboardDidClose(win) {
        return keyboardOpen && currentVisualViewport.height === win.innerHeight;
      };
      /**
       * Dispatch a keyboard open event
       */


      var fireKeyboardOpenEvent = function fireKeyboardOpenEvent(win, nativeEv) {
        var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;
        var ev = new CustomEvent(_KEYBOARD_DID_OPEN, {
          detail: {
            keyboardHeight: keyboardHeight
          }
        });
        win.dispatchEvent(ev);
      };
      /**
       * Dispatch a keyboard close event
       */


      var fireKeyboardCloseEvent = function fireKeyboardCloseEvent(win) {
        var ev = new CustomEvent(_KEYBOARD_DID_CLOSE);
        win.dispatchEvent(ev);
      };
      /**
       * Given a window object, create a copy of
       * the current visual and layout viewport states
       * while also preserving the previous visual and
       * layout viewport states
       */


      var _trackViewportChanges = function _trackViewportChanges(win) {
        previousVisualViewport = Object.assign({}, currentVisualViewport);
        currentVisualViewport = _copyVisualViewport(win.visualViewport);
      };
      /**
       * Creates a deep copy of the visual viewport
       * at a given state
       */


      var _copyVisualViewport = function _copyVisualViewport(visualViewport) {
        return {
          width: Math.round(visualViewport.width),
          height: Math.round(visualViewport.height),
          offsetTop: visualViewport.offsetTop,
          offsetLeft: visualViewport.offsetLeft,
          pageTop: visualViewport.pageTop,
          pageLeft: visualViewport.pageLeft,
          scale: visualViewport.scale
        };
      };
      /***/

    }
  }]);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0FBO0FBQ0FDO0FBQ0FDO0FBQ0EsT0FKQTs7QUFLQTtBQUNBQzs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FGOztBQUNBRztBQUNBQzs7QUFDQTtBQUNBQztBQUNBLFdBRkEsTUFHQTtBQUNBQztBQUNBO0FBQ0EsU0FSQTtBQVNBLE9BZkE7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQUg7QUFBQTtBQUFBO0FBQ0FBO0FBQUE7QUFBQTtBQUNBLE9BSEE7O0FBSUE7QUFDQUk7QUFDQU47QUFDQSxPQUhBOztBQUlBO0FBQ0FPO0FBQ0FQO0FBQ0EsT0FIQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBLGdDQUNBRiw0REFEQSxJQUVBVSwyQ0FGQTtBQUdBLE9BTEE7QUFNQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBLE9BRkE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQSxPQUZBO0FBR0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQUM7QUFBY0M7QUFBZDtBQURBO0FBR0FSO0FBQ0EsT0FOQTtBQU9BO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBQTtBQUNBLE9BSEE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0FKLG1EQUEyQ0MscUJBQTNDO0FBQ0FBO0FBQ0EsT0FIQTtBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0FZLGlEQURBO0FBRUFDLG1EQUZBO0FBR0FDLDZDQUhBO0FBSUFDLCtDQUpBO0FBS0FDLHlDQUxBO0FBTUFDLDJDQU5BO0FBT0FDO0FBUEE7QUFTQSxPQVZBOzs7OyIsIm5hbWVzIjpbInByZXZpb3VzVmlzdWFsVmlld3BvcnQiLCJjdXJyZW50VmlzdWFsVmlld3BvcnQiLCJrZXlib2FyZE9wZW4iLCJzdGFydE5hdGl2ZUxpc3RlbmVycyIsIndpbiIsInRyYWNrVmlld3BvcnRDaGFuZ2VzIiwic2V0S2V5Ym9hcmRPcGVuIiwic2V0S2V5Ym9hcmRDbG9zZSIsImZpcmVLZXlib2FyZE9wZW5FdmVudCIsImZpcmVLZXlib2FyZENsb3NlRXZlbnQiLCJzY2FsZWRIZWlnaHREaWZmZXJlbmNlIiwiZGV0YWlsIiwia2V5Ym9hcmRIZWlnaHQiLCJ3aWR0aCIsImhlaWdodCIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJwYWdlVG9wIiwicGFnZUxlZnQiLCJzY2FsZSJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2tleWJvYXJkLTU3NDJiNWRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEtFWUJPQVJEX0RJRF9PUEVOID0gJ2lvbktleWJvYXJkRGlkU2hvdyc7XG5jb25zdCBLRVlCT0FSRF9ESURfQ0xPU0UgPSAnaW9uS2V5Ym9hcmREaWRIaWRlJztcbmNvbnN0IEtFWUJPQVJEX1RIUkVTSE9MRCA9IDE1MDtcbmxldCBwcmV2aW91c1Zpc3VhbFZpZXdwb3J0ID0ge307XG5sZXQgY3VycmVudFZpc3VhbFZpZXdwb3J0ID0ge307XG5sZXQga2V5Ym9hcmRPcGVuID0gZmFsc2U7XG4vKipcbiAqIFRoaXMgaXMgb25seSB1c2VkIGZvciB0ZXN0c1xuICovXG5jb25zdCByZXNldEtleWJvYXJkQXNzaXN0ID0gKCkgPT4ge1xuICBwcmV2aW91c1Zpc3VhbFZpZXdwb3J0ID0ge307XG4gIGN1cnJlbnRWaXN1YWxWaWV3cG9ydCA9IHt9O1xuICBrZXlib2FyZE9wZW4gPSBmYWxzZTtcbn07XG5jb25zdCBzdGFydEtleWJvYXJkQXNzaXN0ID0gKHdpbikgPT4ge1xuICBzdGFydE5hdGl2ZUxpc3RlbmVycyh3aW4pO1xuICBpZiAoIXdpbi52aXN1YWxWaWV3cG9ydCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdXJyZW50VmlzdWFsVmlld3BvcnQgPSBjb3B5VmlzdWFsVmlld3BvcnQod2luLnZpc3VhbFZpZXdwb3J0KTtcbiAgd2luLnZpc3VhbFZpZXdwb3J0Lm9ucmVzaXplID0gKCkgPT4ge1xuICAgIHRyYWNrVmlld3BvcnRDaGFuZ2VzKHdpbik7XG4gICAgaWYgKGtleWJvYXJkRGlkT3BlbigpIHx8IGtleWJvYXJkRGlkUmVzaXplKHdpbikpIHtcbiAgICAgIHNldEtleWJvYXJkT3Blbih3aW4pO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXlib2FyZERpZENsb3NlKHdpbikpIHtcbiAgICAgIHNldEtleWJvYXJkQ2xvc2Uod2luKTtcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBMaXN0ZW4gZm9yIGV2ZW50cyBmaXJlZCBieSBuYXRpdmUga2V5Ym9hcmQgcGx1Z2luXG4gKiBpbiBDYXBhY2l0b3IvQ29yZG92YSBzbyBkZXZzIG9ubHkgbmVlZCB0byBsaXN0ZW5cbiAqIGluIG9uZSBwbGFjZS5cbiAqL1xuY29uc3Qgc3RhcnROYXRpdmVMaXN0ZW5lcnMgPSAod2luKSA9PiB7XG4gIHdpbi5hZGRFdmVudExpc3RlbmVyKCdrZXlib2FyZERpZFNob3cnLCBldiA9PiBzZXRLZXlib2FyZE9wZW4od2luLCBldikpO1xuICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigna2V5Ym9hcmREaWRIaWRlJywgKCkgPT4gc2V0S2V5Ym9hcmRDbG9zZSh3aW4pKTtcbn07XG5jb25zdCBzZXRLZXlib2FyZE9wZW4gPSAod2luLCBldikgPT4ge1xuICBmaXJlS2V5Ym9hcmRPcGVuRXZlbnQod2luLCBldik7XG4gIGtleWJvYXJkT3BlbiA9IHRydWU7XG59O1xuY29uc3Qgc2V0S2V5Ym9hcmRDbG9zZSA9ICh3aW4pID0+IHtcbiAgZmlyZUtleWJvYXJkQ2xvc2VFdmVudCh3aW4pO1xuICBrZXlib2FyZE9wZW4gPSBmYWxzZTtcbn07XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBga2V5Ym9hcmRPcGVuYCBmbGFnIGlzIG5vdFxuICogc2V0LCB0aGUgcHJldmlvdXMgdmlzdWFsIHZpZXdwb3J0IHdpZHRoIGVxdWFsIHRoZSBjdXJyZW50XG4gKiB2aXN1YWwgdmlld3BvcnQgd2lkdGgsIGFuZCBpZiB0aGUgc2NhbGVkIGRpZmZlcmVuY2VcbiAqIG9mIHRoZSBwcmV2aW91cyB2aXN1YWwgdmlld3BvcnQgaGVpZ2h0IG1pbnVzIHRoZSBjdXJyZW50XG4gKiB2aXN1YWwgdmlld3BvcnQgaGVpZ2h0IGlzIGdyZWF0ZXIgdGhhbiBLRVlCT0FSRF9USFJFU0hPTERcbiAqXG4gKiBXZSBuZWVkIHRvIGJlIGFibGUgdG8gYWNjb21tb2RhdGUgdXNlcnMgd2hvIGhhdmUgem9vbWluZ1xuICogZW5hYmxlZCBpbiB0aGVpciBicm93c2VyIChvciBoYXZlIHpvb21lZCBpbiBtYW51YWxseSkgd2hpY2hcbiAqIGlzIHdoeSB3ZSB0YWtlIGludG8gYWNjb3VudCB0aGUgY3VycmVudCB2aXN1YWwgdmlld3BvcnQnc1xuICogc2NhbGUgdmFsdWUuXG4gKi9cbmNvbnN0IGtleWJvYXJkRGlkT3BlbiA9ICgpID0+IHtcbiAgY29uc3Qgc2NhbGVkSGVpZ2h0RGlmZmVyZW5jZSA9IChwcmV2aW91c1Zpc3VhbFZpZXdwb3J0LmhlaWdodCAtIGN1cnJlbnRWaXN1YWxWaWV3cG9ydC5oZWlnaHQpICogY3VycmVudFZpc3VhbFZpZXdwb3J0LnNjYWxlO1xuICByZXR1cm4gKCFrZXlib2FyZE9wZW4gJiZcbiAgICBwcmV2aW91c1Zpc3VhbFZpZXdwb3J0LndpZHRoID09PSBjdXJyZW50VmlzdWFsVmlld3BvcnQud2lkdGggJiZcbiAgICBzY2FsZWRIZWlnaHREaWZmZXJlbmNlID4gS0VZQk9BUkRfVEhSRVNIT0xEKTtcbn07XG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBrZXlib2FyZCBpcyBvcGVuLFxuICogYnV0IHRoZSBrZXlib2FyZCBkaWQgbm90IGNsb3NlXG4gKi9cbmNvbnN0IGtleWJvYXJkRGlkUmVzaXplID0gKHdpbikgPT4ge1xuICByZXR1cm4ga2V5Ym9hcmRPcGVuICYmICFrZXlib2FyZERpZENsb3NlKHdpbik7XG59O1xuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGtleWJvYXJkIHdhcyBjbG9zZWRcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBga2V5Ym9hcmRPcGVuYCBmbGFnIGlzIHNldCBhbmRcbiAqIHRoZSBjdXJyZW50IHZpc3VhbCB2aWV3cG9ydCBoZWlnaHQgZXF1YWxzIHRoZVxuICogbGF5b3V0IHZpZXdwb3J0IGhlaWdodC5cbiAqL1xuY29uc3Qga2V5Ym9hcmREaWRDbG9zZSA9ICh3aW4pID0+IHtcbiAgcmV0dXJuIGtleWJvYXJkT3BlbiAmJiBjdXJyZW50VmlzdWFsVmlld3BvcnQuaGVpZ2h0ID09PSB3aW4uaW5uZXJIZWlnaHQ7XG59O1xuLyoqXG4gKiBEaXNwYXRjaCBhIGtleWJvYXJkIG9wZW4gZXZlbnRcbiAqL1xuY29uc3QgZmlyZUtleWJvYXJkT3BlbkV2ZW50ID0gKHdpbiwgbmF0aXZlRXYpID0+IHtcbiAgY29uc3Qga2V5Ym9hcmRIZWlnaHQgPSBuYXRpdmVFdiA/IG5hdGl2ZUV2LmtleWJvYXJkSGVpZ2h0IDogd2luLmlubmVySGVpZ2h0IC0gY3VycmVudFZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgY29uc3QgZXYgPSBuZXcgQ3VzdG9tRXZlbnQoS0VZQk9BUkRfRElEX09QRU4sIHtcbiAgICBkZXRhaWw6IHsga2V5Ym9hcmRIZWlnaHQgfVxuICB9KTtcbiAgd2luLmRpc3BhdGNoRXZlbnQoZXYpO1xufTtcbi8qKlxuICogRGlzcGF0Y2ggYSBrZXlib2FyZCBjbG9zZSBldmVudFxuICovXG5jb25zdCBmaXJlS2V5Ym9hcmRDbG9zZUV2ZW50ID0gKHdpbikgPT4ge1xuICBjb25zdCBldiA9IG5ldyBDdXN0b21FdmVudChLRVlCT0FSRF9ESURfQ0xPU0UpO1xuICB3aW4uZGlzcGF0Y2hFdmVudChldik7XG59O1xuLyoqXG4gKiBHaXZlbiBhIHdpbmRvdyBvYmplY3QsIGNyZWF0ZSBhIGNvcHkgb2ZcbiAqIHRoZSBjdXJyZW50IHZpc3VhbCBhbmQgbGF5b3V0IHZpZXdwb3J0IHN0YXRlc1xuICogd2hpbGUgYWxzbyBwcmVzZXJ2aW5nIHRoZSBwcmV2aW91cyB2aXN1YWwgYW5kXG4gKiBsYXlvdXQgdmlld3BvcnQgc3RhdGVzXG4gKi9cbmNvbnN0IHRyYWNrVmlld3BvcnRDaGFuZ2VzID0gKHdpbikgPT4ge1xuICBwcmV2aW91c1Zpc3VhbFZpZXdwb3J0ID0gT2JqZWN0LmFzc2lnbih7fSwgY3VycmVudFZpc3VhbFZpZXdwb3J0KTtcbiAgY3VycmVudFZpc3VhbFZpZXdwb3J0ID0gY29weVZpc3VhbFZpZXdwb3J0KHdpbi52aXN1YWxWaWV3cG9ydCk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoZSB2aXN1YWwgdmlld3BvcnRcbiAqIGF0IGEgZ2l2ZW4gc3RhdGVcbiAqL1xuY29uc3QgY29weVZpc3VhbFZpZXdwb3J0ID0gKHZpc3VhbFZpZXdwb3J0KSA9PiB7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IE1hdGgucm91bmQodmlzdWFsVmlld3BvcnQud2lkdGgpLFxuICAgIGhlaWdodDogTWF0aC5yb3VuZCh2aXN1YWxWaWV3cG9ydC5oZWlnaHQpLFxuICAgIG9mZnNldFRvcDogdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wLFxuICAgIG9mZnNldExlZnQ6IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQsXG4gICAgcGFnZVRvcDogdmlzdWFsVmlld3BvcnQucGFnZVRvcCxcbiAgICBwYWdlTGVmdDogdmlzdWFsVmlld3BvcnQucGFnZUxlZnQsXG4gICAgc2NhbGU6IHZpc3VhbFZpZXdwb3J0LnNjYWxlXG4gIH07XG59O1xuXG5leHBvcnQgeyBLRVlCT0FSRF9ESURfQ0xPU0UsIEtFWUJPQVJEX0RJRF9PUEVOLCBjb3B5VmlzdWFsVmlld3BvcnQsIGtleWJvYXJkRGlkQ2xvc2UsIGtleWJvYXJkRGlkT3Blbiwga2V5Ym9hcmREaWRSZXNpemUsIHJlc2V0S2V5Ym9hcmRBc3Npc3QsIHNldEtleWJvYXJkQ2xvc2UsIHNldEtleWJvYXJkT3Blbiwgc3RhcnRLZXlib2FyZEFzc2lzdCwgdHJhY2tWaWV3cG9ydENoYW5nZXMgfTtcbiJdfQ==