"use strict";
(self["webpackChunkregobs4"] = self["webpackChunkregobs4"] || []).push([["node_modules_ionic_core_dist_esm_keyboard-5742b5da_js"],{

/***/ 32177:
/*!****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/keyboard-5742b5da.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KEYBOARD_DID_CLOSE": function() { return /* binding */ KEYBOARD_DID_CLOSE; },
/* harmony export */   "KEYBOARD_DID_OPEN": function() { return /* binding */ KEYBOARD_DID_OPEN; },
/* harmony export */   "copyVisualViewport": function() { return /* binding */ copyVisualViewport; },
/* harmony export */   "keyboardDidClose": function() { return /* binding */ keyboardDidClose; },
/* harmony export */   "keyboardDidOpen": function() { return /* binding */ keyboardDidOpen; },
/* harmony export */   "keyboardDidResize": function() { return /* binding */ keyboardDidResize; },
/* harmony export */   "resetKeyboardAssist": function() { return /* binding */ resetKeyboardAssist; },
/* harmony export */   "setKeyboardClose": function() { return /* binding */ setKeyboardClose; },
/* harmony export */   "setKeyboardOpen": function() { return /* binding */ setKeyboardOpen; },
/* harmony export */   "startKeyboardAssist": function() { return /* binding */ startKeyboardAssist; },
/* harmony export */   "trackViewportChanges": function() { return /* binding */ trackViewportChanges; }
/* harmony export */ });
const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';
const KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';
const KEYBOARD_THRESHOLD = 150;
let previousVisualViewport = {};
let currentVisualViewport = {};
let keyboardOpen = false;
/**
 * This is only used for tests
 */
const resetKeyboardAssist = () => {
  previousVisualViewport = {};
  currentVisualViewport = {};
  keyboardOpen = false;
};
const startKeyboardAssist = (win) => {
  startNativeListeners(win);
  if (!win.visualViewport) {
    return;
  }
  currentVisualViewport = copyVisualViewport(win.visualViewport);
  win.visualViewport.onresize = () => {
    trackViewportChanges(win);
    if (keyboardDidOpen() || keyboardDidResize(win)) {
      setKeyboardOpen(win);
    }
    else if (keyboardDidClose(win)) {
      setKeyboardClose(win);
    }
  };
};
/**
 * Listen for events fired by native keyboard plugin
 * in Capacitor/Cordova so devs only need to listen
 * in one place.
 */
const startNativeListeners = (win) => {
  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));
  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));
};
const setKeyboardOpen = (win, ev) => {
  fireKeyboardOpenEvent(win, ev);
  keyboardOpen = true;
};
const setKeyboardClose = (win) => {
  fireKeyboardCloseEvent(win);
  keyboardOpen = false;
};
/**
 * Returns `true` if the `keyboardOpen` flag is not
 * set, the previous visual viewport width equal the current
 * visual viewport width, and if the scaled difference
 * of the previous visual viewport height minus the current
 * visual viewport height is greater than KEYBOARD_THRESHOLD
 *
 * We need to be able to accommodate users who have zooming
 * enabled in their browser (or have zoomed in manually) which
 * is why we take into account the current visual viewport's
 * scale value.
 */
const keyboardDidOpen = () => {
  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;
  return (!keyboardOpen &&
    previousVisualViewport.width === currentVisualViewport.width &&
    scaledHeightDifference > KEYBOARD_THRESHOLD);
};
/**
 * Returns `true` if the keyboard is open,
 * but the keyboard did not close
 */
const keyboardDidResize = (win) => {
  return keyboardOpen && !keyboardDidClose(win);
};
/**
 * Determine if the keyboard was closed
 * Returns `true` if the `keyboardOpen` flag is set and
 * the current visual viewport height equals the
 * layout viewport height.
 */
const keyboardDidClose = (win) => {
  return keyboardOpen && currentVisualViewport.height === win.innerHeight;
};
/**
 * Dispatch a keyboard open event
 */
const fireKeyboardOpenEvent = (win, nativeEv) => {
  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;
  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {
    detail: { keyboardHeight }
  });
  win.dispatchEvent(ev);
};
/**
 * Dispatch a keyboard close event
 */
const fireKeyboardCloseEvent = (win) => {
  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);
  win.dispatchEvent(ev);
};
/**
 * Given a window object, create a copy of
 * the current visual and layout viewport states
 * while also preserving the previous visual and
 * layout viewport states
 */
const trackViewportChanges = (win) => {
  previousVisualViewport = Object.assign({}, currentVisualViewport);
  currentVisualViewport = copyVisualViewport(win.visualViewport);
};
/**
 * Creates a deep copy of the visual viewport
 * at a given state
 */
const copyVisualViewport = (visualViewport) => {
  return {
    width: Math.round(visualViewport.width),
    height: Math.round(visualViewport.height),
    offsetTop: visualViewport.offsetTop,
    offsetLeft: visualViewport.offsetLeft,
    pageTop: visualViewport.pageTop,
    pageLeft: visualViewport.pageLeft,
    scale: visualViewport.scale
  };
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21fa2V5Ym9hcmQtNTc0MmI1ZGFfanMtZXMyMDE1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4TiIsInNvdXJjZXMiOlsiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20va2V5Ym9hcmQtNTc0MmI1ZGEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgS0VZQk9BUkRfRElEX09QRU4gPSAnaW9uS2V5Ym9hcmREaWRTaG93JztcbmNvbnN0IEtFWUJPQVJEX0RJRF9DTE9TRSA9ICdpb25LZXlib2FyZERpZEhpZGUnO1xuY29uc3QgS0VZQk9BUkRfVEhSRVNIT0xEID0gMTUwO1xubGV0IHByZXZpb3VzVmlzdWFsVmlld3BvcnQgPSB7fTtcbmxldCBjdXJyZW50VmlzdWFsVmlld3BvcnQgPSB7fTtcbmxldCBrZXlib2FyZE9wZW4gPSBmYWxzZTtcbi8qKlxuICogVGhpcyBpcyBvbmx5IHVzZWQgZm9yIHRlc3RzXG4gKi9cbmNvbnN0IHJlc2V0S2V5Ym9hcmRBc3Npc3QgPSAoKSA9PiB7XG4gIHByZXZpb3VzVmlzdWFsVmlld3BvcnQgPSB7fTtcbiAgY3VycmVudFZpc3VhbFZpZXdwb3J0ID0ge307XG4gIGtleWJvYXJkT3BlbiA9IGZhbHNlO1xufTtcbmNvbnN0IHN0YXJ0S2V5Ym9hcmRBc3Npc3QgPSAod2luKSA9PiB7XG4gIHN0YXJ0TmF0aXZlTGlzdGVuZXJzKHdpbik7XG4gIGlmICghd2luLnZpc3VhbFZpZXdwb3J0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN1cnJlbnRWaXN1YWxWaWV3cG9ydCA9IGNvcHlWaXN1YWxWaWV3cG9ydCh3aW4udmlzdWFsVmlld3BvcnQpO1xuICB3aW4udmlzdWFsVmlld3BvcnQub25yZXNpemUgPSAoKSA9PiB7XG4gICAgdHJhY2tWaWV3cG9ydENoYW5nZXMod2luKTtcbiAgICBpZiAoa2V5Ym9hcmREaWRPcGVuKCkgfHwga2V5Ym9hcmREaWRSZXNpemUod2luKSkge1xuICAgICAgc2V0S2V5Ym9hcmRPcGVuKHdpbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleWJvYXJkRGlkQ2xvc2Uod2luKSkge1xuICAgICAgc2V0S2V5Ym9hcmRDbG9zZSh3aW4pO1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIExpc3RlbiBmb3IgZXZlbnRzIGZpcmVkIGJ5IG5hdGl2ZSBrZXlib2FyZCBwbHVnaW5cbiAqIGluIENhcGFjaXRvci9Db3Jkb3ZhIHNvIGRldnMgb25seSBuZWVkIHRvIGxpc3RlblxuICogaW4gb25lIHBsYWNlLlxuICovXG5jb25zdCBzdGFydE5hdGl2ZUxpc3RlbmVycyA9ICh3aW4pID0+IHtcbiAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWJvYXJkRGlkU2hvdycsIGV2ID0+IHNldEtleWJvYXJkT3Blbih3aW4sIGV2KSk7XG4gIHdpbi5hZGRFdmVudExpc3RlbmVyKCdrZXlib2FyZERpZEhpZGUnLCAoKSA9PiBzZXRLZXlib2FyZENsb3NlKHdpbikpO1xufTtcbmNvbnN0IHNldEtleWJvYXJkT3BlbiA9ICh3aW4sIGV2KSA9PiB7XG4gIGZpcmVLZXlib2FyZE9wZW5FdmVudCh3aW4sIGV2KTtcbiAga2V5Ym9hcmRPcGVuID0gdHJ1ZTtcbn07XG5jb25zdCBzZXRLZXlib2FyZENsb3NlID0gKHdpbikgPT4ge1xuICBmaXJlS2V5Ym9hcmRDbG9zZUV2ZW50KHdpbik7XG4gIGtleWJvYXJkT3BlbiA9IGZhbHNlO1xufTtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGBrZXlib2FyZE9wZW5gIGZsYWcgaXMgbm90XG4gKiBzZXQsIHRoZSBwcmV2aW91cyB2aXN1YWwgdmlld3BvcnQgd2lkdGggZXF1YWwgdGhlIGN1cnJlbnRcbiAqIHZpc3VhbCB2aWV3cG9ydCB3aWR0aCwgYW5kIGlmIHRoZSBzY2FsZWQgZGlmZmVyZW5jZVxuICogb2YgdGhlIHByZXZpb3VzIHZpc3VhbCB2aWV3cG9ydCBoZWlnaHQgbWludXMgdGhlIGN1cnJlbnRcbiAqIHZpc3VhbCB2aWV3cG9ydCBoZWlnaHQgaXMgZ3JlYXRlciB0aGFuIEtFWUJPQVJEX1RIUkVTSE9MRFxuICpcbiAqIFdlIG5lZWQgdG8gYmUgYWJsZSB0byBhY2NvbW1vZGF0ZSB1c2VycyB3aG8gaGF2ZSB6b29taW5nXG4gKiBlbmFibGVkIGluIHRoZWlyIGJyb3dzZXIgKG9yIGhhdmUgem9vbWVkIGluIG1hbnVhbGx5KSB3aGljaFxuICogaXMgd2h5IHdlIHRha2UgaW50byBhY2NvdW50IHRoZSBjdXJyZW50IHZpc3VhbCB2aWV3cG9ydCdzXG4gKiBzY2FsZSB2YWx1ZS5cbiAqL1xuY29uc3Qga2V5Ym9hcmREaWRPcGVuID0gKCkgPT4ge1xuICBjb25zdCBzY2FsZWRIZWlnaHREaWZmZXJlbmNlID0gKHByZXZpb3VzVmlzdWFsVmlld3BvcnQuaGVpZ2h0IC0gY3VycmVudFZpc3VhbFZpZXdwb3J0LmhlaWdodCkgKiBjdXJyZW50VmlzdWFsVmlld3BvcnQuc2NhbGU7XG4gIHJldHVybiAoIWtleWJvYXJkT3BlbiAmJlxuICAgIHByZXZpb3VzVmlzdWFsVmlld3BvcnQud2lkdGggPT09IGN1cnJlbnRWaXN1YWxWaWV3cG9ydC53aWR0aCAmJlxuICAgIHNjYWxlZEhlaWdodERpZmZlcmVuY2UgPiBLRVlCT0FSRF9USFJFU0hPTEQpO1xufTtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGtleWJvYXJkIGlzIG9wZW4sXG4gKiBidXQgdGhlIGtleWJvYXJkIGRpZCBub3QgY2xvc2VcbiAqL1xuY29uc3Qga2V5Ym9hcmREaWRSZXNpemUgPSAod2luKSA9PiB7XG4gIHJldHVybiBrZXlib2FyZE9wZW4gJiYgIWtleWJvYXJkRGlkQ2xvc2Uod2luKTtcbn07XG4vKipcbiAqIERldGVybWluZSBpZiB0aGUga2V5Ym9hcmQgd2FzIGNsb3NlZFxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGBrZXlib2FyZE9wZW5gIGZsYWcgaXMgc2V0IGFuZFxuICogdGhlIGN1cnJlbnQgdmlzdWFsIHZpZXdwb3J0IGhlaWdodCBlcXVhbHMgdGhlXG4gKiBsYXlvdXQgdmlld3BvcnQgaGVpZ2h0LlxuICovXG5jb25zdCBrZXlib2FyZERpZENsb3NlID0gKHdpbikgPT4ge1xuICByZXR1cm4ga2V5Ym9hcmRPcGVuICYmIGN1cnJlbnRWaXN1YWxWaWV3cG9ydC5oZWlnaHQgPT09IHdpbi5pbm5lckhlaWdodDtcbn07XG4vKipcbiAqIERpc3BhdGNoIGEga2V5Ym9hcmQgb3BlbiBldmVudFxuICovXG5jb25zdCBmaXJlS2V5Ym9hcmRPcGVuRXZlbnQgPSAod2luLCBuYXRpdmVFdikgPT4ge1xuICBjb25zdCBrZXlib2FyZEhlaWdodCA9IG5hdGl2ZUV2ID8gbmF0aXZlRXYua2V5Ym9hcmRIZWlnaHQgOiB3aW4uaW5uZXJIZWlnaHQgLSBjdXJyZW50VmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICBjb25zdCBldiA9IG5ldyBDdXN0b21FdmVudChLRVlCT0FSRF9ESURfT1BFTiwge1xuICAgIGRldGFpbDogeyBrZXlib2FyZEhlaWdodCB9XG4gIH0pO1xuICB3aW4uZGlzcGF0Y2hFdmVudChldik7XG59O1xuLyoqXG4gKiBEaXNwYXRjaCBhIGtleWJvYXJkIGNsb3NlIGV2ZW50XG4gKi9cbmNvbnN0IGZpcmVLZXlib2FyZENsb3NlRXZlbnQgPSAod2luKSA9PiB7XG4gIGNvbnN0IGV2ID0gbmV3IEN1c3RvbUV2ZW50KEtFWUJPQVJEX0RJRF9DTE9TRSk7XG4gIHdpbi5kaXNwYXRjaEV2ZW50KGV2KTtcbn07XG4vKipcbiAqIEdpdmVuIGEgd2luZG93IG9iamVjdCwgY3JlYXRlIGEgY29weSBvZlxuICogdGhlIGN1cnJlbnQgdmlzdWFsIGFuZCBsYXlvdXQgdmlld3BvcnQgc3RhdGVzXG4gKiB3aGlsZSBhbHNvIHByZXNlcnZpbmcgdGhlIHByZXZpb3VzIHZpc3VhbCBhbmRcbiAqIGxheW91dCB2aWV3cG9ydCBzdGF0ZXNcbiAqL1xuY29uc3QgdHJhY2tWaWV3cG9ydENoYW5nZXMgPSAod2luKSA9PiB7XG4gIHByZXZpb3VzVmlzdWFsVmlld3BvcnQgPSBPYmplY3QuYXNzaWduKHt9LCBjdXJyZW50VmlzdWFsVmlld3BvcnQpO1xuICBjdXJyZW50VmlzdWFsVmlld3BvcnQgPSBjb3B5VmlzdWFsVmlld3BvcnQod2luLnZpc3VhbFZpZXdwb3J0KTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhlIHZpc3VhbCB2aWV3cG9ydFxuICogYXQgYSBnaXZlbiBzdGF0ZVxuICovXG5jb25zdCBjb3B5VmlzdWFsVmlld3BvcnQgPSAodmlzdWFsVmlld3BvcnQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogTWF0aC5yb3VuZCh2aXN1YWxWaWV3cG9ydC53aWR0aCksXG4gICAgaGVpZ2h0OiBNYXRoLnJvdW5kKHZpc3VhbFZpZXdwb3J0LmhlaWdodCksXG4gICAgb2Zmc2V0VG9wOiB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3AsXG4gICAgb2Zmc2V0TGVmdDogdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCxcbiAgICBwYWdlVG9wOiB2aXN1YWxWaWV3cG9ydC5wYWdlVG9wLFxuICAgIHBhZ2VMZWZ0OiB2aXN1YWxWaWV3cG9ydC5wYWdlTGVmdCxcbiAgICBzY2FsZTogdmlzdWFsVmlld3BvcnQuc2NhbGVcbiAgfTtcbn07XG5cbmV4cG9ydCB7IEtFWUJPQVJEX0RJRF9DTE9TRSwgS0VZQk9BUkRfRElEX09QRU4sIGNvcHlWaXN1YWxWaWV3cG9ydCwga2V5Ym9hcmREaWRDbG9zZSwga2V5Ym9hcmREaWRPcGVuLCBrZXlib2FyZERpZFJlc2l6ZSwgcmVzZXRLZXlib2FyZEFzc2lzdCwgc2V0S2V5Ym9hcmRDbG9zZSwgc2V0S2V5Ym9hcmRPcGVuLCBzdGFydEtleWJvYXJkQXNzaXN0LCB0cmFja1ZpZXdwb3J0Q2hhbmdlcyB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIn0=