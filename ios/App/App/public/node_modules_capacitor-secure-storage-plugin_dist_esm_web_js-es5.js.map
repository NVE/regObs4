{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UACOA;;;;;AACP;AAAA;;AAAA;;AACA;AACAC,uCADA;AAEAC;AAFA;AAIA;;AACA;AAAA;AAAA;;AANA;AAOA;;;;iBACA;AACA,gFACAC;AACAC;AADA,cADA,GAIAD,oDAJA;AAKA;;;iBACA;AACAE;AACA;AAAiCD;AAAjC;AACA;;;iBACA;AACAC;AACA;AAAiCD;AAAjC;AACA;;;iBACA;AACA;AACA;AACAC;AACA;AACA;;AACA;AAAiCD;AAAjC;AACA;;;iBACA;AAAA;;AACA;AAAA;AAAA;AACA;AAAiCA;AAAjC;AACA;;;iBACA;AACA;AAAiCA;AAAjC;AACA;;;;QAtC4CE;;AAwC5C;;;;","names":["SecureStoragePluginWeb","name","platforms","Promise","value","localStorage","_capacitor_core__WEBPACK_IMPORTED_MODULE_0__"],"sources":["webpack:///node_modules/capacitor-secure-storage-plugin/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class SecureStoragePluginWeb extends WebPlugin {\n    constructor() {\n        super({\n            name: 'SecureStoragePlugin',\n            platforms: ['web'],\n        });\n        this.PREFIX = 'cap_sec_';\n        this.addPrefix = (key) => this.PREFIX + key;\n    }\n    get(options) {\n        return localStorage.getItem(this.addPrefix(options.key)) !== null\n            ? Promise.resolve({\n                value: atob(localStorage.getItem(this.addPrefix(options.key))),\n            })\n            : Promise.reject('Item with given key does not exist');\n    }\n    set(options) {\n        localStorage.setItem(this.addPrefix(options.key), btoa(options.value));\n        return Promise.resolve({ value: true });\n    }\n    remove(options) {\n        localStorage.removeItem(this.addPrefix(options.key));\n        return Promise.resolve({ value: true });\n    }\n    clear() {\n        for (const key in localStorage) {\n            if (key.indexOf(this.PREFIX) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n        return Promise.resolve({ value: true });\n    }\n    keys() {\n        const keys = Object.keys(localStorage).filter((k) => k.indexOf(this.PREFIX) === 0);\n        return Promise.resolve({ value: keys });\n    }\n    getPlatform() {\n        return Promise.resolve({ value: 'web' });\n    }\n}\nconst SecureStoragePlugin = new SecureStoragePluginWeb();\nexport { SecureStoragePlugin };\n"]}