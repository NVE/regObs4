{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA;AACA,+BACA,uBADA,IAEA,oBAFA,IAGAA,0BAHA;AAIA;;AACA;AACA;AAA6BC;AAAA;;AAC7B;AAA0BC;AAAA;;AAC1BC;AACA,kDACAF,uBADA,KAEA,0BACAG,qBADA,IAEAD,gCAFA,EAEA;AACAE;AACA;AACK,SARL;AASA;;AAEA;AACA;AACAC,gBADA;AAEAC,uDAAqC,CAFrC;AAGAC,6DAAwC,CAHxC;AAIAC;AACAC,iCAA6B,CAD7B;AAEAC;AAFA,SAJA;AAQAC;AACA;AACK,SAVL;AAWAC;AACA;AACK,SAbL;AAcAC;AACA;AACK,SAhBL;AAiBAC;AACA;AACAC,6CAAsC;AADtC;AAGK,SArBL;AAsBAC;AACA;AACAC,wBADA;AAEAC,0BAFA;AAGAC,qBAHA;AAIAC,mDAAyC,CAJzC;AAKAC;AACA;AACa;AAPb;AASK,SAhCL;AAiCAC;AACA;AACK,SAnCL;AAoCAC;AACA;AACK,SAtCL;AAuCAC;AACAC,kBADA;AAEAC,kBAFA;AAGAC,sBAHA;AAIAC,kBAJA;AAKAC,oBALA;AAMAC,sBANA;AAOAC,sBAPA;AAQAC;AARA;AAvCA;AAkDA5B;AAEA;AACA;AACA6B,6BADA;AAEAC;AACAC;AADA,SAFA;AAKAX;AACAC,kBADA;AAEAC,kBAFA;AAGAC,sBAHA;AAIAC,kBAJA;AAKAC,oBALA;AAMAC,sBANA;AAOAC,sBAPA;AAQAC;AARA,SALA;AAeAI;AACAC,iDAAqC,CADrC;AAEAC,2CAAkC,CAFlC;AAGAC,6BAA2B,CAH3B;AAIAC,iCAA6B;AAJ7B,SAfA;AAqBAC;AACA;AACK,SAvBL;AAwBAnC,uDAAqC,CAxBrC;AAyBAC,6DAAwC,CAzBxC;AA0BAmC;AACA;AACAC;AACA;AACa;AAHb;AAKK,SAhCL;AAiCAC,iCAA0B,CAjC1B;AAkCAC,+BAAyB,CAlCzB;AAmCAC,kBAnCA;AAoCAC,2CAA+B,CApC/B;AAqCAC,+CAAiC,CArCjC;AAsCAC;AACA;AACK;AAxCL;AA0CA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;UAEA8C,OACA;AAAA;;AACA,wBADA,CAEA;;AACA,wBAAoBC,cAApB,EAAoCA,MAApC,EAAoC;AACpCC;AACA;;AACAA,iCANA,CAOA;;AACA;AACA;;AAGA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC;AACAA;;AACA,0BAAoBF,gCAApB,EAAsDA,MAAtD,EAAsD;AACtDG;AACA;AACA,aAZA,MAYQ;AACR;AACA;AACAC;AACA,eAHA,MAGU;AACV;AACAA;AACA;;AACA,0BAAoBJ,cAApB,EAAoCA,MAApC,EAAoC;AACpC;AACA;AACA;AACA,WA5BA,MA4BM;AACN;AACAG;AACA,WAHM,MAGA;AACN;AACA,wBAAkBH,mBAAlB,EAAuCA,MAAvC,EAAuC;AACvCG;AACA;AACA;AACA;;AACA;AACA;;AAEAE;AACAA;AACAA;;AAEA;AACA;;AACA,wBAAkBL,cAAlB,EAAkCA,MAAlC,EAAkC;AAClC;AACA;;AACA;AACA,QAEA;;;AACA;AACA;AACA;AACA;;AACA;;AACA,wBAAkBA,kBAAlB,EAAsCA,MAAtC,EAAsC;AACtC,0BAAoBM,eAApB,EAAqCA,MAArC,EAAqC;AACrC;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA,wBAAkBN,kBAAlB,EAAsCA,MAAtC,EAAsC;AACtC,0BAAoBM,eAApB,EAAqCA,MAArC,EAAqC;AACrC;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA,wBAAkBN,kBAAlB,EAAsCA,MAAtC,EAAsC;AACtC,0BAAoBM,eAApB,EAAqCA,MAArC,EAAqC;AACrC;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,SALA,CAOA;;;AACA,wBAAkBN,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;AACA;AACA,WAHA,MAGM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,QACA;;;AACA;AACA,wBAAkBA,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACAO,uBADA,CAEA;;AACA;AACA;AACA;AACA;;AAEA,yDAA8CC,GAA9C;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA,SAjBA,CAmBA;;;AACA,wBAAkBR,eAAlB,EAAmCA,MAAnC,EAAmC;AACnCO;AACA;AACAA;AACA;;AACA;AACA,QACA;AACA;;;AACA;AACA,wBAAkBP,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACAS;AACAA;AACA;;AACA;AACA;;AACA;AACA;AACAC,+BAAkBA,QAAlB,QADA,CACgC;AAChC;;AACA,wBAAkBV,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACAS;AACAA;AACA;;AACA;AACA,QACA;;;AACA;AAAA;AAAAE;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACAC,mBADA,GACAD,IADA;AACAE,kBADA,GACAF,IADA;AACAG,iBADA,GACAH,IADA;AAEAI;AACA;;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACAC;AACA;;AACA,mFACA;AACA,+CADA,CAC2C;;;AAC3C,4BAAsBC,mBAAtB,EAA0CA,MAA1C,EAA0C;AAC1C;AACA;AACA;AACA;;AACA;AACA;;AACA;AACAD;AACA;;AACAH;AACA;;AACA;AACA;;AACA,wBAAkBb,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;;AACA;AACA,wBAAkBM,iBAAlB,EAAqCA,MAArC,EAAqC;AACrC;AACA;AACA;AACAC;AACAM,kCADA;AAEAK;AAFA;AAIAX;AACA;AACA,WAXA,MAWM;AACN;AACA,wBAAkBD,iBAAlB,EAAqCA,MAArC,EAAqC;AACrC;AACA;AACA;;AACAC;AACAM,kCADA;AAEAK;AAFA;;AAIAX;AACA;AACA;AACA;;AACA;AACA;;AACA;AAAA;AAAAI;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACAC,mBADA,GACAD,IADA;AACAE,kBADA,GACAF,IADA;AACAG,iBADA,GACAH,IADA;AAEAI;AACA;;AACA;AAEA;;AACA,wBAAkBf,iBAAlB,EAAqCA,MAArC,EAAqC;AACrC;;AACA,0BAAoBM,eAApB,EAAqCA,MAArC,EAAqC;AACrC;AACA;;AACA;AACAa;AACA,aAFA,MAEQ;AACRA;AACA;;AACA;AACA,gDAA0CF,MAA1C,EAAkDA,MAAlD,EAAkD;AAClD;;AACA;AACAV;AACAY;AACA,iBAHA,MAGY;AACZZ;AACAY;AACA,iBAHY,MAGA;AACZZ;AACAY;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AAAA;AAAAR;AAAA;;AACA;AACA;;AACA,wBAAkBX,iBAAlB,EAAqCA,MAArC,EAAqC;AACrC;;AACA,0BAAoBM,eAApB,EAAqCA,MAArC,EAAqC;AACrC;AACA;;AACA;AACAc;AACAC,iCADA;AAEAC,6BAFA;AAGAC;AAHA;AAKA,aANA,CAMQ;AACRH;AACAA;AACAA;AACA,aAbqC,CAcrC;;;AACAb;AAAA;AAAA;AACAA;AACAA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACAiB;;AACA,sBAAgBxB,iBAAhB,EAAmCA,MAAnC,EAAmC;AACnCyB;AACA;AACA;;AACA;AACA,sBAAgBzB,iBAAhB,EAAmCA,MAAnC,EAAmC;AACnCyB;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,gDADA;AAEAC;AAFA;AAIA;;AAEA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA,WAFA,MAEM;AACN,wBAAkB3B,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,sBAAgBA,eAAhB,EAAiCA,MAAjC,EAAiC;AACjC;AACA;;AACA;AACA;;AACA;AACA,QACA;;;AACA;AACA;AACA,mCAFA,CAGA;;AACA,wBAAkBA,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,SAVA,CAWA;;;AACA;AACA;;AACA;AACA;AACA;;AACA,wBAAkBA,cAAlB,EAAkCA,MAAlC,EAAkC;AAClC;AACA;;AACA;AACA,QACA;;;AACA;AACA;AACA;AACA;;AAEA,wBAAkBA,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;;AACA;AACA,QACA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA,wBAAkBA,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,2DACA,6EACA;AAEA4B;;AACA,sBAAgB5B,sBAAhB,EAAwCA,MAAxC,EAAwC;AACxC;AACA;;AACA;AACA,SAVA,MAUI,6CACJ;;AAEA;AACA4B;;AACA,sBAAgB5B,sBAAhB,EAAwCA,MAAxC,EAAwC;AACxC;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACAA,gBADA,CAEA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA,QACA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA6B;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AAEA,wBAAkBZ,oBAAlB,EAAmCA,MAAnC,EAAmC;AACnCa;;AACA,0BAAoB9B,eAApB,EAAqCA,MAArC,EAAqC;AACrC;AACA;AACA+B;;AACA;AACA;AACA;AACA,aANA,MAMQ;AACR,8BAAwBzB,mBAAxB,EAA6CA,MAA7C,EAA6C;AAC7C;AACA;AACA,aAJQ,MAIA;AACR;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;;AACA,oBAAcN,eAAd,EAA+BA,MAA/B,EAA+B;AAC/B;AACA;AACA+B;;AACA,oDAA8CzB,MAA9C,EAAsDA,MAAtD,EAAsD;AACtD;AACA;AACA,WANA,MAMM;AACN,wBAAkBA,mBAAlB,EAAuCA,MAAvC,EAAuC;AACvC;AACA;AACA,WAJM,MAIA;AACN;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA,4CADA,CACwC;;AACxC;AACA;AACA,WAFA,MAEM0B;;AACNzB;AACA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA,gDADA,CAC4C;;AAC5C;AACA;AACA,WAFA,MAEM0B;;AACN1B;AACA;;AACA;AACA;;AACA;AACA,yBADA,CACsB;;AACtB,wBAAkBP,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;AACA;AACA,aAFA,MAEQ;AACRkC;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA,yBADA,CACsB;;AACtB,wBAAkBlC,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC,2CADmC,CACE;;AACrC;AACA;AACA;AACA,aAFA,MAEQ;AACRkC;AACA;;AACAC;AACA;AACA;;AACA;AACA;;AACA;AACA,2BADA,CACsB;;AACtB;AACA;AACA;;AACA;AACAC;AACA;;AACA;AACA;;AACA;AACA;;AACA,wBAAkBpC,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;;AACA,0BAAoBM,gBAApB,EAAsCA,MAAtC,EAAsC;AACtC+B;AACA;AACA;;AACA;AACA;;AACA;AACA,0BADA,CACuB;;AACvB,wBAAkBrC,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;;AAEA,0BAAoBM,qBAApB,EAA2CA,MAA3C,EAA2C;AAC3C;AACA;AACA,aAFA,MAEQ;AACRxC;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA,wBAAkBkC,eAAlB,EAAmCA,MAAnC,EAAmC;AACnC;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AAHA;AAAAW;AAAA;;AAIA,oBAAcX,eAAd,EAA+BA,MAA/B,EAA+B;AAC/B;;AACA,sBAAgBM,gBAAhB,EAAkCA,MAAlC,EAAkC;AAClCmB;AACAA;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACAa,0BADA;AAEAC,gCAFA;AAGAC,0BAHA;AAIAC,gCAJA;AAKAC,kBALA;AAMAC,8BANA;AAOAC,kBAPA;AAQAC,4BARA;AASAC,8BATA;AAUAC,cAVA;AAWAC,gBAXA;AAYAC,wBAZA;AAaAC,oCAbA;AAcAC,8BAdA;AAeAC,gCAfA;AAgBAC,sBAhBA;AAiBAC,gBAjBA;AAkBAC,kBAlBA;AAmBAC,kBAnBA;AAoBAC,kBApBA;AAqBAC,cArBA;AAsBAC,oBAtBA;AAuBAC,cAvBA;AAwBAC,sBAxBA;AAyBAC,wBAzBA;AA0BAC,kBA1BA;AA2BAC,wBA3BA;AA4BAC,kBA5BA;AA6BAC,wBA7BA;AA8BA/B,sBA9BA;AA+BAD,wBA/BA;AAgCAE,wBAhCA;AAiCA+B,kBAjCA;AAkCArG,0BAlCA;AAmCAsG,sBAnCA;AAoCAC,sBApCA;AAqCAC,gBArCA;AAsCAC;AAtCA;AAyCAxH;AACAsD;AACC,OAFD;AAIA;AACAmE,mBADA,uBACA5H,GADA,EACA;AACA;AACAG;AACA;AACA0H;AACA,aAFA,CAEQ,WACR;AACA;;AACA;AACA;AACA,aAFA,CAEQ,WACR;AACA;AACK,WAXL;AAYG,SAfH;AAgBAC,gBAhBA,oBAgBAlD,QAhBA,EAgBA;AAAA;AACA;AACG,SAlBH;AAmBAmD,WAnBA,iBAmBA;AACA;AACG,SArBH;AAsBAC,oBAtBA,wBAsBArE,EAtBA,EAsBA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACAsE;;AACA;AACAA;AAAA;AAAA;AACA,aAJA,CAKA;AACA;;;AACAC;AACA,WARA,MAQM;AACNA;AACAC;AACA;;AAEA;AACA;AACA,yEACA;AADA,iBAEA,iEACA;AADA,iBAEAF;AACA;;AACA;AACA;AACA,yEACA;AADA,iBAEA,iEACA;AADA,iBAEAA;AACA;;AACA;AACG,SA3DH;AA4DAG,qBA5DA,yBA4DAC,GA5DA,EA4DA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAC;AACAC;AAAA;AAAA;AACAC;;AAEA,wBAAkBpF,UAAlB,EAA8BA,MAA9B,EAA8B;AAC9BqF;AACAC;AACA;AACA;;AACA;AACG,SA9EH;AA+EAtI,gBA/EA,oBA+EAuI,CA/EA,EA+EA;AACA;AACG,SAjFH;AAkFAtI,cAlFA,oBAkFA;AACA;AACA;;AACA,0BAAoB+C,oBAApB,EAAqCA,MAArC,EAAqC;AACrC;;AACA;AACA;AAAA;AAAA;;AACA,8DAAwDwF,eAAxD,EAAyEA,cAAzE,EAAyE;AACzE;AACA;;AACA;AACA;AACAC;AACA,mBAFA,MAEc;AACdC;AACAD;AACA,mBAHc,MAGA;AACdC;AACA;AACA;AACA;AACA;AACA;;AACA;AACG;AA1GH;;AA6GA;AACA;AACAC,mGADA;AAGAC,qHAHA;AAKAC;AACA;AACK,WAFL,EALA;AASAC;AACA;;AACA;AACA,mDAA6C,SAA7C,EAA6C;AAC7C;AACAC,mBAF6C,iBAE7C;AACAC;AACW;AAJkC,eAA7C;AAMAC;AACA,aARA,CAQQ,WACR;AACA;;AACA;AACK,WAdL,EATA;AAyBAC;AACA;AACK,WAFL;AAzBA;AA6BC,OA9BD;;UAgCAC;AACA,+BAAyB;AAAA,cAAzBhB,MAAyB,uEAAzB,EAAyB;;AAAA;;AACzB;AACAlF,+BAFyB,CAIzB;;AACAA;;AAEA;AACAlD;AACAkD;AACO,aAFP;AAGA;AACA;;;;iBAEA;AACA;AACA;AACA;AACAmG;AACA;AACAnG;AACK,aAHL;AAIA;AACA;;;iBAEA;AACA;AACA;;AACA;AACAA;;AACA;AACA;AACA;;AAJA;AAAAU;AAAA;;AAKA0F;AACA;;AACAC;AACA;AACA;;;iBAEA;AACA;AACA;AACAF;AACA;AACAnG;AACA,eAFA,MAEQ;AACRA;AACA;AACAA;AACA;AACS,iBAJT;AAKA;AACK,aAVL;AAWA;AACA;;;iBAEA;AACA;AACA;AACA;AACA;AACA;;AALA;AAAAU;AAAA;;AAMA;AACAyF;AACAxD;AACA2D;AACA,aAJA,MAIM;AACNH;AACAxD;AACA2D;AACA;;AACA;AACAC;AACA;AACA;AACAvG;AACAkB;AACS,iBAFT;AAGAA;AACAsF;AACS,iBAFT;AAGA;AACK,aAVL;AAWA;AACA;;;iBAEA;AACA;AACA;AACA1J;AACA,wDADA,CAEA;;AACA;AACA0I;AACA;AACK,aANL;AAOA;;;iBAEA,sBAA+B;AAAA,gBAA/BiB,aAA+B,uEAA/B,EAA+B;AAC/B;AACA;AACA3J;AACA;AACA,iEAFA,CAGA;;AACA;AACAA;AACA;;AACA;AACA4J;AACA,mBAFA,MAEY;AACZA;AACA;AACS,iBAPT;AAQA,eAbA,CAcA;;;AACA;AACA5J;AACA4J;AACS,iBAFT;AAGA,eAnBA,CAqBA;;;AACA;AACAC;AACA;AACK,aAzBL;AA0BA;;;eAEA;AACA;AACA;AACAC;AACA;;;iBAEA;AACA;AACA;AACA,gDAAoC9J,2CAApC,cAAmF0I,WAAnF;AACAoB,mDAJA,CAKA;;AACA;AACA9J;AACA8J;AACO,eAFP;AAGA,aAVA,CAWA;;;AACA;AACA9J;AACA8J;AACO,eAFP;AAGA,aAhBA,CAiBA;;;AACA;AAAA,iDAlBA1B,MAkBA;AAlBAA,sBAkBA;AAAA;;AACAyB;AACA;;AACA;AACA;;;iBAEA;AACA;;AACA;AACAA;AAAA;AAAA;AACA;AACA;;AALA;AAAAzB;AAAA;;AAMA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;;AACA;AACA2B;AACA,SAFA,MAEI;AACJA;AACA;;AACA;AACAC;AACA,SAFA,MAEI;AACJA;AACA;;AACA;AACA;AACA,SAjBA,CAmBA;;;AACAD;AACAC;AAEAtB;AACAqB,sBADA;AAEAC,wBAFA;AAGAC;AAHA;AAKA;;AAEA;AACA;AACA;AAEA,YACAC,UADA,GAEIC,MAFJ,CACAD,UADA;AAAA,YACAE,UADA,GAEID,MAFJ,CACAF,IADA;AAAA,YACAI,GADA,GAEIF,MAFJ,CACAG,YADA;AAAA,YACAC,QADA,GAEIJ,MAFJ,CACAI,QADA;AAGA;AACA;AACA,oDAAyCJ,wBAAzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AAEA;;AACA;AACAK;AACA;;AAEA;;AACA;AACAC;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACAC;AACA;;AAEAP,2CA/CA,CAiDA;;AACA;AAAwBQ,wBAAxB;AAAwBC;AAAxB,gBACAC;AAAoBC,yBAApB;AAAoBC;AAApB;AAEA;;AACA;AACA;AACAC;AACA,WAFA,MAEM;AACNA;AACA;;AACA;AACAA;AACA;AACA,SA/DA,CAiEA;;;AACA;AACA;AACA;AACA;;AACA,wBAAkB/H,gBAAlB,EAAoCA,MAApC,EAAoC;AACpCgI;;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,sDACA7C,qBADA,GAEA8C,mIAFA;AAGAC;AACAC;AAEAC;;AACAC,qBACA/E,GADA,CACA;AACA,+DADA;AAEA,4DAFA;AAGA,oDAHA;AAIA,mDAJA;AAKAgF;AALA,eADA;AAQA,aAlBA,MAkBQ;AACRH;AACAD;;AACA;AACAA;;AACA;AACAA;AACAC;AACA;AACA;AACA,aAVQ,MAUA;AACRD;AACAC;AACA;;AACAE,wCACkBnB,sCADlB,GAEAgB,8CAAkD/C,mBAAlD,OAFA;AAIA;;AACA,yDA7CoC,CA6Ce;;AAEnD;AACA;AACA;AACA;;AACA;AACAkD;AACA;;AACA;AACAA;AACA;;AACA;AACAL,kDACAK,uBADA,GAEAA,wBAFA;AAGA,aAJA,MAIQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAL;AACA,iBAFA,MAEY;AACZA;AACA;AACA,eAZA,MAYU;AACV;AACA;AACA;AACA;AACA;;AACA;;AACA;AACAA;AACA,iBAFA,MAEY;AACZA;AACA;AACA;AACA;;AACA;AACAK;AACA;;AACA;AACAA;AACA;;AACA;AACA,WAjDA,MAiDM;AACNL;AACA;;AAEA;AACA;AACAJ,kDAAqCI,SAArC;AACA,eAFA,MAEU;AACVJ,mDAAsCI,SAAtC;AACA;AACA;AACA;;AACA;AACAJ;AACA;;AACAW;;AAGA;AACAC;AACA;AACA;AACA;AACA;AACA;AACAC;AACA,WARA,MAQM;AACN;AACA;AACAA;AACAD;AACA;;AAEAtB;AAEAwB;AAEA/E;AACA;;AACAuD;AACA;;AAEA,YACAE,+EADA,EACA;AACAH;AAAqBH,6BAAUI,wCAAV;AAArB;AACA;;AACA;AACA;AAAgDJ,6BAAUI,wCAAV;AAAhD,kBACAD;AAA0BF,8BAAWG,wCAAX;AAA1B;AACA;;AAEA;AACAA;AACAA;AACA;AAAgDJ,6BAAUI,wCAAV;AAAhD,kBACAD;AAA0BF,8BAAWG,wCAAX;AAA1B;;AACA;AACAyB;;AACA,6BAAsB3I,oBAAtB,EAA2CA,OAA3C,EAA2C;AAC3C;AACA;AACA;AACA;;AACA4I;AACA;AACA,SAvOA,CAyOA;;;AACA;AACAD;;AACA,4BAAoB3I,qBAApB,EAAyCA,QAAzC,EAAyC;AACzC;AACA;;AACA;AACA2I;AACA;AACA;;AACAC;;AACA;AACAA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AAAoDlB,oCAAeD,YAAf;AAApD,oBACAG;AAAgDC,qCAAgBJ,YAAhB;AAAhD;AACA,WAHA,MAGMG;AAA0CE,oCAAiBL,YAAjB;AAA1C;AACN;;AAEA;AACA;AACAc;AACAM;AACK,WAFL;AAGAA;AACA;AACAD;AACA;AACA;AACA;AACK,WAJL;AAKA;;AAEA;AACA;AACAL;AACAM;AACK,WAFL;AAGAA;;AACA;AACA;AACAD;AACAA;AACO,aAFP;AAGAH;AACAA;AACO,aAFP;AAGA;AACA;;AAEAhD;AACAmC,wBADA;AAEAgB,4BAFA;AAGAH,gCAHA;AAIAF;AAJA;;AAOA;AACArB;AACA;;AACA;AACA;AACAA;AACA;;AACA;AACAA;AACA;;AAEA;AACAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AACAA;AACA,SAFA,MAEI;AACJA;AACA,SATA,CAUA;;;AACA;AACA;AACAA;AACA4B;AACO,aAFP;AAGA,WAJA,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MAFJ,CACA/B,MADA;AAAA,YACAyE,aADA,GAEI1C,MAFJ,CACAqC,WADA;AAAA,YACAM,iBADA,GAEI3C,MAFJ,CACAsC,SADA;AAAA,YACAM,iBADA,GAEI5C,MAFJ,CACA6C,SADA;AAGA;AACA;;AACA;AACA,0BAAoB/J,qBAApB,EAA2CA,MAA3C,EAA2C;AAC3C;AACA;AACAuJ;AACA,eAFA,MAEU;AACVA;AACA;AACA,aANA,MAMQ;AACRA;AACA;AACA,WAXA,CAYA;;;AACA;AACA;AACA;AACA;;AACA;AACAQ;AACA,SAFA,MAEI;AACJ;AACAA;AACA;;AACA;;AACA;AACA;AACA7C;AACAA;AACA;;AACA;AACA,SAtCA,CAwCA;;;AACA;AAEAzB;AACAsE,8BADA;AAEAP,8BAFA;AAGAI,sCAHA;AAIAL;AAJA;AAMArC;AACAA;;AACA;AACAA;AACA;;AACA;AACAA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAwC/B,iBAAxC,GAA0D,CAA1D;AACA;;AACA;AACA,0BAAoBnF,wBAApB,EAA8CA,MAA9C,EAA8C;AAC9C;AACA;AACA;;AAEA;AACAkH;;AACA;AACAA;AACA,WAFA,MAEM;AACNA;AACA;AACA,SAPA,MAOI;AACJA;AACAA;AACA;AACA;;AACA;AACAA;AACA;AACA;;AAEA;AACA8C,8BADA;AAEAC,kCAFA;AAGAC,0CAHA;AAIAC,8CAJA;AAKAC,kDALA;AAMAC,sCANA;AAOAC,gDAPA;AAQAC,4CARA;AASAC;AATA;;AAYA;AAAA;AACA;AAEA,YACArF,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACAiC,GADA,GAEIF,MAFJ,CACAG,YADA;AAAA,YACA8B,SADA,GAEIjC,MAFJ,CACAiC,SADA;AAAA,YACAlC,UADA,GAEIC,MAFJ,CACAD,UADA;;AAIA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA,YACAG,GADA,GAEIF,MAFJ,CACAG,YADA;AAAA,YACAlC,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACA8B,UADA,GAEIC,MAFJ,CACAD,UADA;AAAA,YACAwD,SADA,GAEIvD,MAFJ,CACAuD,SADA;AAAA,YACArB,QADA,GAEIlC,MAFJ,CACAkC,QADA;AAGA;AACA;AACA;;AAEA;AACAsB;AACA,SAFA,MAEI;AACJC;AACA;;AAEA;AACAD;AACAC;AACA;;AAEA;AACAF;AACA,SAFA,MAEI;AACJxD,qDAAwCyD,CAAxC,iBAAgDC,CAAhD,iBAAwDC,CAAxD;AACA;;AACA1D;AACAA,yDA1BA,CA4BA;;AACA;AACA;;AACA;AACA2D;AACA,SAFA,MAEI;AACJA;AACA;;AACA;AACA3D;AACA;;AAEAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA,YACA/B,MADA,GAGI+B,MAHJ,CACA/B,MADA;AAAA,YAEAsF,SAFA,GAGIvD,MAHJ,CAEAuD,SAFA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA,0FACA,kFACAK,yBAjBA,CAmBA;;AACA5D;;AAEA;AACA;;AACA;AACAuD;AACA,WAFA,MAEM;AACN;AACA;AAAA;;AACAA,iGACAM,oBADA,EACA,aADA,oDAEA,QAFA;AAIA,aALA,MAKQ;AACRN;AACA;AACA;;AACA;AACA;;AAEA;AACAvD;AACAA;;AACA;AACAA;AACAA;AACA;AACA,SAPA,MAOI;AACJA;AACAA;;AACA;AACAA;AACAA;AACA;;AACA;AACAA;;AACA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;;AACA;AACAA;AACA;AACA,eAVA;AAWA;;AACAA;AACAA;AACA;AACA;;AAEA;AACA;;AAEA;AACAtC,kCADA;AAEAoG,kCAFA;AAGAC,kCAHA;AAIAC,kCAJA;AAKAC;AALA;;AAQA;AACA;;AAEA;AACAjE;AACA;;AAEAA;AACA;;AAEA;AAAA;AAAA;AACA;AACA,YAAUqC,WAAV,GAA+CrC,MAA/C,CAAUqC,WAAV;AAAA,YAAUpE,MAAV,GAA+C+B,MAA/C,CAAU/B,MAAV;AAAA,YAAUyE,aAAV,GAA+C1C,MAA/C,CAAU0C,aAAV;AACA;;AACA;AACA1C;AACA;;AAEA;;AACA;AACA,6DACA,mDACAkE;AACA;;AAEAlE;;AAEA;AACA;AACAA;AACA;AACA;;AACAA;;AACA;AACAA;AACA,WAFA,MAEM;AACNA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA,YAAUqC,WAAV,GAA+CrC,MAA/C,CAAUqC,WAAV;AAAA,YAAUK,aAAV,GAA+C1C,MAA/C,CAAU0C,aAAV;AAAA,YAAUzE,MAAV,GAA+C+B,MAA/C,CAAU/B,MAAV;AACA+B;AACA;AACAA;AAEA;;AACA;AACA,6DACA,mDACAkE;AACA;;AAEAlE;;AAEA;AACA;AACAA;AACA;AACA;;AACAA;;AACA;AACAA;AACA,WAFA,MAEM;AACNA;AACA;AACA;AACA;;AAEA;AACAmE,oCADA;AAEAC,wCAFA;AAGApI;AAHA;;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA,YACAiC,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACAyD,QADA,GAEI1B,MAFJ,CACA0B,QADA;AAAA,YACAH,UADA,GAEIvB,MAFJ,CACAuB,UADA;AAAA,YACAmB,aADA,GAEI1C,MAFJ,CACA0C,aADA;AAAA,YACAL,WADA,GAEIrC,MAFJ,CACAqC,WADA;AAAA,YACAnC,GADA,GAEIF,MAFJ,CACAG,YADA;AAAA,YACAoD,SADA,GAEIvD,MAFJ,CACAuD,SADA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACAvD;AACA;;AAEA,6CApBA,CAsBA;;AACAA,yCAvBA,CAyBA;;AACA;AACA,0BAAoBlH,qBAApB,EAA2CA,MAA3C,EAA2C;AAC3C;AACAuL;AACA;AACA;AACA,SAhCA,CAiCA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA,8DACA,sDACAC,oBA9CA,CAiDA;;AACA;AACAtE,+CADA,CAEA;;AACA;AACAA;AACA;;AACAA;;AACA;AACAA;AACA;;AACA;AACAA;AACAA;AACA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACAuE;AACA;;AACA;AACAhB;AACA,WAFA,MAEM;AACN;AACA;AAAA;;AACAA,mGACAM,oBADA,EACAU,CADA,qDAEA,QAFA;AAIA,aALA,MAKQ;AACRhB;AACA;AACA;;AACA;AACA;;AAEA;AACAvD;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACA,SARA,MAQI;AACJA;AACAA;AACAA;AACAA;AACAA;AACAA;;AACA;AACAA;;AACA;AACAA;AACA;AACA;AACAA;AACAA;AACAA;AACA;AACAA;AACA,eARA;AASA;;AACAA;AACAA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AACAwE;AACA;;AAEA;AACA;AAEA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA,YAAUvG,MAAV,GAA8B+B,MAA9B,CAAU/B,MAAV;AAAA,YAAUwG,SAAV,GAA8BzE,MAA9B,CAAUyE,SAAV;AACA;;AACA;AACA;AACAzE,2BAFA,CAGA;;AACAA;AACA;;AACA;AACA;AAEA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA,YACA/B,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACAwG,SADA,GAEIzE,MAFJ,CACAyE,SADA;AAAA,YACA/C,QADA,GAEI1B,MAFJ,CACA0B,QADA;AAAA,YACAH,UADA,GAEIvB,MAFJ,CACAuB,UADA;AAAA,YACApB,YADA,GAEIH,MAFJ,CACAG,YADA;;AAIA;AACA;AACAH,2BAFA,CAGA;;AACAA;AACA;;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACAuB;AAAA;AAAA;AAEAG;AACA;;AACA;AACAA;AACA;AACK,WAFL;AAGA;;AACA;;AACA;AACAgD;AACA;AACA;;AACA;AACA;AAEA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AACAjI;AACA;AACA,SARA,MAQI;AACJ;AACA;AACA;AACA;;AACA;AACAA;AACA;AACA;;AACAA;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AIAC,gCAJA;AAKAC;AALA;AAQAP;AACAA;AACA9L;AACAsE;AACAA;AACAA;AACA;;AACA;AACA;AACA;;AACA,cACAgI,qBACA7O,0CADA,IAEA6O,kCAHA,EAIA;AACAA;AACA;;AAEA;;AACA;AACAC;AACA;AACA;;AACAjI;AACA;;AAEA;AACA;AACA;AACA,YAAU/B,MAAV,GAA+C+B,MAA/C,CAAU/B,MAAV;AAAA,YAAUuJ,OAAV,GAA+CxH,MAA/C,CAAUwH,OAAV;AAAA,YAAUtH,GAAV,GAA+CF,MAA/C,CAAUG,YAAV;AACA;AACA;;AACA;AACA;AACAH;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACAwH;AACAA;AACA;AACA;;AACA;AACA;AACAxH;;AACA;AACAzB;AACAmJ,2BADA;AAEAQ,2BAFA;AAGAC,6BAHA;AAIAC;AAJA;AAMA1M;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA,gBACA2M,uEACAA,mEAFA,EAGA;AACA3M;AACAA;AACA;AACA;AACA,WAVA,MAUM,IACN4M,uEACAA,mEAFM,EAGN;AACA;AACA;AACA;;AACA;AACA;AACA5M;AACAsE;AACA;AACA;AACA;;AACA;AACAA;AACA;;AACA;AAEAwH;AACAA;AAEA;AACA;AACA;;AAEA;AACA;;AACA;AACA9L;AACA,WAFA,MAEM;AACN;AACA;AACA6M;AACA7M;AACA;AACA;AACA;;AACA;AACAsE;AACA;;AACA;AACA;AACAtE;AACA;AACA;;AACA;AACAA;AACA;AACA;;AACA;AACA;AACA;;AACAsE;;AACA;AACAiI;AACA;;AACA;AACAA;AACA;;AAEA;AACA;AACAjI;AACA;;AACAtE;AACAsE;;AACA;AACAA;AACA;;AACAtE,2CATA,CAUA;;AACA;AACAsE;AACA;;AACAA;AACA;;AACAA;AACAtE;AAEA;AACA8L;AAEAgB;AACA;AAEAxI;AACAtE;AAEA;AACA;;AACA;AACA+M;AACA;;AACA;AACAC;AACA;AACA,SAHA,MAGI;AACJA;AACA;AACA;;AAEA;AACAT;AACA,SAtJA,CAwJA;;;AACA;AACAvM;AACA;;AACA;AACAA;AACA,SA9JA,CAiKA;;;AACA;AACA;AACA;AACAA;AACA8L;AACAA;AACA9L;AACA8L;AACA;AACA;AACA,WATA,MASM;AACN9L;AACA;AACA;AACA;;AAEA,2DAlLA,CAoLA;;AACA;AACAsE;AACAA;AACA;;AACA;AACA;AACA;AACAtE;AACAiN,4EADA;AAEAC;AAFA;AAIA;;AACAlN;AACAiN,8EADA;AAEAC;AAFA;AAIA,SArMA,CAsMA;;;AACA5I,qDAvMA,CAwMA;;AACAA;AACA;;AAEA;AACA;AACA;AAEA,YACA/B,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACAuJ,OADA,GAEIxH,MAFJ,CACAwH,OADA;AAAA,YACAtH,GADA,GAEIF,MAFJ,CACAG,YADA;AAAA,YACAJ,UADA,GAEIC,MAFJ,CACAD,UADA;AAAA,YACAwB,UADA,GAEIvB,MAFJ,CACAuB,UADA;AAAA,YACAG,QADA,GAEI1B,MAFJ,CACA0B,QADA;AAGA;AACA;;AACA;AACA1B;AACA;;AACAtE;;AACA;AACA;AACAsE;AACA;;AACAtE;AACAA;AACA;AACA,SApBA,CAqBA;;;AACA;AACAsE;AACA,SAxBA,CA0BA;;;AACA;AACA,0DA5BA,CA8BA;;AACA;AACAA;AACAA;;AACA;AACAA;AACA;AACA;;AAEAtE;AACA6C;AACA;AACG,SAFH;;AAIA;AACA7C;AACAA;AACAA;AACA;AACA;;AACAA;AACAA;AACAA;AAEA;;AACA;AACAmN;AACA,SAFA,MAEI;AACJA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA7I;AACA;AACA;;AACA;AACA;AACAA;AACA,aAFA,MAEQ;AACRA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACAA;AACAA;;AACA;AACAA;AACA,eAVA,CAWA;AACA;;;AACA;AACAA;AACA;AACA,aAhBA,MAgBQ;AACRA;AACA;;AACAA;AAEAtE;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACAoN;AACA;;AACAC;AACAC;AACAtN;AACA,eAPA,MAOU;AACVoN;AACA;;AACA;AACA,aAZA,MAYQ;AACR;AACA;AACAA;AACA;;AACAC;AACAC;AACAtN;AACA,eAPA,MAOU;AACVoN;AACA;;AACA;AACA,aAZQ,MAYA;AACR;;AACA,8BAAwB1P,mBAAxB,EAA6CA,MAA7C,EAA6C;AAC7C;AACAoJ;AACA;AACA;AACA;;AAEA;AACAsG;AACA,eAFA,MAEU;AACVA;AACA;;AACAA;AACA;;AACA;AACA9I;AACAA;AACS,eAFT;AAGA,aA7EA,CA8EA;;;AACA;AACA;AACAiJ;AACA,eAFA,MAEU;AACVA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACAA;AACA,iBAFA,MAEY;AACZA;AACA,iBAFY,MAEA;AACZA;AACA;AACA;AACA,aAxBA,MAwBQ;AACRjJ;AACA;AACA;;AAEA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAD;AACA;AACAC;AACAA;AACAtH;AACAsH;AACAD;AACA;AACAC;AACa,mBAHb;AAIW,iBANX,EAMW,CANX;AAOS,eAXT;AAYA,aAlBA,MAkBQ;AACRA;AACAA;AACAA;AACAA;;AACA;AACAA;AACAD;AACA;AACAC;AACW,iBAHX;AAIA;AACA,aAZQ,MAYA;AACRA;AACA;;AAEAA;AACAA;AACA,WAhJA,MAgJM;AACNA;AACA;AACA;;AAEA;AACAA;AACAA;AACAA;AACA;;AACA;AACA,SA1OA,CA4OA;;;AACA;AACA;;AACA,wBAAkBlH,qBAAlB,EAAyCA,8DAAzC,EAAyC;AACzC;;AACA;AACA;AACAoQ;AACAC;AACA;AACA,WALA,MAKM;AACND;AACAC;AACA;AACA,SA1PA,CA4PA;;;AACA;AACA;;AAEA;AACA;AACA;AACAnJ;AACA;AACA;;AACA;AACA,4FACAA;AACA;;AACA;AACA,+FACAA;AACA;AACA,SAdA,MAcI;AACJ;AACA;AACAA;AACA;AACA;;AACA;;AACA;AACA;AACAA;AACA;;AACA;AACAA;AACA;AACA,WAPA,MAOM;AACNA;AACA,WAFM,MAEA;AACNA;AACA;AACA;AACA;;AAEA;AACA;AAEA,YAAU/B,MAAV,GAAuB+B,MAAvB,CAAU/B,MAAV;AAAA,YAAU5E,EAAV,GAAuB2G,MAAvB,CAAU3G,EAAV;AAEA,+CALA,CAOA;;AACA;AACA2G;AACA,SAVA,CAYA;;;AACA,YAAUqF,cAAV,GAAqDrF,MAArD,CAAUqF,cAAV;AAAA,YAAUD,cAAV,GAAqDpF,MAArD,CAAUoF,cAAV;AAAA,YAAU1D,QAAV,GAAqD1B,MAArD,CAAU0B,QAAV,CAbA,CAeA;;AACA1B;AACAA;AAEAA;AACAA;AAEAA;;AACA;AACAA;AACA,SAFA,MAEI;AACJA;AACA;;AAEA;AACAA;AACA,SA/BA,CAgCA;;;AACAA;AACAA;;AAEA;AACAA;AACA;AACA;;AAEA;AACA;;AACA;AACA;;AACA;AACAiI;AACAA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAU1E,SAAV,GAAoCvD,MAApC,CAAUuD,SAAV;AAAA,YAAUpD,YAAV,GAAoCH,MAApC,CAAUG,YAAV;AACAH;;AACA;AACA;AACAA;AACA,WAFA,MAEM;AACNA;AACA;AACA,SANA,MAMI;AACJA;AACA,SAZA,CAaA;;;AACA;AAEAA;AACAA;AAEA;AACA;;AACA;AACA2D;AACA,SAFA,MAEI;AACJA;AACA;;AACA;AACA3D;AACA;;AAEAA;AACA;;AAEA;;AACA;;AAEA;AACA;AACA,YACA/B,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACAmL,WADA,GAEIpJ,MAFJ,CACAoJ,WADA;AAAA,YACA/P,EADA,GAEI2G,MAFJ,CACA3G,EADA;AAAA,YACAkK,SADA,GAEIvD,MAFJ,CACAuD,SADA;AAIAvD;AACAA;AACAA;;AACA;AACAA;AACA;;AAEAA;AAEA,sCAfA,CAiBA;;AACA;AACA3G;AACA2O;AACAA;AACA,SAJA,MAII;AACJ;AACA;AAA2HqB,2BAA3H;AAA2HzP;AAA3H,gBAA2J,KAA3J;AACAP;AACAA;AAA4FgQ,4BAA5F;AAA4FzP;AAA5F,gBAAsHA,OAAtH;AACAP;;AACA;AACAA;AACA;;AACA;AACA2O;AACAsB;AACA;AACA;;AACA;AACAjQ;AACA2O;AACAA;AACA;AACA,SAzCA,CA0CA;;;AACA;AACA3O;AACA;;AACA;AACAkK;AACA,SAhDA,CAkDA;;;AACA;AACAvD;AACA,SAFA,MAEI;AACJA;AACA;AACA;;AAEA;AACA;AAEA,YACA/B,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACAmL,WADA,GAEIpJ,MAFJ,CACAoJ,WADA;AAAA,YACA/P,EADA,GAEI2G,MAFJ,CACA3G,EADA;AAAA,YACAkK,SADA,GAEIvD,MAFJ,CACAuD,SADA;AAIA,sCAPA,CASA;;AACA;AACAlK;AACA2O;AACAA;AACA,SAJA,MAII;AACJ;AACA;AAA6HqB,2BAA7H;AAA6HzP;AAA7H,gBAA6J,KAA7J;AACAP;AACAA;AACAA;;AACA;AACAA;AACA;AACA;;AACA;AACAA;AACA2O;AACAA;AACA;AACA,SA7BA,CA8BA;;;AACA;AACA3O;AACA;;AAEA;AACAkK;AACA,SArCA,CAuCA;;;AACAvD;AACA;;AAEA;AACAuJ,kCADA;AAEAC;AAFA;;AAKA;AACA;AACA,YACAnH,WADA,GAEIrC,MAFJ,CACAqC,WADA;AAAA,YACAoH,WADA,GAEIzJ,MAFJ,CACAyJ,WADA;AAAA,mCAEIzJ,MAFJ,CACAmF,YADA;AAAA,YACAA,YADA,qCACA,CADA;AAAA,YACAlH,MADA,GAEI+B,MAFJ,CACA/B,MADA;AAAA,YACAyL,GADA,GAEI1J,MAFJ,CACA0J,GADA;AAGA;AACA,yFANA,CAQA;;AACA;;AAEA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACAC;AACA,eAFA,MAEU;AACVA;AACA,eAFU,MAEA;AACVA;AACA;AACO,aAVP;AAWA;;AAEA;AACA;AACA;;AACA;AACAD,sCAAyBzL,6BAAzB,sBAAkEA,6BAAlE;AACA,WAFA,MAEM;AACNyL,mCAAsBzL,6BAAtB;;AACA;AACAyL,qCAAwBzL,6BAAxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA+B;AACA;;AAEAzB;AAEAA;AACAqL,wDADA;AAEA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A;AACA,WA3MA,CA6MA;;;AACA;AACA;;;;iBAEA;AACA;AACA,gBACA/B,MADA,GAEM+B,MAFN,CACA/B,MADA;AAAA,gBACAyC,MADA,GAEMV,MAFN,CACAU,MADA;AAAA,gBACAa,UADA,GAEMvB,MAFN,CACAuB,UADA;AAAA,gBACAtB,UADA,GAEMD,MAFN,CACAF,IADA;AAAA,gBACAuC,WADA,GAEMrC,MAFN,CACAqC,WADA;AAGA;;AACA;AACA;AACA;;AACA,4CAAoCvJ,iBAApC,EAAuDA,MAAvD,EAAuD;AACvD;AACAgI;AACA0Q;AACA;AACA;AACA;;AACA,8CAAoC1Y,QAApC,EAA4CA,QAA5C,EAA4C;AAC5C;AACAgI;AACA0Q;AACA;AACA;AACA;AACA,aAjBA,MAiBM;AACN,8CAAoC1Y,mBAApC,EAAuDA,QAAvD,EAAuD;AACvD;AACA0Y;AACA;AACA;AACA;;AACA;AACA;;;iBAEA;AACA;AACA;AACA,gBAAY9P,QAAZ,GAA+B1B,MAA/B,CAAY0B,QAAZ;AAAA,gBAAYzD,MAAZ,GAA+B+B,MAA/B,CAAY/B,MAAZ,CAHA,CAIA;;AACA;AACA+B;AACA;;AACAA;AACAA;AACAA;AACAA;;AAEA;AACA;AACA;AACAA;AACAA;AACAA;AACA;;AACA;;AACA;AACA8D;;AACA;AACA9D;AACA;AACA,aALA,MAKM;AACN;AACAyR;AACA,eAFA,MAEQ;AACRA;AACA;;AACA;AACA3N;AACA;AACA;;AACA;AACA9D;AACA;;AACAA;AACA;;;iBAEA;AAAA;AACA;AACA;;AACA;AACA;AACA0R;AACA;;AACA;AACA;AACA;;AAEA1R,uBACA3E,WADA,WACsB2E,oCADtB,SAC6D2R,gBAD7D,GAEAvW,QAFA,WAEmB4E,oCAFnB,SAE0D0R,YAF1D;AAIA1R;AAEAA;AACA;AACA4R;AACA,eAFA,MAEQ;AACRA;AACA;AACK,aANL;AAQA5R;AACA;AAEA;AACA;;;iBAEA;AACA;AACA;AAEAA,sCAJA,CAMA;;AACA;AACAA;AACA,aATA,CAWA;;;AACAA,gCAZA,CAcA;;AACA;AACAA;AACA,aAjBA,CAmBA;;;AACAA,gCApBA,CAsBA;;AACAA;;AAEA;AACAA;AACA,aA3BA,CA6BA;;;AACA;AACAA;AACA;;AAEA;AACAA;AACA,aApCA,CAsCA;;;AACA;AACAA;AACA,aAFA,MAEM;AACNA;AACA,aA3CA,CA6CA;;;AACAA,kCA9CA,CAgDA;;AACAA,sCAjDA,CAmDA;;AACAA;AACA;;;iBAEA;AAAA;AAAA;AACA;AACA,gBACA/B,MADA,GAEM+B,MAFN,CACA/B,MADA;AAAA,gBACAyL,GADA,GAEM1J,MAFN,CACA0J,GADA;AAAA,gBACA3J,UADA,GAEMC,MAFN,CACAD,UADA;AAAA,gBACAW,MADA,GAEMV,MAFN,CACAU,MADA;;AAIA;AACA;AACA;;AAEAV,yCAVA,CAYA;;AACAA,uCAbA,CAeA;;AACAA,kCAhBA,CAkBA;;AACA;AACAA;AACA,aArBA,CAuBA;;;AACA;AACAA;AACA0J;AACA3J;;AACA;AACAW,uBACArF,WADA,CACA,CACA4C,wBADA,EAEAA,uBAFA,EAGAA,qBAHA,EAIAA,qBAJA,EAKA4T,IALA,CAKA,GALA,CADA,EAOApW,UAPA,CAOA,OAPA,EAQAA,UARA,CAQA,yBARA;AASA;AACA;;AAEAuE,mCAzCA,CA2CA;;AACAnK;AACAmK;AACK,aAFL;;AAIA;AACAA;AACAA;AACAzB;AACA;;AACAyB;AAEA;AACA;;;iBAEA;AACAzB;AACA;;;eAEA;AACA;AACA;;;eAEA;AACA;AACA;;;eAEA;AACA;AACA;;;eAEA;AACA;AACA;;;;QA/bAU;;AAkcA;AACA6S,sBADA;AAEAC;AACAxK;AADA,SAFA;AAKA;AACAA;AADA;AALA;AAUA;AACAuK,uBADA;AAEAC;AACAC;AADA,SAFA;AAKA;AACAA;AADA;AALA;;AAUA;AACA;AACA;AACA;AACA;;AACA;AACAC,0DADA;AAEAC,8BAFA;AAGAC;AAHA;AAKC,OAVD;;AAYA;AACAL,uBADA;AAEAC;AACAK;AADA,SAFA;AAKA;AACAA;AADA;AALA;AAUA;AACAN,sBADA;AAEAO,cAFA,oBAEA;AACA;AACA9T;AACA+T;AACAC,2BADA,2BACA;AACA;AACAvS;AACAA;AACS,eALT;AAMAwS,sCANA,sCAMA;AACA;AACAxS;AACS;AATT;AADA;AAaG,SAjBH;AAkBAnE;AACAgP,cADA,kBACA;AACA,8BADA,CAEA;;AACA9L,wEAHA,CAKA;;AACAA;AACK,WARL;AASA0T,iBATA,qBASA;AACA;AACA1T;AACAA;AACK;AAbL;AAlBA;AAmCA;AACA2T,gEADA;AAEAC,cAFA,kBAEAhd,MAFA,EAE6B;AAAA,cAA7Bid,OAA6B,uEAA7B,EAA6B;AAC7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA5S;AACA;AACA;;AACA;AACAA;AACA,aAFA;;AAIA;AACAjB;AACA,aAFA,MAEQ;AACRA;AACA;AACK,WAjBL;AAmBAJ;AACAkU,6FADA;AAEAC,0FAFA;AAGAC;AAHA;AAMA/S;AACG,SAhCH;AAiCA6K,YAjCA,kBAiCA;AACA;AACA;;AACA;AACA;;AACA,4BAAsB/R,2BAAtB,EAAmDA,MAAnD,EAAmD;AACnDkH;AACA;AACA,WARA,CASA;;;AACAA;AAA4C8S;AAA5C,aAVA,CAYA;;AACA9S;AAAmD6S;AAAnD;AACG,SA/CH;AAgDAJ,eAhDA,qBAgDA;AACA;AACAzS;AACArB;AACK,WAFL;AAGAqB;AACG;AAtDH;AAyDA;AACA8R,wBADA;AAEA7T;AACAU,yBADA;AAEAqU,+BAFA;AAGAC;AAHA,SAFA;AAOAZ,cAPA,oBAOA;AACA;AACA9T;AACAI;AACAkM,8CADA;AAEA8H,kDAFA;AAGAF,oDAHA;AAIAS;AAJA;AADA;AAQG,SAjBH;AAkBArX;AACAgP,cADA,kBACA;AACA;AACA7K;AACK,WAJL;AAKAyS,iBALA,qBAKA;AACA;AACAzS;AACK;AARL;AAlBA;AA8BA;AACAmT,cADA,kBACAC,KADA,EACA;AACA;AACA,cAAYlT,GAAZ,GAAgCF,MAAhC,CAAYG,YAAZ;AACA;AACA,mDAJA,CAI8C;;AAC9C,2CALA,CAMA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,+BADA,CAEA;;AACA,8CAAiCH,wBAAjC,GAA0D9B,MAA1D,GAA0D,CAA1D,IAA0D8B,8BAAwCA,8BAAxC,GAAuE9B,MAAvE,KAAuE,CAAjI,EAAiI;AACjI;AACA;;AACA;AACA;AACA;AACA;AACA,+BACA,qCADA,EAEA,oDAFA,EAGA,qDAHA,EAIA,oEAJA;;AAMA,4BAAsBpF,sBAAtB,EAA8CA,MAA9C,EAA8C;AAC9C;;AACA,kBACAgR,4CACAA,aADA,IACAA,wBAFA,EAGA;AACAuJ;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA,4DACApL;AACA;;AACA;AACA;AACA,WAPA,MAOM;AACN;AACA,4DACAA;AACA;;AACA;AACA;AACA;;AACAjI;AACA;AACG,SAhEH;AAiEAsT,cAjEA,oBAiEA;AACA;AACA;AACAna;AACA6G;AACG,SAtEH;AAuEAuT,eAvEA,qBAuEA;AACA;AACA;AACApa;AACA6G;AACG;AA5EH;AA+EA;AACA8R,wBADA;AAEA7T;AACAuV;AACA3D,0BADA;AAEA4D;AAFA;AADA,SAFA;AAQApB,cARA,oBAQA;AACA;AACA9T;AACAiV;AACA3D,4BADA;AAEAyD,kDAFA;AAGAC,oDAHA;AAIAJ;AAJA;AADA;AAQG,SAlBH;AAmBAtX;AACAgP,cADA,kBACA;AACA;;AACA;AACA7K;AACA;AACK,WANL;AAOAyS,iBAPA,qBAOA;AACA;;AACA;AACAzS;AACA;AACK;AAZL;AAnBA;;AAmCA;AACA;AACA;;AAEA;AACA;AACA0T;AACAC;AACA;;AAEA,4BACA3L,kBADA,IAEAA,6BAFA,CAGA;AACA;AAJA,WAKAA,8CALA,EAMA;AACA;AACA2L;AACA;;AAEA;AACA;;AACA;AACAC,mCADA;AAEAC,sCAFA;AAGAC,6BAHA;AAIAV,aAJA,mBAIA;AACA;AACA;AACG,SAPH;AAQAW,iBARA,qBAQA9L,CARA,EAQA;AACA;AACA;AACA;AACA;AAEA;AACA,qBAPA,CAOgB;;AAChB;AACA,qBATA,CASgB;AAEhB;;AACA;AACA+L;AACA;;AACA;AACAA;AACA;;AACA;AACAA;AACA;;AACA;AACAC;AACA,WAvBA,CAyBA;;;AACA;AACAA;AACAD;AACA;;AAEAE;AACAC;;AAEA;AACAA;AACA;;AACA;AACAD;AACA;;AAEA;AAA6B;AAC7BA;AACAC;AACA;;AAEA;AACA;AAA+B;AAC/BD;AACAC;AACA,aAHA,MAGQ;AAAO;AACfD;AACAC;AACA;AACA,WAtDA,CAwDA;;;AACA;AACAF;AACA;;AACA;AACAD;AACA;;AAEA;AACAI,qBADA;AAEAC,qBAFA;AAGAC,sBAHA;AAIAC;AAJA;AAMG,SA9EH;AA+EAC,wBA/EA,8BA+EA;AACA;AACAxU;AACG,SAlFH;AAmFAyU,wBAnFA,8BAmFA;AACA;AACAzU;AACG,SAtFH;AAuFAmT,cAvFA,kBAuFAC,KAvFA,EAuFA;AACA;AACA;AACA;;AAEA;AACAnL;AACA;;AAEA;;AACA;AACAtS;AACA;;AACA;AAEA,mDAfA,CAe8C;;AAC9C;AACA;AAEA;;AAEA;AACA;AACA,sGACA;AACA,aAHA,MAGQ,4EACR;AACA,WANA,MAMM;AACN+e;AACA;;AAEA;AAEA;;AAEA;AACA;AACA;AACA9L,+BADA;AAEA8L,oCAFA;AAGApQ,yCAHA;AAIAqQ;AAJA,cAFA,CASA;;AACA;;AACA;AACAb,wCADA,CACmC;AACnC;;AACA;AACAA,6CAfA,CAiBA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA9T;AACA;AACA,aAJA,MAIQ;AACRA;AACA,aA7BA,CA+BA;AACA;;;AACA;AACA;AACA;AACA,WApCA,MAoCM;AACN;AAEA;AACA;AACA;AACA;AACA;AAAyB4I,+BAAzB;AAAyB8L,oCAAzB;AAAyBpQ;AAAzB;AACA,gBAAcuP,mBAAd,GAAoC7T,iBAApC,CAAc6T,mBAAd;AACA,2DACAe,+CADA,IAEAA,4CAFA,IAGAA,qDAHA;;AAIA;AACA5U;;AAEA;AACAA;AACA;;AACA;AACA;AACA;AAEA;AACA;AAEAA;AACAA;AACAA;AACAA;AACAA;;AAEA;AACAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArH;AACAqH;AACA;;AACA;AACA8T,6CADA,CACuC;;AACvC;;AACA;;AACA;;AACAA;;AACA;AACA;AACAA;AACA,iBAHA,MAGY,uCACZc,sCADY,IAEZC,uCAFY,IAGZD,oBAHY,EAIZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA5U;;AACA8T;;AACA9T;AACAA;AACa,mBAFb,EAEa,CAFb,EAVA,CAYmB;AACnB;;AACA;AACA;AACA;AACA;AACAA;AACA;AACAA;;AACA8T;;AACA9T;AACa,mBALb,EAKa,GALb;AAMA;AACA,eA5EA,CA8EA;;;AACA,+DA/EA,CAiFA;;AACA,+GAlFA,CAmFA;;AACA;AACA;AACA;;AAEA,wDACAiI;AACA;AACG,SAtQH;AAuQA6M,qBAvQA,yBAuQAF,QAvQA,EAuQA;AACA,4BADA,CAEA;AACA;AACA;;AACA;AACA;AACA;AACA,WARA,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA5U;AACAA;AACA;AACA,WALA,MAKM;AACNA;AACAA;AACA,WA7BA,CA8BA;;;AACAA,sEA/BA,CAgCA;;AACA;AACG,SAzSH;AA0SA+U,qBA1SA,yBA0SAH,QA1SA,EA0SA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,WALA,MAKM;AACN;AACA;AACA;;AACA;AACG,SAvTH;AAwTAtB,cAxTA,oBAwTA;AACA;AACA;;AACA;AACAtT;AACA;AACA;;AACA;AACA;AACA;;AACA;AACArK;AACA;;AACAA;AACAA;AACAA;AACAqK;AACA;AACG,SA1UH;AA2UAuT,eA3UA,qBA2UA;AACA;AACA;;AACA;AACAvT;AACA;AACA;;AACA;AACA;AACA;;AACA;AACArK;AACA;;AACAA;AACAqK;AACA;AACG;AA3VH;AA8VA;AACAwP,cADA,oBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAPA,CAQA;;AACA;AACA;;AACA;AACAwF;;AACA;AACAA;AACA;;AACA;AACA;AACA,WAPA,MAOM;AACNA;AA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AwCA;AACA;AACA;AACA;AACAtQ;AACAA;AACAA;AACA;AACG,SAhDH;AAiDAid,YAjDA,kBAiDA;AACA;AACA;AACA;;AAEA;AACAtkB;AACAqH;AACA;;AACAA;AACAA;AACA;AACG,SA7DH;AA8DAkd,aA9DA,iBA8DAlS,KA9DA,EA8DA;AACA;AACA;AACA;AACA;AACAhL;;AACA;AACAA;AACAA;AACA,WAHA,MAGM;AACNA;AACAA;AACA;AACG;AA3EH;AA8EA;AACA8R,wBADA;AAEA7T;AACAkf;AACAtN,0BADA;AAEAmN,uBAFA;AAGAI,mCAHA;AAIAC,sCAJA;AAKAC,kCALA;AAMAC;AANA;AADA,SAFA;AAYAlL,cAZA,oBAYA;AACA;AACA9T;AACA4e;AACAK,4BADA;AAEAC,2BAFA;AAGAV,4CAHA;AAIAzM,gDAJA;AAKA2M,8CALA;AAMAC,gDANA;AAOAQ,gCAPA,gCAOA;AACA;AACA1d;AACA;;AACA;AACAA;AACAA;AACA;AACS,eAfT;AAgBAia,6BAhBA,2BAgBAhS,CAhBA,EAgBA;AACA;AACA;AACAjI;AACAA;AACAA;;AACA;AACAA;AACA,iBAFA,MAEY;AACZA;AACA;AACS;AA3BT;AADA;AA+BG,SA7CH;AA8CAnE;AACAgP,cADA,kBACA;AACA;;AACA;AACA7K;AACApI;AACA;AACK,WAPL;AAQA+lB,+BARA,iCAQA3S,KARA,EAQA4S,QARA,EAQA;AACA;;AACA;AACA;AACA5d;AACA,eAFA,MAEU;AACVA;AACA;AACA;AACK,WAjBL;AAkBA6d,yBAlBA,6BAkBA;AACA;;AACA;AACA;AACA7d;AACA,eAFA,MAEU;AACVA;AACA;AACA;AACK,WA3BL;AA4BA4c,kBA5BA,sBA4BA;AACA;;AACA;AACA5c;AACA;AACK,WAjCL;AAkCAyS,iBAlCA,qBAkCA;AACA;;AACA;AACAzS;AACA;;AACApI;AACK;AAxCL;AA9CA,SA0FA;;AAEA,wBACAkmB,QADA,EAEAC,SAFA,EAGAC,SAHA,EAIAC,MAJA,EAKAC,UALA;;AAQA;AACAtO;AACAA;AACA;;AAEAA;;AAEAA;;;;","names":["obj","target","src","Object","isObject","extend","body","addEventListener","removeEventListener","activeElement","blur","nodeName","querySelector","querySelectorAll","getElementById","createEvent","initEvent","createElement","children","childNodes","style","setAttribute","getElementsByTagName","createElementNS","importNode","location","hash","host","hostname","href","origin","pathname","protocol","search","document","navigator","userAgent","history","replaceState","pushState","go","back","CustomEvent","getComputedStyle","getPropertyValue","Image","Date","screen","setTimeout","clearTimeout","matchMedia","Dom7","i","self","tempParent","arr","els","$","j","el","key","elStyle","duration","args","eventType","listener","capture","targetSelector","eventData","k","proxyListener","handlers","evt","detail","bubbles","cancelable","callback","dom","top","left","compareWith","returnIndex","newChild","tempDiv","nextEls","prevEls","parents","parent","closest","foundElements","addClass","removeClass","hasClass","toggleClass","attr","removeAttr","data","transform","transition","on","off","trigger","transitionEnd","outerWidth","outerHeight","offset","css","each","html","text","is","index","eq","append","prepend","next","nextAll","prev","prevAll","find","filter","remove","add","styles","deleteProps","object","nextTick","now","getTranslate","curTransform","transformMatrix","matrix","parseUrlQuery","url","urlToParse","params","length","param","query","o","nextIndex","Utils","to","touch","pointerEvents","observer","passiveListener","get","supportsPassive","win","gestures","SwiperClass","events","handler","onceHandler","context","eventsArray","eventHandler","modulesParams","instance","module","Class","width","height","size","$wrapperEl","swiper","swiperSize","rtl","rtlTranslate","wrongRTL","offsetBefore","offsetAfter","spaceBetween","marginLeft","marginTop","slides","marginRight","marginBottom","slidesNumberEvenToRows","slideSize","Math","row","column","newSlideOrderIndex","slide","order","slidesSizesGrid","slidePosition","slidesGrid","prevSlideSize","newSlidesGrid","snapGrid","allSlidesSize","activeSlides","newHeight","offsetCenter","slideAfter","slideBefore","translate","progress","isBeginning","isEnd","activeIndex","realIndex","activeSlide","nextSlide","prevSlide","previousIndex","previousRealIndex","previousSnapIndex","snapIndex","updateSize","updateSlides","updateAutoHeight","updateSlidesOffset","updateSlidesProgress","updateProgress","updateSlidesClasses","updateActiveIndex","updateClickedSlide","wrapperEl","x","y","z","newProgress","newTranslate","isH","setTranslate","minTranslate","maxTranslate","translateTo","dir","setTransition","transitionStart","slideIndex","direction","t","newIndex","animating","prevIndex","slideToIndex","slideTo","slideToLoop","slideNext","slidePrev","slideReset","slideToClosest","slideToClickedSlide","loopedSlides","allowSlidePrev","allowSlideNext","loopCreate","loopFix","loopDestroy","setGrabCursor","unsetGrabCursor","newActiveIndex","activeIndexBuffer","currentSlide","slidesBuffer","indexToRemove","slidesIndexes","appendSlide","prependSlide","addSlide","removeSlide","removeAllSlides","ios","android","androidChrome","desktop","iphone","ipod","ipad","edge","ie","firefox","macos","windows","cordova","phonegap","electron","Support","screenWidth","device","touches","edgeSwipeDetection","startX","isTouched","isMoved","allowTouchCallbacks","isScrolling","startMoving","doc","e","startY","currentX","currentY","pageY","pageX","touchAngle","diff","resistanceRatio","disableParentSwiper","position","time","currentPos","newPosition","afterBouncePosition","doBounce","momentumDuration","stopIndex","groupSize","touchEvents","passive","dummyEventAttached","attachEvents","detachEvents","initialized","$el","breakpointOnlyParams","allowTouchMove","value","point","points","breakpoint","setBreakpoint","getBreakpoint","classNames","suffixes","addClasses","removeClasses","image","onReady","imageEl","loadImage","preloadImages","checkOverflow","init","touchEventsTarget","initialSlide","speed","cssMode","updateOnWindowResize","preventInteractionOnTransition","edgeSwipeThreshold","freeMode","freeModeMomentum","freeModeMomentumRatio","freeModeMomentumBounce","freeModeMomentumBounceRatio","freeModeMomentumVelocityRatio","freeModeSticky","freeModeMinimumVelocity","autoHeight","setWrapperSize","virtualTranslate","effect","breakpoints","slidesPerView","slidesPerColumn","slidesPerColumnFill","slidesPerGroup","slidesPerGroupSkip","centeredSlides","centeredSlidesBounds","slidesOffsetBefore","slidesOffsetAfter","normalizeSlideIndex","centerInsufficientSlides","watchOverflow","roundLengths","touchRatio","simulateTouch","shortSwipes","longSwipes","longSwipesRatio","longSwipesMs","followFinger","threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","resistance","watchSlidesProgress","watchSlidesVisibility","grabCursor","preventClicks","preventClicksPropagation","updateOnImagesReady","loop","loopAdditionalSlides","loopFillGroupWithBlank","swipeHandler","noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideBlankClass","slideActiveClass","slideDuplicateActiveClass","slideVisibleClass","slideDuplicateClass","slideNextClass","slideDuplicateNextClass","slidePrevClass","slideDuplicatePrevClass","wrapperClass","runCallbacksOnInit","update","manipulation","classes","images","Swiper","enabled","defaults","swiperParams","extendedDefaults","swipers","isHorizontal","isVertical","previousTranslate","velocity","start","move","end","cancel","touchEventsData","touchStartTime","currentTranslate","startTranslate","allowThresholdMove","formElements","lastClickTime","clickTimeout","velocities","allowMomentumBounce","isTouchEvent","allowClick","imagesToLoad","imagesLoaded","spv","translated","newDirection","currentDirection","slideEl","join","name","proto","support","isEdge","isSafari","isUiWebView","browser","create","resize","resizeHandler","orientationChangeHandler","destroy","func","attach","options","attributes","childList","characterData","observeParents","observeSlideChildren","observers","handle","event","inView","enable","disable","keyboard","onlyInViewport","element","isSupported","lastScrollTime","lastEventBeforeSnap","recentWheelEvents","normalize","sY","sX","pX","pY","spinX","spinY","pixelX","pixelY","handleMouseEnter","handleMouseLeave","delta","raw","newEvent","firstEvent","animateSlider","releaseScroll","current","firstIndex","lastIndex","midIndex","bullets","$bullet","$firstDisplayedBullet","$lastDisplayedBullet","bulletsOffset","progressbarDirection","scaleX","scaleY","render","paginationHTML","pagination","bulletElement","clickable","hideOnClick","renderBullet","renderProgressbar","renderFraction","renderCustom","progressbarOpposite","type","dynamicBullets","dynamicMainBullets","formatFractionCurrent","formatFractionTotal","bulletClass","bulletActiveClass","modifierClass","currentClass","totalClass","hiddenClass","progressbarFillClass","progressbarOppositeClass","clickableClass","lockClass","dynamicBulletIndex","activeIndexChange","snapIndexChange","slidesLengthChange","snapGridLengthChange","click","scrollbar","dragSize","trackSize","$dragEl","newPos","newSize","divider","moveDivider","getPointerPosition","setDragPosition","dragStartPos","positionRatio","onDragStart","onDragMove","onDragEnd","enableDraggable","touchEventsTouch","touchEventsDesktop","disableDraggable","$swiperEl","dragEl","hide","draggable","snapOnRelease","dragClass","timeout","dragTimeout","observerUpdate","getDistanceBetweenTouches","onGestureStart","gesture","zoom","onGestureChange","onGestureEnd","onTouchStart","onTouchMove","onTouchEnd","onTransitionEnd","toggle","touchX","touchY","slideWidth","slideHeight","offsetX","offsetY","diffX","diffY","imageWidth","imageHeight","scaledWidth","scaledHeight","translateMinX","translateMinY","translateMaxX","translateMaxY","translateX","translateY","out","activeListenerWithCapture","maxRatio","minRatio","containerClass","zoomedSlideClass","scale","currentScale","isScaling","$slideEl","$imageEl","$imageWrapEl","minX","minY","maxX","maxY","touchesStart","touchesCurrent","prevPositionX","prevPositionY","prevTime","set","touchStart","touchEnd","doubleTap","slideChange","run","delay","stop","pause","autoplay","waitForTransition","disableOnInteraction","stopOnLastSlide","reverseDirection","running","paused","onVisibilityChange","beforeTransitionStart","internal","sliderFirstMove","Device$1","Support$1","Browser$1","Resize","Observer$1"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/swiper.bundle-6c5e7804.js"],"sourcesContent":["/**\n * SSR Window 2.0.0\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2020, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: May 12, 2020\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        'constructor' in obj &&\n        obj.constructor === Object);\n}\nfunction extend(target, src) {\n    if (target === void 0) { target = {}; }\n    if (src === void 0) { src = {}; }\n    Object.keys(src).forEach(function (key) {\n        if (typeof target[key] === 'undefined')\n            target[key] = src[key];\n        else if (isObject(src[key]) &&\n            isObject(target[key]) &&\n            Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\n\nvar doc = typeof document !== 'undefined' ? document : {};\nvar ssrDocument = {\n    body: {},\n    addEventListener: function () { },\n    removeEventListener: function () { },\n    activeElement: {\n        blur: function () { },\n        nodeName: '',\n    },\n    querySelector: function () {\n        return null;\n    },\n    querySelectorAll: function () {\n        return [];\n    },\n    getElementById: function () {\n        return null;\n    },\n    createEvent: function () {\n        return {\n            initEvent: function () { },\n        };\n    },\n    createElement: function () {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute: function () { },\n            getElementsByTagName: function () {\n                return [];\n            },\n        };\n    },\n    createElementNS: function () {\n        return {};\n    },\n    importNode: function () {\n        return null;\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n};\nextend(doc, ssrDocument);\n\nvar win = typeof window !== 'undefined' ? window : {};\nvar ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: '',\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n    history: {\n        replaceState: function () { },\n        pushState: function () { },\n        go: function () { },\n        back: function () { },\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener: function () { },\n    removeEventListener: function () { },\n    getComputedStyle: function () {\n        return {\n            getPropertyValue: function () {\n                return '';\n            },\n        };\n    },\n    Image: function () { },\n    Date: function () { },\n    screen: {},\n    setTimeout: function () { },\n    clearTimeout: function () { },\n    matchMedia: function () {\n        return {};\n    },\n};\nextend(win, ssrWindow);\n\n/**\n * Dom7 2.1.5\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * http://framework7.io/docs/dom.html\n *\n * Copyright 2020, Vladimir Kharlampidi\n * The iDangero.us\n * http://www.idangero.us/\n *\n * Licensed under MIT\n *\n * Released on: May 15, 2020\n */\n\nclass Dom7 {\n  constructor(arr) {\n    const self = this;\n    // Create array-like object\n    for (let i = 0; i < arr.length; i += 1) {\n      self[i] = arr[i];\n    }\n    self.length = arr.length;\n    // Return collection with methods\n    return this;\n  }\n}\n\nfunction $(selector, context) {\n  const arr = [];\n  let i = 0;\n  if (selector && !context) {\n    if (selector instanceof Dom7) {\n      return selector;\n    }\n  }\n  if (selector) {\n      // String\n    if (typeof selector === 'string') {\n      let els;\n      let tempParent;\n      const html = selector.trim();\n      if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n        let toCreate = 'div';\n        if (html.indexOf('<li') === 0) toCreate = 'ul';\n        if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n        if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n        if (html.indexOf('<tbody') === 0) toCreate = 'table';\n        if (html.indexOf('<option') === 0) toCreate = 'select';\n        tempParent = doc.createElement(toCreate);\n        tempParent.innerHTML = html;\n        for (i = 0; i < tempParent.childNodes.length; i += 1) {\n          arr.push(tempParent.childNodes[i]);\n        }\n      } else {\n        if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {\n          // Pure ID selector\n          els = [doc.getElementById(selector.trim().split('#')[1])];\n        } else {\n          // Other selectors\n          els = (context || doc).querySelectorAll(selector.trim());\n        }\n        for (i = 0; i < els.length; i += 1) {\n          if (els[i]) arr.push(els[i]);\n        }\n      }\n    } else if (selector.nodeType || selector === win || selector === doc) {\n      // Node/element\n      arr.push(selector);\n    } else if (selector.length > 0 && selector[0].nodeType) {\n      // Array of elements or instance of Dom\n      for (i = 0; i < selector.length; i += 1) {\n        arr.push(selector[i]);\n      }\n    }\n  }\n  return new Dom7(arr);\n}\n\n$.fn = Dom7.prototype;\n$.Class = Dom7;\n$.Dom7 = Dom7;\n\nfunction unique(arr) {\n  const uniqueArray = [];\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n  }\n  return uniqueArray;\n}\n\n// Classes and attributes\nfunction addClass(className) {\n  if (typeof className === 'undefined') {\n    return this;\n  }\n  const classes = className.split(' ');\n  for (let i = 0; i < classes.length; i += 1) {\n    for (let j = 0; j < this.length; j += 1) {\n      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.add(classes[i]);\n    }\n  }\n  return this;\n}\nfunction removeClass(className) {\n  const classes = className.split(' ');\n  for (let i = 0; i < classes.length; i += 1) {\n    for (let j = 0; j < this.length; j += 1) {\n      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.remove(classes[i]);\n    }\n  }\n  return this;\n}\nfunction hasClass(className) {\n  if (!this[0]) return false;\n  return this[0].classList.contains(className);\n}\nfunction toggleClass(className) {\n  const classes = className.split(' ');\n  for (let i = 0; i < classes.length; i += 1) {\n    for (let j = 0; j < this.length; j += 1) {\n      if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') this[j].classList.toggle(classes[i]);\n    }\n  }\n  return this;\n}\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === 'string') {\n    // Get attr\n    if (this[0]) return this[0].getAttribute(attrs);\n    return undefined;\n  }\n\n  // Set attrs\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      // String\n      this[i].setAttribute(attrs, value);\n    } else {\n      // Object\n      // eslint-disable-next-line\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n  return this;\n}\n// eslint-disable-next-line\nfunction removeAttr(attr) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr);\n  }\n  return this;\n}\nfunction data(key, value) {\n  let el;\n  if (typeof value === 'undefined') {\n    el = this[0];\n    // Get value\n    if (el) {\n      if (el.dom7ElementDataStorage && (key in el.dom7ElementDataStorage)) {\n        return el.dom7ElementDataStorage[key];\n      }\n\n      const dataKey = el.getAttribute(`data-${key}`);\n      if (dataKey) {\n        return dataKey;\n      }\n      return undefined;\n    }\n    return undefined;\n  }\n\n  // Set value\n  for (let i = 0; i < this.length; i += 1) {\n    el = this[i];\n    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n    el.dom7ElementDataStorage[key] = value;\n  }\n  return this;\n}\n// Transforms\n// eslint-disable-next-line\nfunction transform(transform) {\n  for (let i = 0; i < this.length; i += 1) {\n    const elStyle = this[i].style;\n    elStyle.webkitTransform = transform;\n    elStyle.transform = transform;\n  }\n  return this;\n}\nfunction transition(duration) {\n  if (typeof duration !== 'string') {\n    duration = `${duration}ms`; // eslint-disable-line\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    const elStyle = this[i].style;\n    elStyle.webkitTransitionDuration = duration;\n    elStyle.transitionDuration = duration;\n  }\n  return this;\n}\n// Events\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n  if (!capture) capture = false;\n\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target) return;\n    const eventData = e.target.dom7EventData || [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    if ($(target).is(targetSelector)) listener.apply(target, eventData);\n    else {\n      const parents = $(target).parents(); // eslint-disable-line\n      for (let k = 0; k < parents.length; k += 1) {\n        if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);\n      }\n    }\n  }\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    listener.apply(this, eventData);\n  }\n  const events = eventType.split(' ');\n  let j;\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (!targetSelector) {\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7Listeners) el.dom7Listeners = {};\n        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener,\n          proxyListener: handleEvent,\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      // Live events\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];\n        el.dom7LiveListeners[event].push({\n          listener,\n          proxyListener: handleLiveEvent,\n        });\n        el.addEventListener(event, handleLiveEvent, capture);\n      }\n    }\n  }\n  return this;\n}\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n  if (!capture) capture = false;\n\n  const events = eventType.split(' ');\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n  return this;\n}\nfunction trigger(...args) {\n  const events = args[0].split(' ');\n  const eventData = args[1];\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let evt;\n      try {\n        evt = new win.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true,\n        });\n      } catch (e) {\n        evt = doc.createEvent('Event');\n        evt.initEvent(event, true, true);\n        evt.detail = eventData;\n      }\n      // eslint-disable-next-line\n      el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n      el.dispatchEvent(evt);\n      el.dom7EventData = [];\n      delete el.dom7EventData;\n    }\n  }\n  return this;\n}\nfunction transitionEnd(callback) {\n  const events = ['webkitTransitionEnd', 'transitionend'];\n  const dom = this;\n  let i;\n  function fireCallBack(e) {\n    /* jshint validthis:true */\n    if (e.target !== this) return;\n    callback.call(this, e);\n    for (i = 0; i < events.length; i += 1) {\n      dom.off(events[i], fireCallBack);\n    }\n  }\n  if (callback) {\n    for (i = 0; i < events.length; i += 1) {\n      dom.on(events[i], fireCallBack);\n    }\n  }\n  return this;\n}\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      // eslint-disable-next-line\n      const styles = this.styles();\n      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n    }\n    return this[0].offsetWidth;\n  }\n  return null;\n}\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      // eslint-disable-next-line\n      const styles = this.styles();\n      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n    }\n    return this[0].offsetHeight;\n  }\n  return null;\n}\nfunction offset() {\n  if (this.length > 0) {\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = doc.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === win ? win.scrollY : el.scrollTop;\n    const scrollLeft = el === win ? win.scrollX : el.scrollLeft;\n    return {\n      top: (box.top + scrollTop) - clientTop,\n      left: (box.left + scrollLeft) - clientLeft,\n    };\n  }\n\n  return null;\n}\nfunction styles() {\n  if (this[0]) return win.getComputedStyle(this[0], null);\n  return {};\n}\nfunction css(props, value) {\n  let i;\n  if (arguments.length === 1) {\n    if (typeof props === 'string') {\n      if (this[0]) return win.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      for (i = 0; i < this.length; i += 1) {\n        // eslint-disable-next-line\n        for (let prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n      return this;\n    }\n  }\n  if (arguments.length === 2 && typeof props === 'string') {\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n    return this;\n  }\n  return this;\n}\n// Iterate over the collection passing elements to `callback`\nfunction each(callback) {\n  // Don't bother continuing without a callback\n  if (!callback) return this;\n  // Iterate over the current collection\n  for (let i = 0; i < this.length; i += 1) {\n    // If the callback returns false\n    if (callback.call(this[i], i, this[i]) === false) {\n      // End the loop early\n      return this;\n    }\n  }\n  // Return `this` to allow chained DOM operations\n  return this;\n}\nfunction filter(callback) {\n  const matchedItems = [];\n  const dom = this;\n  for (let i = 0; i < dom.length; i += 1) {\n    if (callback.call(dom[i], i, dom[i])) matchedItems.push(dom[i]);\n  }\n  return new Dom7(matchedItems);\n}\n// eslint-disable-next-line\nfunction html(html) {\n  if (typeof html === 'undefined') {\n    return this[0] ? this[0].innerHTML : undefined;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html;\n  }\n  return this;\n}\n// eslint-disable-next-line\nfunction text(text) {\n  if (typeof text === 'undefined') {\n    if (this[0]) {\n      return this[0].textContent.trim();\n    }\n    return null;\n  }\n\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text;\n  }\n  return this;\n}\nfunction is(selector) {\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === 'undefined') return false;\n  if (typeof selector === 'string') {\n    if (el.matches) return el.matches(selector);\n    else if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n    else if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n\n    compareWith = $(selector);\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n    return false;\n  } else if (selector === doc) return el === doc;\n  else if (selector === win) return el === win;\n\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n    return false;\n  }\n  return false;\n}\nfunction index() {\n  let child = this[0];\n  let i;\n  if (child) {\n    i = 0;\n    // eslint-disable-next-line\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n    return i;\n  }\n  return undefined;\n}\n// eslint-disable-next-line\nfunction eq(index) {\n  if (typeof index === 'undefined') return this;\n  const length = this.length;\n  let returnIndex;\n  if (index > length - 1) {\n    return new Dom7([]);\n  }\n  if (index < 0) {\n    returnIndex = length + index;\n    if (returnIndex < 0) return new Dom7([]);\n    return new Dom7([this[returnIndex]]);\n  }\n  return new Dom7([this[index]]);\n}\nfunction append(...args) {\n  let newChild;\n\n  for (let k = 0; k < args.length; k += 1) {\n    newChild = args[k];\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        const tempDiv = doc.createElement('div');\n        tempDiv.innerHTML = newChild;\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n\n  return this;\n}\nfunction prepend(newChild) {\n  let i;\n  let j;\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === 'string') {\n      const tempDiv = doc.createElement('div');\n      tempDiv.innerHTML = newChild;\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n  return this;\n}\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return new Dom7([this[0].nextElementSibling]);\n      }\n      return new Dom7([]);\n    }\n\n    if (this[0].nextElementSibling) return new Dom7([this[0].nextElementSibling]);\n    return new Dom7([]);\n  }\n  return new Dom7([]);\n}\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el) return new Dom7([]);\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n    if (selector) {\n      if ($(next).is(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n    el = next;\n  }\n  return new Dom7(nextEls);\n}\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return new Dom7([el.previousElementSibling]);\n      }\n      return new Dom7([]);\n    }\n\n    if (el.previousElementSibling) return new Dom7([el.previousElementSibling]);\n    return new Dom7([]);\n  }\n  return new Dom7([]);\n}\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el) return new Dom7([]);\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n    if (selector) {\n      if ($(prev).is(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n    el = prev;\n  }\n  return new Dom7(prevEls);\n}\nfunction parent(selector) {\n  const parents = []; // eslint-disable-line\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n      } else {\n        parents.push(this[i].parentNode);\n      }\n    }\n  }\n  return $(unique(parents));\n}\nfunction parents(selector) {\n  const parents = []; // eslint-disable-line\n  for (let i = 0; i < this.length; i += 1) {\n    let parent = this[i].parentNode; // eslint-disable-line\n    while (parent) {\n      if (selector) {\n        if ($(parent).is(selector)) parents.push(parent);\n      } else {\n        parents.push(parent);\n      }\n      parent = parent.parentNode;\n    }\n  }\n  return $(unique(parents));\n}\nfunction closest(selector) {\n  let closest = this; // eslint-disable-line\n  if (typeof selector === 'undefined') {\n    return new Dom7([]);\n  }\n  if (!closest.is(selector)) {\n    closest = closest.parents(selector).eq(0);\n  }\n  return closest;\n}\nfunction find(selector) {\n  const foundElements = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n  return new Dom7(foundElements);\n}\nfunction children(selector) {\n  const children = []; // eslint-disable-line\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].childNodes;\n\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector) {\n        if (childNodes[j].nodeType === 1) children.push(childNodes[j]);\n      } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {\n        children.push(childNodes[j]);\n      }\n    }\n  }\n  return new Dom7(unique(children));\n}\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n  }\n  return this;\n}\nfunction add(...args) {\n  const dom = this;\n  let i;\n  let j;\n  for (i = 0; i < args.length; i += 1) {\n    const toAdd = $(args[i]);\n    for (j = 0; j < toAdd.length; j += 1) {\n      dom[dom.length] = toAdd[j];\n      dom.length += 1;\n    }\n  }\n  return dom;\n}\n\n/**\n * Swiper 5.4.1\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * http://swiperjs.com\n *\n * Copyright 2014-2020 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: May 20, 2020\n */\n\nconst Methods = {\n  addClass,\n  removeClass,\n  hasClass,\n  toggleClass,\n  attr,\n  removeAttr,\n  data,\n  transform,\n  transition: transition,\n  on,\n  off,\n  trigger,\n  transitionEnd: transitionEnd,\n  outerWidth,\n  outerHeight,\n  offset,\n  css,\n  each,\n  html,\n  text,\n  is,\n  index,\n  eq,\n  append,\n  prepend,\n  next,\n  nextAll,\n  prev,\n  prevAll,\n  parent,\n  parents,\n  closest,\n  find,\n  children,\n  filter,\n  remove,\n  add,\n  styles,\n};\n\nObject.keys(Methods).forEach((methodName) => {\n  $.fn[methodName] = $.fn[methodName] || Methods[methodName];\n});\n\nconst Utils = {\n  deleteProps(obj) {\n    const object = obj;\n    Object.keys(object).forEach((key) => {\n      try {\n        object[key] = null;\n      } catch (e) {\n        // no getter for object\n      }\n      try {\n        delete object[key];\n      } catch (e) {\n        // something got wrong\n      }\n    });\n  },\n  nextTick(callback, delay = 0) {\n    return setTimeout(callback, delay);\n  },\n  now() {\n    return Date.now();\n  },\n  getTranslate(el, axis = 'x') {\n    let matrix;\n    let curTransform;\n    let transformMatrix;\n\n    const curStyle = win.getComputedStyle(el, null);\n\n    if (win.WebKitCSSMatrix) {\n      curTransform = curStyle.transform || curStyle.webkitTransform;\n      if (curTransform.split(',').length > 6) {\n        curTransform = curTransform.split(', ').map((a) => a.replace(',', '.')).join(', ');\n      }\n      // Some old versions of Webkit choke when 'none' is passed; pass\n      // empty string instead in this case\n      transformMatrix = new win.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n    } else {\n      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n      matrix = transformMatrix.toString().split(',');\n    }\n\n    if (axis === 'x') {\n      // Latest Chrome and webkits Fix\n      if (win.WebKitCSSMatrix) curTransform = transformMatrix.m41;\n      // Crazy IE10 Matrix\n      else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\n      // Normal Browsers\n      else curTransform = parseFloat(matrix[4]);\n    }\n    if (axis === 'y') {\n      // Latest Chrome and webkits Fix\n      if (win.WebKitCSSMatrix) curTransform = transformMatrix.m42;\n      // Crazy IE10 Matrix\n      else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\n      // Normal Browsers\n      else curTransform = parseFloat(matrix[5]);\n    }\n    return curTransform || 0;\n  },\n  parseUrlQuery(url) {\n    const query = {};\n    let urlToParse = url || win.location.href;\n    let i;\n    let params;\n    let param;\n    let length;\n    if (typeof urlToParse === 'string' && urlToParse.length) {\n      urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\\S*\\?/, '') : '';\n      params = urlToParse.split('&').filter((paramsPart) => paramsPart !== '');\n      length = params.length;\n\n      for (i = 0; i < length; i += 1) {\n        param = params[i].replace(/#\\S+/g, '').split('=');\n        query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';\n      }\n    }\n    return query;\n  },\n  isObject(o) {\n    return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;\n  },\n  extend(...args) {\n    const to = Object(args[0]);\n    const noExtend = ['__proto__', 'constructor', 'prototype'];\n    for (let i = 1; i < args.length; i += 1) {\n      const nextSource = args[i];\n      if (nextSource !== undefined && nextSource !== null) {\n        const keysArray = Object.keys(Object(nextSource)).filter((key) => noExtend.indexOf(key) < 0);\n        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n          const nextKey = keysArray[nextIndex];\n          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n          if (desc !== undefined && desc.enumerable) {\n            if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {\n              Utils.extend(to[nextKey], nextSource[nextKey]);\n            } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {\n              to[nextKey] = {};\n              Utils.extend(to[nextKey], nextSource[nextKey]);\n            } else {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n    }\n    return to;\n  },\n};\n\nconst Support = (function Support() {\n  return {\n    touch: !!(('ontouchstart' in win) || (win.DocumentTouch && doc instanceof win.DocumentTouch)),\n\n    pointerEvents: !!win.PointerEvent && ('maxTouchPoints' in win.navigator) && win.navigator.maxTouchPoints >= 0,\n\n    observer: (function checkObserver() {\n      return ('MutationObserver' in win || 'WebkitMutationObserver' in win);\n    }()),\n\n    passiveListener: (function checkPassiveListener() {\n      let supportsPassive = false;\n      try {\n        const opts = Object.defineProperty({}, 'passive', {\n          // eslint-disable-next-line\n          get() {\n            supportsPassive = true;\n          },\n        });\n        win.addEventListener('testPassiveListener', null, opts);\n      } catch (e) {\n        // No support\n      }\n      return supportsPassive;\n    }()),\n\n    gestures: (function checkGestures() {\n      return 'ongesturestart' in win;\n    }()),\n  };\n}());\n\nclass SwiperClass {\n  constructor(params = {}) {\n    const self = this;\n    self.params = params;\n\n    // Events\n    self.eventsListeners = {};\n\n    if (self.params && self.params.on) {\n      Object.keys(self.params.on).forEach((eventName) => {\n        self.on(eventName, self.params.on[eventName]);\n      });\n    }\n  }\n\n  on(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach((event) => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  }\n\n  once(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n    function onceHandler(...args) {\n      self.off(events, onceHandler);\n      if (onceHandler.f7proxy) {\n        delete onceHandler.f7proxy;\n      }\n      handler.apply(self, args);\n    }\n    onceHandler.f7proxy = handler;\n    return self.on(events, onceHandler, priority);\n  }\n\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach((event) => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event] && self.eventsListeners[event].length) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || (eventHandler.f7proxy && eventHandler.f7proxy === handler)) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  }\n\n  emit(...args) {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach((event) => {\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        const handlers = [];\n        self.eventsListeners[event].forEach((eventHandler) => {\n          handlers.push(eventHandler);\n        });\n        handlers.forEach((eventHandler) => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n\n  useModulesParams(instanceParams) {\n    const instance = this;\n    if (!instance.modules) return;\n    Object.keys(instance.modules).forEach((moduleName) => {\n      const module = instance.modules[moduleName];\n      // Extend params\n      if (module.params) {\n        Utils.extend(instanceParams, module.params);\n      }\n    });\n  }\n\n  useModules(modulesParams = {}) {\n    const instance = this;\n    if (!instance.modules) return;\n    Object.keys(instance.modules).forEach((moduleName) => {\n      const module = instance.modules[moduleName];\n      const moduleParams = modulesParams[moduleName] || {};\n      // Extend instance methods and props\n      if (module.instance) {\n        Object.keys(module.instance).forEach((modulePropName) => {\n          const moduleProp = module.instance[modulePropName];\n          if (typeof moduleProp === 'function') {\n            instance[modulePropName] = moduleProp.bind(instance);\n          } else {\n            instance[modulePropName] = moduleProp;\n          }\n        });\n      }\n      // Add event listeners\n      if (module.on && instance.on) {\n        Object.keys(module.on).forEach((moduleEventName) => {\n          instance.on(moduleEventName, module.on[moduleEventName]);\n        });\n      }\n\n      // Module create callback\n      if (module.create) {\n        module.create.bind(instance)(moduleParams);\n      }\n    });\n  }\n\n  static set components(components) {\n    const Class = this;\n    if (!Class.use) return;\n    Class.use(components);\n  }\n\n  static installModule(module, ...params) {\n    const Class = this;\n    if (!Class.prototype.modules) Class.prototype.modules = {};\n    const name = module.name || (`${Object.keys(Class.prototype.modules).length}_${Utils.now()}`);\n    Class.prototype.modules[name] = module;\n    // Prototype\n    if (module.proto) {\n      Object.keys(module.proto).forEach((key) => {\n        Class.prototype[key] = module.proto[key];\n      });\n    }\n    // Class\n    if (module.static) {\n      Object.keys(module.static).forEach((key) => {\n        Class[key] = module.static[key];\n      });\n    }\n    // Callback\n    if (module.install) {\n      module.install.apply(Class, params);\n    }\n    return Class;\n  }\n\n  static use(module, ...params) {\n    const Class = this;\n    if (Array.isArray(module)) {\n      module.forEach((m) => Class.installModule(m));\n      return Class;\n    }\n    return Class.installModule(module, ...params);\n  }\n}\n\nfunction updateSize () {\n  const swiper = this;\n  let width;\n  let height;\n  const $el = swiper.$el;\n  if (typeof swiper.params.width !== 'undefined') {\n    width = swiper.params.width;\n  } else {\n    width = $el[0].clientWidth;\n  }\n  if (typeof swiper.params.height !== 'undefined') {\n    height = swiper.params.height;\n  } else {\n    height = $el[0].clientHeight;\n  }\n  if ((width === 0 && swiper.isHorizontal()) || (height === 0 && swiper.isVertical())) {\n    return;\n  }\n\n  // Subtract paddings\n  width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);\n  height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);\n\n  Utils.extend(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height,\n  });\n}\n\nfunction updateSlides () {\n  const swiper = this;\n  const params = swiper.params;\n\n  const {\n    $wrapperEl, size: swiperSize, rtlTranslate: rtl, wrongRTL,\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = $wrapperEl.children(`.${swiper.params.slideClass}`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n\n  function slidesForMargin(slideIndex) {\n    if (!params.cssMode) return true;\n    if (slideIndex === slides.length - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.snapGrid.length;\n\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = (parseFloat(spaceBetween.replace('%', '')) / 100) * swiperSize;\n  }\n\n  swiper.virtualSize = -spaceBetween;\n\n  // reset margins\n  if (rtl) slides.css({ marginLeft: '', marginTop: '' });\n  else slides.css({ marginRight: '', marginBottom: '' });\n\n  let slidesNumberEvenToRows;\n  if (params.slidesPerColumn > 1) {\n    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;\n    }\n    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);\n    }\n  }\n\n  // Calc slides\n  let slideSize;\n  const slidesPerColumn = params.slidesPerColumn;\n  const slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;\n  const numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    const slide = slides.eq(i);\n    if (params.slidesPerColumn > 1) {\n      // Set slides order\n      let newSlideOrderIndex;\n      let column;\n      let row;\n      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {\n        const groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));\n        const slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;\n        const columnsInGroup = groupIndex === 0\n          ? params.slidesPerGroup\n          : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);\n        row = Math.floor(slideIndexInGroup / columnsInGroup);\n        column = (slideIndexInGroup - row * columnsInGroup) + groupIndex * params.slidesPerGroup;\n\n        newSlideOrderIndex = column + ((row * slidesNumberEvenToRows) / slidesPerColumn);\n        slide\n          .css({\n            '-webkit-box-ordinal-group': newSlideOrderIndex,\n            '-moz-box-ordinal-group': newSlideOrderIndex,\n            '-ms-flex-order': newSlideOrderIndex,\n            '-webkit-order': newSlideOrderIndex,\n            order: newSlideOrderIndex,\n          });\n      } else if (params.slidesPerColumnFill === 'column') {\n        column = Math.floor(i / slidesPerColumn);\n        row = i - (column * slidesPerColumn);\n        if (column > numFullColumns || (column === numFullColumns && row === slidesPerColumn - 1)) {\n          row += 1;\n          if (row >= slidesPerColumn) {\n            row = 0;\n            column += 1;\n          }\n        }\n      } else {\n        row = Math.floor(i / slidesPerRow);\n        column = i - (row * slidesPerRow);\n      }\n      slide.css(\n        `margin-${swiper.isHorizontal() ? 'top' : 'left'}`,\n        (row !== 0 && params.spaceBetween) && (`${params.spaceBetween}px`)\n      );\n    }\n    if (slide.css('display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      const slideStyles = win.getComputedStyle(slide[0], null);\n      const currentTransform = slide[0].style.transform;\n      const currentWebKitTransform = slide[0].style.webkitTransform;\n      if (currentTransform) {\n        slide[0].style.transform = 'none';\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = 'none';\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal()\n          ? slide.outerWidth(true)\n          : slide.outerHeight(true);\n      } else {\n        // eslint-disable-next-line\n        if (swiper.isHorizontal()) {\n          const width = parseFloat(slideStyles.getPropertyValue('width'));\n          const paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));\n          const paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));\n          const marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));\n          const marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\n          if (boxSizing && boxSizing === 'border-box') {\n            slideSize = width + marginLeft + marginRight;\n          } else {\n            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;\n          }\n        } else {\n          const height = parseFloat(slideStyles.getPropertyValue('height'));\n          const paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));\n          const paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));\n          const marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));\n          const marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\n          if (boxSizing && boxSizing === 'border-box') {\n            slideSize = height + marginTop + marginBottom;\n          } else {\n            slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;\n          }\n        }\n      }\n      if (currentTransform) {\n        slide[0].style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide[0].style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - ((params.slidesPerView - 1) * spaceBetween)) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n\n      if (slides[i]) {\n        if (swiper.isHorizontal()) {\n          slides[i].style.width = `${slideSize}px`;\n        } else {\n          slides[i].style.height = `${slideSize}px`;\n        }\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n\n\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + (slideSize / 2) + (prevSlideSize / 2) + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - (swiperSize / 2) - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index) % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n\n    swiper.virtualSize += slideSize + spaceBetween;\n\n    prevSlideSize = slideSize;\n\n    index += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  let newSlidesGrid;\n\n  if (\n    rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });\n  }\n  if (params.setWrapperSize) {\n    if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });\n    else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });\n  }\n\n  if (params.slidesPerColumn > 1) {\n    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;\n    if (swiper.isHorizontal()) $wrapperEl.css({ width: `${swiper.virtualSize + params.spaceBetween}px` });\n    else $wrapperEl.css({ height: `${swiper.virtualSize + params.spaceBetween}px` });\n    if (params.centeredSlides) {\n      newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid = newSlidesGrid;\n    }\n  }\n\n  // Remove last grid elements depending on width\n  if (!params.centeredSlides) {\n    newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (snapGrid.length === 0) snapGrid = [0];\n\n  if (params.spaceBetween !== 0) {\n    if (swiper.isHorizontal()) {\n      if (rtl) slides.filter(slidesForMargin).css({ marginLeft: `${spaceBetween}px` });\n      else slides.filter(slidesForMargin).css({ marginRight: `${spaceBetween}px` });\n    } else slides.filter(slidesForMargin).css({ marginBottom: `${spaceBetween}px` });\n  }\n\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map((snap) => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach((slideSizeValue) => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n\n  Utils.extend(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid,\n  });\n\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n\n  if (params.watchSlidesProgress || params.watchSlidesVisibility) {\n    swiper.updateSlidesOffset();\n  }\n}\n\nfunction updateAutoHeight (speed) {\n  const swiper = this;\n  const activeSlides = [];\n  let newHeight = 0;\n  let i;\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n  // Find slides currently in view\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      swiper.visibleSlides.each((index, slide) => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length) break;\n        activeSlides.push(swiper.slides.eq(index)[0]);\n      }\n    }\n  } else {\n    activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);\n  }\n\n  // Find new height from highest slide in view\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  }\n\n  // Update Height\n  if (newHeight) swiper.$wrapperEl.css('height', `${newHeight}px`);\n}\n\nfunction updateSlidesOffset () {\n  const swiper = this;\n  const slides = swiper.slides;\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n  }\n}\n\nfunction updateSlidesProgress (translate = (this && this.translate) || 0) {\n  const swiper = this;\n  const params = swiper.params;\n\n  const { slides, rtlTranslate: rtl } = swiper;\n\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n\n  let offsetCenter = -translate;\n  if (rtl) offsetCenter = translate;\n\n  // Visible Slides\n  slides.removeClass(params.slideVisibleClass);\n\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    const slideProgress = (\n      (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0)) - slide.swiperSlideOffset\n    ) / (slide.swiperSlideSize + params.spaceBetween);\n    if (params.watchSlidesVisibility || (params.centeredSlides && params.autoHeight)) {\n      const slideBefore = -(offsetCenter - slide.swiperSlideOffset);\n      const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n      const isVisible = (slideBefore >= 0 && slideBefore < swiper.size - 1)\n                || (slideAfter > 1 && slideAfter <= swiper.size)\n                || (slideBefore <= 0 && slideAfter >= swiper.size);\n      if (isVisible) {\n        swiper.visibleSlides.push(slide);\n        swiper.visibleSlidesIndexes.push(i);\n        slides.eq(i).addClass(params.slideVisibleClass);\n      }\n    }\n    slide.progress = rtl ? -slideProgress : slideProgress;\n  }\n  swiper.visibleSlides = $(swiper.visibleSlides);\n}\n\nfunction updateProgress (translate) {\n  const swiper = this;\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1;\n    // eslint-disable-next-line\n    translate = (swiper && swiper.translate && (swiper.translate * multiplier)) || 0;\n  }\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let { progress, isBeginning, isEnd } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / (translatesDiff);\n    isBeginning = progress <= 0;\n    isEnd = progress >= 1;\n  }\n  Utils.extend(swiper, {\n    progress,\n    isBeginning,\n    isEnd,\n  });\n\n  if (params.watchSlidesProgress || params.watchSlidesVisibility || (params.centeredSlides && params.autoHeight)) swiper.updateSlidesProgress(translate);\n\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n  if ((wasBeginning && !isBeginning) || (wasEnd && !isEnd)) {\n    swiper.emit('fromEdge');\n  }\n\n  swiper.emit('progress', progress);\n}\n\nfunction updateSlidesClasses () {\n  const swiper = this;\n\n  const {\n    slides, params, $wrapperEl, activeIndex, realIndex,\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n\n  slides.removeClass(`${params.slideActiveClass} ${params.slideNextClass} ${params.slidePrevClass} ${params.slideDuplicateActiveClass} ${params.slideDuplicateNextClass} ${params.slideDuplicatePrevClass}`);\n\n  let activeSlide;\n  if (isVirtual) {\n    activeSlide = swiper.$wrapperEl.find(`.${params.slideClass}[data-swiper-slide-index=\"${activeIndex}\"]`);\n  } else {\n    activeSlide = slides.eq(activeIndex);\n  }\n\n  // Active classes\n  activeSlide.addClass(params.slideActiveClass);\n\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (activeSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl\n        .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${realIndex}\"]`)\n        .addClass(params.slideDuplicateActiveClass);\n    } else {\n      $wrapperEl\n        .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${realIndex}\"]`)\n        .addClass(params.slideDuplicateActiveClass);\n    }\n  }\n  // Next Slide\n  let nextSlide = activeSlide.nextAll(`.${params.slideClass}`).eq(0).addClass(params.slideNextClass);\n  if (params.loop && nextSlide.length === 0) {\n    nextSlide = slides.eq(0);\n    nextSlide.addClass(params.slideNextClass);\n  }\n  // Prev Slide\n  let prevSlide = activeSlide.prevAll(`.${params.slideClass}`).eq(0).addClass(params.slidePrevClass);\n  if (params.loop && prevSlide.length === 0) {\n    prevSlide = slides.eq(-1);\n    prevSlide.addClass(params.slidePrevClass);\n  }\n  if (params.loop) {\n    // Duplicate to all looped slides\n    if (nextSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl\n        .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`)\n        .addClass(params.slideDuplicateNextClass);\n    } else {\n      $wrapperEl\n        .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${nextSlide.attr('data-swiper-slide-index')}\"]`)\n        .addClass(params.slideDuplicateNextClass);\n    }\n    if (prevSlide.hasClass(params.slideDuplicateClass)) {\n      $wrapperEl\n        .children(`.${params.slideClass}:not(.${params.slideDuplicateClass})[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`)\n        .addClass(params.slideDuplicatePrevClass);\n    } else {\n      $wrapperEl\n        .children(`.${params.slideClass}.${params.slideDuplicateClass}[data-swiper-slide-index=\"${prevSlide.attr('data-swiper-slide-index')}\"]`)\n        .addClass(params.slideDuplicatePrevClass);\n    }\n  }\n}\n\nfunction updateActiveIndex (newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    slidesGrid, snapGrid, params, activeIndex: previousIndex, realIndex: previousRealIndex, snapIndex: previousSnapIndex,\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n  if (typeof activeIndex === 'undefined') {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - ((slidesGrid[i + 1] - slidesGrid[i]) / 2)) {\n          activeIndex = i;\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n          activeIndex = i + 1;\n        }\n      } else if (translate >= slidesGrid[i]) {\n        activeIndex = i;\n      }\n    }\n    // Normalize slideIndex\n    if (params.normalizeSlideIndex) {\n      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n    }\n  }\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n    return;\n  }\n\n  // Get real index\n  const realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n\n  Utils.extend(swiper, {\n    snapIndex,\n    realIndex,\n    previousIndex,\n    activeIndex,\n  });\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n  if (previousRealIndex !== realIndex) {\n    swiper.emit('realIndexChange');\n  }\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit('slideChange');\n  }\n}\n\nfunction updateClickedSlide (e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = $(e.target).closest(`.${params.slideClass}`)[0];\n  let slideFound = false;\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) slideFound = true;\n    }\n  }\n\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = $(slide).index();\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}\n\nvar update = {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide,\n};\n\nfunction getTranslate (axis = this.isHorizontal() ? 'x' : 'y') {\n  const swiper = this;\n\n  const {\n    params, rtlTranslate: rtl, translate, $wrapperEl,\n  } = swiper;\n\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n  if (params.cssMode) {\n    return translate;\n  }\n\n  let currentTranslate = Utils.getTranslate($wrapperEl[0], axis);\n  if (rtl) currentTranslate = -currentTranslate;\n\n  return currentTranslate || 0;\n}\n\nfunction setTranslate (translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl, params, $wrapperEl, wrapperEl, progress,\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    $wrapperEl.transform(`translate3d(${x}px, ${y}px, ${z}px)`);\n  }\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y;\n\n  // Check if we need to update progress\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / (translatesDiff);\n  }\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, byController);\n}\n\nfunction minTranslate () {\n  return (-this.snapGrid[0]);\n}\n\nfunction maxTranslate () {\n  return (-this.snapGrid[this.snapGrid.length - 1]);\n}\n\nfunction translateTo (translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {\n  const swiper = this;\n\n  const {\n    params,\n    wrapperEl,\n  } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;\n  else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;\n  else newTranslate = translate;\n\n  // Update progress\n  swiper.updateProgress(newTranslate);\n\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      // eslint-disable-next-line\n      if (wrapperEl.scrollTo) {\n        wrapperEl.scrollTo({\n          [isH ? 'left' : 'top']: -newTranslate,\n          behavior: 'smooth',\n        });\n      } else {\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n      }\n    }\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}\n\nvar translate = {\n  getTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo,\n};\n\nfunction setTransition (duration, byController) {\n  const swiper = this;\n\n  if (!swiper.params.cssMode) {\n    swiper.$wrapperEl.transition(duration);\n  }\n\n  swiper.emit('setTransition', duration, byController);\n}\n\nfunction transitionStart (runCallbacks = true, direction) {\n  const swiper = this;\n  const { activeIndex, params, previousIndex } = swiper;\n  if (params.cssMode) return;\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';\n    else if (activeIndex < previousIndex) dir = 'prev';\n    else dir = 'reset';\n  }\n\n  swiper.emit('transitionStart');\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit('slideResetTransitionStart');\n      return;\n    }\n    swiper.emit('slideChangeTransitionStart');\n    if (dir === 'next') {\n      swiper.emit('slideNextTransitionStart');\n    } else {\n      swiper.emit('slidePrevTransitionStart');\n    }\n  }\n}\n\nfunction transitionEnd$1 (runCallbacks = true, direction) {\n  const swiper = this;\n  const { activeIndex, previousIndex, params } = swiper;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';\n    else if (activeIndex < previousIndex) dir = 'prev';\n    else dir = 'reset';\n  }\n\n  swiper.emit('transitionEnd');\n\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit('slideResetTransitionEnd');\n      return;\n    }\n    swiper.emit('slideChangeTransitionEnd');\n    if (dir === 'next') {\n      swiper.emit('slideNextTransitionEnd');\n    } else {\n      swiper.emit('slidePrevTransitionEnd');\n    }\n  }\n}\n\nvar transition$1 = {\n  setTransition,\n  transitionStart,\n  transitionEnd: transitionEnd$1,\n};\n\nfunction slideTo (index = 0, speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n\n  const {\n    params, snapGrid, slidesGrid, previousIndex, activeIndex, rtlTranslate: rtl, wrapperEl,\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n\n  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  const translate = -snapGrid[snapIndex];\n\n  // Update progress\n  swiper.updateProgress(translate);\n\n  // Normalize slideIndex\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {\n        slideIndex = i;\n      }\n    }\n  }\n  // Directions locks\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) return false;\n    }\n  }\n\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';\n  else if (slideIndex < activeIndex) direction = 'prev';\n  else direction = 'reset';\n\n\n  // Update Index\n  if ((rtl && -translate === swiper.translate) || (!rtl && translate === swiper.translate)) {\n    swiper.updateActiveIndex(slideIndex);\n    // Update Height\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n    swiper.updateSlidesClasses();\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n    return false;\n  }\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    let t = -translate;\n    if (rtl) {\n      t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;\n    }\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n    } else {\n      // eslint-disable-next-line\n      if (wrapperEl.scrollTo) {\n        wrapperEl.scrollTo({\n          [isH ? 'left' : 'top']: t,\n          behavior: 'smooth',\n        });\n      } else {\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n      }\n    }\n    return true;\n  }\n\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit('beforeTransitionStart', speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n    swiper.transitionEnd(runCallbacks, direction);\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit('beforeTransitionStart', speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onSlideToWrapperTransitionEnd) {\n        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n          swiper.onSlideToWrapperTransitionEnd = null;\n          delete swiper.onSlideToWrapperTransitionEnd;\n          swiper.transitionEnd(runCallbacks, direction);\n        };\n      }\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n    }\n  }\n\n  return true;\n}\n\nfunction slideToLoop (index = 0, speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  let newIndex = index;\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideNext (speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const { params, animating } = swiper;\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;\n  if (params.loop) {\n    if (animating) return false;\n    swiper.loopFix();\n    // eslint-disable-next-line\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slidePrev (speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    params, animating, snapGrid, slidesGrid, rtlTranslate,\n  } = swiper;\n\n  if (params.loop) {\n    if (animating) return false;\n    swiper.loopFix();\n    // eslint-disable-next-line\n    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n  }\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map((val) => normalize(val));\n  slidesGrid.map((val) => normalize(val));\n\n  snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    snapGrid.forEach((snap) => {\n      if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;\n    });\n  }\n  let prevIndex;\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n  }\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideReset (speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n\n/* eslint no-unused-vars: \"off\" */\nfunction slideToClosest (speed = this.params.speed, runCallbacks = true, internal, threshold = 0.5) {\n  const swiper = this;\n  let index = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n    if ((translate - currentSnap) > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n    if ((translate - prevSnap) <= (currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}\n\nfunction slideToClickedSlide () {\n  const swiper = this;\n  const { params, $wrapperEl } = swiper;\n\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n    if (params.centeredSlides) {\n      if (\n        (slideToIndex < swiper.loopedSlides - (slidesPerView / 2))\n        || (slideToIndex > (swiper.slides.length - swiper.loopedSlides) + (slidesPerView / 2))\n      ) {\n        swiper.loopFix();\n        slideToIndex = $wrapperEl\n          .children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`)\n          .eq(0)\n          .index();\n\n        Utils.nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = $wrapperEl\n        .children(`.${params.slideClass}[data-swiper-slide-index=\"${realIndex}\"]:not(.${params.slideDuplicateClass})`)\n        .eq(0)\n        .index();\n\n      Utils.nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}\n\nvar slide = {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide,\n};\n\nfunction loopCreate () {\n  const swiper = this;\n  const { params, $wrapperEl } = swiper;\n  // Remove duplicated slides\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass}`).remove();\n\n  let slides = $wrapperEl.children(`.${params.slideClass}`);\n\n  if (params.loopFillGroupWithBlank) {\n    const blankSlidesNum = params.slidesPerGroup - (slides.length % params.slidesPerGroup);\n    if (blankSlidesNum !== params.slidesPerGroup) {\n      for (let i = 0; i < blankSlidesNum; i += 1) {\n        const blankNode = $(doc.createElement('div')).addClass(`${params.slideClass} ${params.slideBlankClass}`);\n        $wrapperEl.append(blankNode);\n      }\n      slides = $wrapperEl.children(`.${params.slideClass}`);\n    }\n  }\n\n  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;\n\n  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n  swiper.loopedSlides += params.loopAdditionalSlides;\n  if (swiper.loopedSlides > slides.length) {\n    swiper.loopedSlides = slides.length;\n  }\n\n  const prependSlides = [];\n  const appendSlides = [];\n  slides.each((index, el) => {\n    const slide = $(el);\n    if (index < swiper.loopedSlides) appendSlides.push(el);\n    if (index < slides.length && index >= slides.length - swiper.loopedSlides) prependSlides.push(el);\n    slide.attr('data-swiper-slide-index', index);\n  });\n  for (let i = 0; i < appendSlides.length; i += 1) {\n    $wrapperEl.append($(appendSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n  for (let i = prependSlides.length - 1; i >= 0; i -= 1) {\n    $wrapperEl.prepend($(prependSlides[i].cloneNode(true)).addClass(params.slideDuplicateClass));\n  }\n}\n\nfunction loopFix () {\n  const swiper = this;\n\n  swiper.emit('beforeLoopFix');\n\n  const {\n    activeIndex, slides, loopedSlides, allowSlidePrev, allowSlideNext, snapGrid, rtlTranslate: rtl,\n  } = swiper;\n  let newIndex;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n\n  const snapTranslate = -snapGrid[activeIndex];\n  const diff = snapTranslate - swiper.getTranslate();\n\n  // Fix For Negative Oversliding\n  if (activeIndex < loopedSlides) {\n    newIndex = (slides.length - (loopedSlides * 3)) + activeIndex;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  } else if (activeIndex >= slides.length - loopedSlides) {\n    // Fix For Positive Oversliding\n    newIndex = -slides.length + activeIndex + loopedSlides;\n    newIndex += loopedSlides;\n    const slideChanged = swiper.slideTo(newIndex, 0, false, true);\n    if (slideChanged && diff !== 0) {\n      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n\n  swiper.emit('loopFix');\n}\n\nfunction loopDestroy () {\n  const swiper = this;\n  const { $wrapperEl, params, slides } = swiper;\n  $wrapperEl.children(`.${params.slideClass}.${params.slideDuplicateClass},.${params.slideClass}.${params.slideBlankClass}`).remove();\n  slides.removeAttr('data-swiper-slide-index');\n}\n\nvar loop = {\n  loopCreate,\n  loopFix,\n  loopDestroy,\n};\n\nfunction setGrabCursor (moving) {\n  const swiper = this;\n  if (Support.touch || !swiper.params.simulateTouch || (swiper.params.watchOverflow && swiper.isLocked) || swiper.params.cssMode) return;\n  const el = swiper.el;\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';\n  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n}\n\nfunction unsetGrabCursor () {\n  const swiper = this;\n  if (Support.touch || (swiper.params.watchOverflow && swiper.isLocked) || swiper.params.cssMode) return;\n  swiper.el.style.cursor = '';\n}\n\nvar grabCursor = {\n  setGrabCursor,\n  unsetGrabCursor,\n};\n\nfunction appendSlide (slides) {\n  const swiper = this;\n  const { $wrapperEl, params } = swiper;\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.append(slides[i]);\n    }\n  } else {\n    $wrapperEl.append(slides);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!(params.observer && Support.observer)) {\n    swiper.update();\n  }\n}\n\nfunction prependSlide (slides) {\n  const swiper = this;\n  const { params, $wrapperEl, activeIndex } = swiper;\n\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  let newActiveIndex = activeIndex + 1;\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.prepend(slides[i]);\n    }\n    newActiveIndex = activeIndex + slides.length;\n  } else {\n    $wrapperEl.prepend(slides);\n  }\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!(params.observer && Support.observer)) {\n    swiper.update();\n  }\n  swiper.slideTo(newActiveIndex, 0, false);\n}\n\nfunction addSlide (index, slides) {\n  const swiper = this;\n  const { $wrapperEl, params, activeIndex } = swiper;\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n  const baseLength = swiper.slides.length;\n  if (index <= 0) {\n    swiper.prependSlide(slides);\n    return;\n  }\n  if (index >= baseLength) {\n    swiper.appendSlide(slides);\n    return;\n  }\n  let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n\n  const slidesBuffer = [];\n  for (let i = baseLength - 1; i >= index; i -= 1) {\n    const currentSlide = swiper.slides.eq(i);\n    currentSlide.remove();\n    slidesBuffer.unshift(currentSlide);\n  }\n\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) $wrapperEl.append(slides[i]);\n    }\n    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n  } else {\n    $wrapperEl.append(slides);\n  }\n\n  for (let i = 0; i < slidesBuffer.length; i += 1) {\n    $wrapperEl.append(slidesBuffer[i]);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!(params.observer && Support.observer)) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\nfunction removeSlide (slidesIndexes) {\n  const swiper = this;\n  const { params, $wrapperEl, activeIndex } = swiper;\n\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.slides = $wrapperEl.children(`.${params.slideClass}`);\n  }\n  let newActiveIndex = activeIndexBuffer;\n  let indexToRemove;\n\n  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\n    for (let i = 0; i < slidesIndexes.length; i += 1) {\n      indexToRemove = slidesIndexes[i];\n      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    }\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  } else {\n    indexToRemove = slidesIndexes;\n    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();\n    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  }\n\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n\n  if (!(params.observer && Support.observer)) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}\n\nfunction removeAllSlides () {\n  const swiper = this;\n\n  const slidesIndexes = [];\n  for (let i = 0; i < swiper.slides.length; i += 1) {\n    slidesIndexes.push(i);\n  }\n  swiper.removeSlide(slidesIndexes);\n}\n\nvar manipulation = {\n  appendSlide,\n  prependSlide,\n  addSlide,\n  removeSlide,\n  removeAllSlides,\n};\n\nconst Device = (function Device() {\n  const platform = win.navigator.platform;\n  const ua = win.navigator.userAgent;\n\n  const device = {\n    ios: false,\n    android: false,\n    androidChrome: false,\n    desktop: false,\n    iphone: false,\n    ipod: false,\n    ipad: false,\n    edge: false,\n    ie: false,\n    firefox: false,\n    macos: false,\n    windows: false,\n    cordova: !!(win.cordova || win.phonegap),\n    phonegap: !!(win.cordova || win.phonegap),\n    electron: false,\n  };\n\n  const screenWidth = win.screen.width;\n  const screenHeight = win.screen.height;\n\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const ie = ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n  const edge = ua.indexOf('Edge/') >= 0;\n  const firefox = ua.indexOf('Gecko/') >= 0 && ua.indexOf('Firefox/') >= 0;\n  const windows = platform === 'Win32';\n  const electron = ua.toLowerCase().indexOf('electron') >= 0;\n  let macos = platform === 'MacIntel';\n\n  // iPadOs 13 fix\n  if (!ipad\n    && macos\n    && Support.touch\n    && (\n      (screenWidth === 1024 && screenHeight === 1366) // Pro 12.9\n      || (screenWidth === 834 && screenHeight === 1194) // Pro 11\n      || (screenWidth === 834 && screenHeight === 1112) // Pro 10.5\n      || (screenWidth === 768 && screenHeight === 1024) // other\n    )\n  ) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    macos = false;\n  }\n\n  device.ie = ie;\n  device.edge = edge;\n  device.firefox = firefox;\n\n  // Android\n  if (android && !windows) {\n    device.os = 'android';\n    device.osVersion = android[2];\n    device.android = true;\n    device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;\n  }\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  }\n  // iOS\n  if (iphone && !ipod) {\n    device.osVersion = iphone[2].replace(/_/g, '.');\n    device.iphone = true;\n  }\n  if (ipad) {\n    device.osVersion = ipad[2].replace(/_/g, '.');\n    device.ipad = true;\n  }\n  if (ipod) {\n    device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n    device.ipod = true;\n  }\n  // iOS 8+ changed UA\n  if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {\n    if (device.osVersion.split('.')[0] === '10') {\n      device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];\n    }\n  }\n\n  // Webview\n  device.webView = !!((iphone || ipad || ipod) && (ua.match(/.*AppleWebKit(?!.*Safari)/i) || win.navigator.standalone))\n    || (win.matchMedia && win.matchMedia('(display-mode: standalone)').matches);\n  device.webview = device.webView;\n  device.standalone = device.webView;\n\n  // Desktop\n  device.desktop = !(device.ios || device.android) || electron;\n  if (device.desktop) {\n    device.electron = electron;\n    device.macos = macos;\n    device.windows = windows;\n    if (device.macos) {\n      device.os = 'macos';\n    }\n    if (device.windows) {\n      device.os = 'windows';\n    }\n  }\n\n  // Pixel Ratio\n  device.pixelRatio = win.devicePixelRatio || 1;\n\n  // Export object\n  return device;\n}());\n\nfunction onTouchStart (event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const { params, touches } = swiper;\n\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  const $targetEl = $(e.target);\n\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!$targetEl.closest(swiper.wrapperEl).length) return;\n  }\n  data.isTouchEvent = e.type === 'touchstart';\n  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;\n  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return;\n  if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`)[0]) {\n    swiper.allowClick = true;\n    return;\n  }\n  if (params.swipeHandler) {\n    if (!$targetEl.closest(params.swipeHandler)[0]) return;\n  }\n\n  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY;\n\n  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore\n\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n  if (\n    edgeSwipeDetection\n    && ((startX <= edgeSwipeThreshold)\n    || (startX >= win.screen.width - edgeSwipeThreshold))\n  ) {\n    return;\n  }\n\n  Utils.extend(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined,\n  });\n\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = Utils.now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n  if (e.type !== 'touchstart') {\n    let preventDefault = true;\n    if ($targetEl.is(data.formElements)) preventDefault = false;\n    if (\n      doc.activeElement\n      && $(doc.activeElement).is(data.formElements)\n      && doc.activeElement !== $targetEl[0]\n    ) {\n      doc.activeElement.blur();\n    }\n\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n    if (params.touchStartForcePreventDefault || shouldPreventDefault) {\n      e.preventDefault();\n    }\n  }\n  swiper.emit('touchStart', e);\n}\n\nfunction onTouchMove (event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const { params, touches, rtlTranslate: rtl } = swiper;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n    return;\n  }\n  if (data.isTouchEvent && e.type !== 'touchmove') return;\n  const targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n  const pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n  const pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n  if (!swiper.allowTouchMove) {\n    // isMoved = true;\n    swiper.allowClick = false;\n    if (data.isTouched) {\n      Utils.extend(touches, {\n        startX: pageX,\n        startY: pageY,\n        currentX: pageX,\n        currentY: pageY,\n      });\n      data.touchStartTime = Utils.now();\n    }\n    return;\n  }\n  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (\n        (pageY < touches.startY && swiper.translate <= swiper.maxTranslate())\n        || (pageY > touches.startY && swiper.translate >= swiper.minTranslate())\n      ) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (\n      (pageX < touches.startX && swiper.translate <= swiper.maxTranslate())\n      || (pageX > touches.startX && swiper.translate >= swiper.minTranslate())\n    ) {\n      return;\n    }\n  }\n  if (data.isTouchEvent && doc.activeElement) {\n    if (e.target === doc.activeElement && $(e.target).is(data.formElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n  if (e.targetTouches && e.targetTouches.length > 1) return;\n\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt((diffX ** 2) + (diffY ** 2)) < swiper.params.threshold) return;\n\n  if (typeof data.isScrolling === 'undefined') {\n    let touchAngle;\n    if ((swiper.isHorizontal() && touches.currentY === touches.startY) || (swiper.isVertical() && touches.currentX === touches.startX)) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if ((diffX * diffX) + (diffY * diffY) >= 25) {\n        touchAngle = (Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180) / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : (90 - touchAngle > params.touchAngle);\n      }\n    }\n  }\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n  if (data.isScrolling) {\n    data.isTouched = false;\n    return;\n  }\n  if (!data.startMoving) {\n    return;\n  }\n  swiper.allowClick = false;\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n\n  if (!data.isMoved) {\n    if (params.loop) {\n      swiper.loopFix();\n    }\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n    if (swiper.animating) {\n      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n    }\n    data.allowMomentumBounce = false;\n    // Grab Cursor\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n    swiper.emit('sliderFirstMove', e);\n  }\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  touches.diff = diff;\n\n  diff *= params.touchRatio;\n  if (rtl) diff = -diff;\n\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  data.currentTranslate = diff + data.startTranslate;\n\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n  if ((diff > 0 && data.currentTranslate > swiper.minTranslate())) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = (swiper.minTranslate() - 1) + ((-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio);\n  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n    disableParentSwiper = false;\n    if (params.resistance) data.currentTranslate = (swiper.maxTranslate() + 1) - ((swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio);\n  }\n\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  }\n\n  // Directions locks\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n\n  // Threshold\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n\n  if (!params.followFinger || params.cssMode) return;\n\n  // Update active index in free mode\n  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  if (params.freeMode) {\n    // Velocity\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime,\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: Utils.now(),\n    });\n  }\n  // Update progress\n  swiper.updateProgress(data.currentTranslate);\n  // Update translate\n  swiper.setTranslate(data.currentTranslate);\n}\n\nfunction onTouchEnd (event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n\n  const {\n    params, touches, rtlTranslate: rtl, $wrapperEl, slidesGrid, snapGrid,\n  } = swiper;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n  data.allowTouchCallbacks = false;\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  // Return Grab Cursor\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  }\n\n  // Time diff\n  const touchEndTime = Utils.now();\n  const timeDiff = touchEndTime - data.touchStartTime;\n\n  // Tap, doubleTap, Click\n  if (swiper.allowClick) {\n    swiper.updateClickedSlide(e);\n    swiper.emit('tap click', e);\n    if (timeDiff < 300 && (touchEndTime - data.lastClickTime) < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n\n  data.lastClickTime = Utils.now();\n  Utils.nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n\n  let currentPos;\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n\n  if (params.cssMode) {\n    return;\n  }\n\n  if (params.freeMode) {\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n\n    if (params.freeModeMomentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {\n          swiper.velocity = 0;\n        }\n        // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n        if (time > 150 || (Utils.now() - lastMoveEvent.time) > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeModeMomentumVelocityRatio;\n\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeModeMomentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeModeMomentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeModeMomentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeModeSticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        swiper.once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      }\n      // Fix duration\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeModeSticky) {\n          // If freeModeSticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeModeSticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeModeMomentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          swiper.emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeModeSticky) {\n      swiper.slideToClosest();\n      return;\n    }\n\n    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n    return;\n  }\n\n  // Find current slide\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n  for (let i = 0; i < slidesGrid.length; i += (i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup)) {\n    const increment = (i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup);\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n\n  // Find current slide size\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = (stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup);\n\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);\n      else swiper.slideTo(stopIndex);\n    }\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > (1 - params.longSwipesRatio)) swiper.slideTo(stopIndex + increment);\n      else swiper.slideTo(stopIndex);\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(stopIndex + increment);\n      }\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}\n\nfunction onResize () {\n  const swiper = this;\n\n  const { params, el } = swiper;\n\n  if (el && el.offsetWidth === 0) return;\n\n  // Breakpoints\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  }\n\n  // Save locks\n  const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;\n\n  // Disable locks on resize\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n\n  swiper.updateSize();\n  swiper.updateSlides();\n\n  swiper.updateSlidesClasses();\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    swiper.slideTo(swiper.activeIndex, 0, false, true);\n  }\n\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    swiper.autoplay.run();\n  }\n  // Return locks after resize\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}\n\nfunction onClick (e) {\n  const swiper = this;\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}\n\nfunction onScroll () {\n  const swiper = this;\n  const { wrapperEl, rtlTranslate } = swiper;\n  swiper.previousTranslate = swiper.translate;\n  if (swiper.isHorizontal()) {\n    if (rtlTranslate) {\n      swiper.translate = ((wrapperEl.scrollWidth - wrapperEl.offsetWidth) - wrapperEl.scrollLeft);\n    } else {\n      swiper.translate = -wrapperEl.scrollLeft;\n    }\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  }\n  // eslint-disable-next-line\n  if (swiper.translate === -0) swiper.translate = 0;\n\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / (translatesDiff);\n  }\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n\n  swiper.emit('setTranslate', swiper.translate, false);\n}\n\nlet dummyEventAttached = false;\nfunction dummyEventListener() {}\n\nfunction attachEvents() {\n  const swiper = this;\n  const {\n    params, touchEvents, el, wrapperEl,\n  } = swiper;\n\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n\n  swiper.onClick = onClick.bind(swiper);\n\n  const capture = !!params.nested;\n\n  // Touch Events\n  if (!Support.touch && Support.pointerEvents) {\n    el.addEventListener(touchEvents.start, swiper.onTouchStart, false);\n    doc.addEventListener(touchEvents.move, swiper.onTouchMove, capture);\n    doc.addEventListener(touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    if (Support.touch) {\n      const passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;\n      el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);\n      el.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? { passive: false, capture } : capture);\n      el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);\n      if (touchEvents.cancel) {\n        el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n      }\n      if (!dummyEventAttached) {\n        doc.addEventListener('touchstart', dummyEventListener);\n        dummyEventAttached = true;\n      }\n    }\n    if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {\n      el.addEventListener('mousedown', swiper.onTouchStart, false);\n      doc.addEventListener('mousemove', swiper.onTouchMove, capture);\n      doc.addEventListener('mouseup', swiper.onTouchEnd, false);\n    }\n  }\n  // Prevent Links Clicks\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el.addEventListener('click', swiper.onClick, true);\n  }\n  if (params.cssMode) {\n    wrapperEl.addEventListener('scroll', swiper.onScroll);\n  }\n\n  // Resize handler\n  if (params.updateOnWindowResize) {\n    swiper.on((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize, true);\n  } else {\n    swiper.on('observerUpdate', onResize, true);\n  }\n}\n\nfunction detachEvents() {\n  const swiper = this;\n\n  const {\n    params, touchEvents, el, wrapperEl,\n  } = swiper;\n\n  const capture = !!params.nested;\n\n  // Touch Events\n  if (!Support.touch && Support.pointerEvents) {\n    el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);\n    doc.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);\n    doc.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);\n  } else {\n    if (Support.touch) {\n      const passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;\n      el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);\n      el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);\n      el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);\n      if (touchEvents.cancel) {\n        el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n      }\n    }\n    if ((params.simulateTouch && !Device.ios && !Device.android) || (params.simulateTouch && !Support.touch && Device.ios)) {\n      el.removeEventListener('mousedown', swiper.onTouchStart, false);\n      doc.removeEventListener('mousemove', swiper.onTouchMove, capture);\n      doc.removeEventListener('mouseup', swiper.onTouchEnd, false);\n    }\n  }\n  // Prevent Links Clicks\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el.removeEventListener('click', swiper.onClick, true);\n  }\n\n  if (params.cssMode) {\n    wrapperEl.removeEventListener('scroll', swiper.onScroll);\n  }\n\n  // Resize handler\n  swiper.off((Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate'), onResize);\n}\n\nvar events = {\n  attachEvents,\n  detachEvents,\n};\n\nfunction setBreakpoint () {\n  const swiper = this;\n  const {\n    activeIndex, initialized, loopedSlides = 0, params, $el,\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || (breakpoints && Object.keys(breakpoints).length === 0)) return;\n\n  // Get breakpoint for window width and update parameters\n  const breakpoint = swiper.getBreakpoint(breakpoints);\n\n  if (breakpoint && swiper.currentBreakpoint !== breakpoint) {\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n    if (breakpointOnlyParams) {\n      ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach((param) => {\n        const paramValue = breakpointOnlyParams[param];\n        if (typeof paramValue === 'undefined') return;\n        if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {\n          breakpointOnlyParams[param] = 'auto';\n        } else if (param === 'slidesPerView') {\n          breakpointOnlyParams[param] = parseFloat(paramValue);\n        } else {\n          breakpointOnlyParams[param] = parseInt(paramValue, 10);\n        }\n      });\n    }\n\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    const wasMultiRow = params.slidesPerColumn > 1;\n    const isMultiRow = breakpointParams.slidesPerColumn > 1;\n    if (wasMultiRow && !isMultiRow) {\n      $el.removeClass(`${params.containerModifierClass}multirow ${params.containerModifierClass}multirow-column`);\n    } else if (!wasMultiRow && isMultiRow) {\n      $el.addClass(`${params.containerModifierClass}multirow`);\n      if (breakpointParams.slidesPerColumnFill === 'column') {\n        $el.addClass(`${params.containerModifierClass}multirow-column`);\n      }\n    }\n\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n    if (directionChanged && initialized) {\n      swiper.changeDirection();\n    }\n\n    Utils.extend(swiper.params, breakpointParams);\n\n    Utils.extend(swiper, {\n      allowTouchMove: swiper.params.allowTouchMove,\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n    });\n\n    swiper.currentBreakpoint = breakpoint;\n\n    if (needsReLoop && initialized) {\n      swiper.loopDestroy();\n      swiper.loopCreate();\n      swiper.updateSlides();\n      swiper.slideTo((activeIndex - loopedSlides) + swiper.loopedSlides, 0, false);\n    }\n\n    swiper.emit('breakpoint', breakpointParams);\n  }\n}\n\nfunction getBreakpoint (breakpoints) {\n  // Get breakpoint for window width\n  if (!breakpoints) return undefined;\n  let breakpoint = false;\n\n  const points = Object.keys(breakpoints).map((point) => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = win.innerHeight * minRatio;\n      return { value, point };\n    }\n    return { value: point, point };\n  });\n\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n  for (let i = 0; i < points.length; i += 1) {\n    const { point, value } = points[i];\n    if (value <= win.innerWidth) {\n      breakpoint = point;\n    }\n  }\n  return breakpoint || 'max';\n}\n\nvar breakpoints = { setBreakpoint, getBreakpoint };\n\nfunction addClasses () {\n  const swiper = this;\n  const {\n    classNames, params, rtl, $el,\n  } = swiper;\n  const suffixes = [];\n\n  suffixes.push('initialized');\n  suffixes.push(params.direction);\n\n  if (params.freeMode) {\n    suffixes.push('free-mode');\n  }\n  if (params.autoHeight) {\n    suffixes.push('autoheight');\n  }\n  if (rtl) {\n    suffixes.push('rtl');\n  }\n  if (params.slidesPerColumn > 1) {\n    suffixes.push('multirow');\n    if (params.slidesPerColumnFill === 'column') {\n      suffixes.push('multirow-column');\n    }\n  }\n  if (Device.android) {\n    suffixes.push('android');\n  }\n  if (Device.ios) {\n    suffixes.push('ios');\n  }\n\n  if (params.cssMode) {\n    suffixes.push('css-mode');\n  }\n\n  suffixes.forEach((suffix) => {\n    classNames.push(params.containerModifierClass + suffix);\n  });\n\n  $el.addClass(classNames.join(' '));\n}\n\nfunction removeClasses () {\n  const swiper = this;\n  const { $el, classNames } = swiper;\n\n  $el.removeClass(classNames.join(' '));\n}\n\nvar classes = { addClasses, removeClasses };\n\nfunction loadImage (imageEl, src, srcset, sizes, checkForComplete, callback) {\n  let image;\n  function onReady() {\n    if (callback) callback();\n  }\n  const isPicture = $(imageEl).parent('picture')[0];\n\n  if (!isPicture && (!imageEl.complete || !checkForComplete)) {\n    if (src) {\n      image = new win.Image();\n      image.onload = onReady;\n      image.onerror = onReady;\n      if (sizes) {\n        image.sizes = sizes;\n      }\n      if (srcset) {\n        image.srcset = srcset;\n      }\n      if (src) {\n        image.src = src;\n      }\n    } else {\n      onReady();\n    }\n  } else {\n    // image already loaded...\n    onReady();\n  }\n}\n\nfunction preloadImages () {\n  const swiper = this;\n  swiper.imagesToLoad = swiper.$el.find('img');\n  function onReady() {\n    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;\n    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;\n    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n      if (swiper.params.updateOnImagesReady) swiper.update();\n      swiper.emit('imagesReady');\n    }\n  }\n  for (let i = 0; i < swiper.imagesToLoad.length; i += 1) {\n    const imageEl = swiper.imagesToLoad[i];\n    swiper.loadImage(\n      imageEl,\n      imageEl.currentSrc || imageEl.getAttribute('src'),\n      imageEl.srcset || imageEl.getAttribute('srcset'),\n      imageEl.sizes || imageEl.getAttribute('sizes'),\n      true,\n      onReady\n    );\n  }\n}\n\nvar images = {\n  loadImage,\n  preloadImages,\n};\n\nfunction checkOverflow() {\n  const swiper = this;\n  const params = swiper.params;\n  const wasLocked = swiper.isLocked;\n  const lastSlidePosition = swiper.slides.length > 0 && (params.slidesOffsetBefore + (params.spaceBetween * (swiper.slides.length - 1)) + ((swiper.slides[0]).offsetWidth) * swiper.slides.length);\n\n  if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {\n    swiper.isLocked = lastSlidePosition <= swiper.size;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n\n  swiper.allowSlideNext = !swiper.isLocked;\n  swiper.allowSlidePrev = !swiper.isLocked;\n\n  // events\n  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n    swiper.navigation.update();\n  }\n}\n\nvar checkOverflow$1 = { checkOverflow };\n\nvar defaults = {\n  init: true,\n  direction: 'horizontal',\n  touchEventsTarget: 'container',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  //\n  preventInteractionOnTransition: false,\n\n  // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n\n  // Free mode\n  freeMode: false,\n  freeModeMomentum: true,\n  freeModeMomentumRatio: 1,\n  freeModeMomentumBounce: true,\n  freeModeMomentumBounceRatio: 1,\n  freeModeMomentumVelocityRatio: 1,\n  freeModeSticky: false,\n  freeModeMinimumVelocity: 0.02,\n\n  // Autoheight\n  autoHeight: false,\n\n  // Set wrapper width\n  setWrapperSize: false,\n\n  // Virtual Translate\n  virtualTranslate: false,\n\n  // Effects\n  effect: 'slide', // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n\n  // Breakpoints\n  breakpoints: undefined,\n\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerColumn: 1,\n  slidesPerColumnFill: 'column',\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0, // in px\n  slidesOffsetAfter: 0, // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: false,\n\n  // Round length\n  roundLengths: false,\n\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 0,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n\n  // Progress\n  watchSlidesProgress: false,\n  watchSlidesVisibility: false,\n\n  // Cursor\n  grabCursor: false,\n\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n\n  // Images\n  preloadImages: true,\n  updateOnImagesReady: true,\n\n  // loop\n  loop: false,\n  loopAdditionalSlides: 0,\n  loopedSlides: null,\n  loopFillGroupWithBlank: false,\n\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null, // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n\n  // Passive Listeners\n  passiveListeners: true,\n\n  // NS\n  containerModifierClass: 'swiper-container-', // NEW\n  slideClass: 'swiper-slide',\n  slideBlankClass: 'swiper-slide-invisible-blank',\n  slideActiveClass: 'swiper-slide-active',\n  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideDuplicateClass: 'swiper-slide-duplicate',\n  slideNextClass: 'swiper-slide-next',\n  slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n  slidePrevClass: 'swiper-slide-prev',\n  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n  wrapperClass: 'swiper-wrapper',\n\n  // Callbacks\n  runCallbacksOnInit: true,\n};\n\n/* eslint no-param-reassign: \"off\" */\n\nconst prototypes = {\n  update,\n  translate,\n  transition: transition$1,\n  slide,\n  loop,\n  grabCursor,\n  manipulation,\n  events,\n  breakpoints,\n  checkOverflow: checkOverflow$1,\n  classes,\n  images,\n};\n\nconst extendedDefaults = {};\n\nclass Swiper extends SwiperClass {\n  constructor(...args) {\n    let el;\n    let params;\n    if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n    if (!params) params = {};\n\n    params = Utils.extend({}, params);\n    if (el && !params.el) params.el = el;\n\n    super(params);\n\n    Object.keys(prototypes).forEach((prototypeGroup) => {\n      Object.keys(prototypes[prototypeGroup]).forEach((protoMethod) => {\n        if (!Swiper.prototype[protoMethod]) {\n          Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n        }\n      });\n    });\n\n    // Swiper Instance\n    const swiper = this;\n    if (typeof swiper.modules === 'undefined') {\n      swiper.modules = {};\n    }\n    Object.keys(swiper.modules).forEach((moduleName) => {\n      const module = swiper.modules[moduleName];\n      if (module.params) {\n        const moduleParamName = Object.keys(module.params)[0];\n        const moduleParams = module.params[moduleParamName];\n        if (typeof moduleParams !== 'object' || moduleParams === null) return;\n        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;\n        if (params[moduleParamName] === true) {\n          params[moduleParamName] = { enabled: true };\n        }\n        if (\n          typeof params[moduleParamName] === 'object'\n          && !('enabled' in params[moduleParamName])\n        ) {\n          params[moduleParamName].enabled = true;\n        }\n        if (!params[moduleParamName]) params[moduleParamName] = { enabled: false };\n      }\n    });\n\n    // Extend defaults with modules params\n    const swiperParams = Utils.extend({}, defaults);\n    swiper.useModulesParams(swiperParams);\n\n    // Extend defaults with passed params\n    swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = Utils.extend({}, swiper.params);\n    swiper.passedParams = Utils.extend({}, params);\n\n    // Save Dom lib\n    swiper.$ = $;\n\n    // Find el\n    const $el = $(swiper.params.el);\n    el = $el[0];\n\n    if (!el) {\n      return undefined;\n    }\n\n    if ($el.length > 1) {\n      const swipers = [];\n      $el.each((index, containerEl) => {\n        const newParams = Utils.extend({}, params, { el: containerEl });\n        swipers.push(new Swiper(newParams));\n      });\n      return swipers;\n    }\n\n    el.swiper = swiper;\n    $el.data('swiper', swiper);\n\n    // Find Wrapper\n    let $wrapperEl;\n    if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n      $wrapperEl = $(el.shadowRoot.querySelector(`.${swiper.params.wrapperClass}`));\n      // Children needs to return slot items\n      $wrapperEl.children = (options) => $el.children(options);\n    } else {\n      $wrapperEl = $el.children(`.${swiper.params.wrapperClass}`);\n    }\n    // Extend Swiper\n    Utils.extend(swiper, {\n      $el,\n      el,\n      $wrapperEl,\n      wrapperEl: $wrapperEl[0],\n\n      // Classes\n      classNames: [],\n\n      // Slides\n      slides: $(),\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n      isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n      // RTL\n      rtl: (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n      wrongRTL: $wrapperEl.css('display') === '-webkit-box',\n\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n\n      //\n      isBeginning: true,\n      isEnd: false,\n\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n\n      // Touch Events\n      touchEvents: (function touchEvents() {\n        const touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n        let desktop = ['mousedown', 'mousemove', 'mouseup'];\n        if (Support.pointerEvents) {\n          desktop = ['pointerdown', 'pointermove', 'pointerup'];\n        }\n        swiper.touchEventsTouch = {\n          start: touch[0],\n          move: touch[1],\n          end: touch[2],\n          cancel: touch[3],\n        };\n        swiper.touchEventsDesktop = {\n          start: desktop[0],\n          move: desktop[1],\n          end: desktop[2],\n        };\n        return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n      }()),\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        formElements: 'input, select, option, textarea, button, video, label',\n        // Last click time\n        lastClickTime: Utils.now(),\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        isTouchEvent: undefined,\n        startMoving: undefined,\n      },\n\n      // Clicks\n      allowClick: true,\n\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0,\n      },\n\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0,\n\n    });\n\n    // Install Modules\n    swiper.useModules();\n\n    // Init\n    if (swiper.params.init) {\n      swiper.init();\n    }\n\n    // Return app instance\n    return swiper;\n  }\n\n  slidesPerViewDynamic() {\n    const swiper = this;\n    const {\n      params, slides, slidesGrid, size: swiperSize, activeIndex,\n    } = swiper;\n    let spv = 1;\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slidesGrid[i] - slidesGrid[activeIndex] < swiperSize) {\n          spv += 1;\n        }\n      }\n    }\n    return spv;\n  }\n\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    const { snapGrid, params } = swiper;\n    // Breakpoints\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n\n    function setTranslate() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n    let translated;\n    if (swiper.params.freeMode) {\n      setTranslate();\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n      if (!translated) {\n        setTranslate();\n      }\n    }\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n    swiper.emit('update');\n  }\n\n  changeDirection(newDirection, needUpdate = true) {\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n    if ((newDirection === currentDirection) || (newDirection !== 'horizontal' && newDirection !== 'vertical')) {\n      return swiper;\n    }\n\n    swiper.$el\n      .removeClass(`${swiper.params.containerModifierClass}${currentDirection}`)\n      .addClass(`${swiper.params.containerModifierClass}${newDirection}`);\n\n    swiper.params.direction = newDirection;\n\n    swiper.slides.each((slideIndex, slideEl) => {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n\n    return swiper;\n  }\n\n  init() {\n    const swiper = this;\n    if (swiper.initialized) return;\n\n    swiper.emit('beforeInit');\n\n    // Set breakpoint\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    // Add Classes\n    swiper.addClasses();\n\n    // Create loop\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    }\n\n    // Update size\n    swiper.updateSize();\n\n    // Update slides\n    swiper.updateSlides();\n\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    }\n\n    // Set Grab Cursor\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n\n    if (swiper.params.preloadImages) {\n      swiper.preloadImages();\n    }\n\n    // Slide To Initial Slide\n    if (swiper.params.loop) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);\n    }\n\n    // Attach events\n    swiper.attachEvents();\n\n    // Init Flag\n    swiper.initialized = true;\n\n    // Emit\n    swiper.emit('init');\n  }\n\n  destroy(deleteInstance = true, cleanStyles = true) {\n    const swiper = this;\n    const {\n      params, $el, $wrapperEl, slides,\n    } = swiper;\n\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n\n    swiper.emit('beforeDestroy');\n\n    // Init Flag\n    swiper.initialized = false;\n\n    // Detach events\n    swiper.detachEvents();\n\n    // Destroy loop\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n\n    // Cleanup styles\n    if (cleanStyles) {\n      swiper.removeClasses();\n      $el.removeAttr('style');\n      $wrapperEl.removeAttr('style');\n      if (slides && slides.length) {\n        slides\n          .removeClass([\n            params.slideVisibleClass,\n            params.slideActiveClass,\n            params.slideNextClass,\n            params.slidePrevClass,\n          ].join(' '))\n          .removeAttr('style')\n          .removeAttr('data-swiper-slide-index');\n      }\n    }\n\n    swiper.emit('destroy');\n\n    // Detach emitter events\n    Object.keys(swiper.eventsListeners).forEach((eventName) => {\n      swiper.off(eventName);\n    });\n\n    if (deleteInstance !== false) {\n      swiper.$el[0].swiper = null;\n      swiper.$el.data('swiper', null);\n      Utils.deleteProps(swiper);\n    }\n    swiper.destroyed = true;\n\n    return null;\n  }\n\n  static extendDefaults(newDefaults) {\n    Utils.extend(extendedDefaults, newDefaults);\n  }\n\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n\n  static get defaults() {\n    return defaults;\n  }\n\n  static get Class() {\n    return SwiperClass;\n  }\n\n  static get $() {\n    return $;\n  }\n}\n\nvar Device$1 = {\n  name: 'device',\n  proto: {\n    device: Device,\n  },\n  static: {\n    device: Device,\n  },\n};\n\nvar Support$1 = {\n  name: 'support',\n  proto: {\n    support: Support,\n  },\n  static: {\n    support: Support,\n  },\n};\n\nconst Browser = (function Browser() {\n  function isSafari() {\n    const ua = win.navigator.userAgent.toLowerCase();\n    return (ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0);\n  }\n  return {\n    isEdge: !!win.navigator.userAgent.match(/Edge/g),\n    isSafari: isSafari(),\n    isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(win.navigator.userAgent),\n  };\n}());\n\nvar Browser$1 = {\n  name: 'browser',\n  proto: {\n    browser: Browser,\n  },\n  static: {\n    browser: Browser,\n  },\n};\n\nvar Resize = {\n  name: 'resize',\n  create() {\n    const swiper = this;\n    Utils.extend(swiper, {\n      resize: {\n        resizeHandler() {\n          if (!swiper || swiper.destroyed || !swiper.initialized) return;\n          swiper.emit('beforeResize');\n          swiper.emit('resize');\n        },\n        orientationChangeHandler() {\n          if (!swiper || swiper.destroyed || !swiper.initialized) return;\n          swiper.emit('orientationchange');\n        },\n      },\n    });\n  },\n  on: {\n    init() {\n      const swiper = this;\n      // Emit resize\n      win.addEventListener('resize', swiper.resize.resizeHandler);\n\n      // Emit orientationchange\n      win.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);\n    },\n    destroy() {\n      const swiper = this;\n      win.removeEventListener('resize', swiper.resize.resizeHandler);\n      win.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);\n    },\n  },\n};\n\nconst Observer = {\n  func: win.MutationObserver || win.WebkitMutationObserver,\n  attach(target, options = {}) {\n    const swiper = this;\n\n    const ObserverFunc = Observer.func;\n    const observer = new ObserverFunc((mutations) => {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (mutations.length === 1) {\n        swiper.emit('observerUpdate', mutations[0]);\n        return;\n      }\n      const observerUpdate = function observerUpdate() {\n        swiper.emit('observerUpdate', mutations[0]);\n      };\n\n      if (win.requestAnimationFrame) {\n        win.requestAnimationFrame(observerUpdate);\n      } else {\n        win.setTimeout(observerUpdate, 0);\n      }\n    });\n\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData,\n    });\n\n    swiper.observer.observers.push(observer);\n  },\n  init() {\n    const swiper = this;\n    if (!Support.observer || !swiper.params.observer) return;\n    if (swiper.params.observeParents) {\n      const containerParents = swiper.$el.parents();\n      for (let i = 0; i < containerParents.length; i += 1) {\n        swiper.observer.attach(containerParents[i]);\n      }\n    }\n    // Observe container\n    swiper.observer.attach(swiper.$el[0], { childList: swiper.params.observeSlideChildren });\n\n    // Observe wrapper\n    swiper.observer.attach(swiper.$wrapperEl[0], { attributes: false });\n  },\n  destroy() {\n    const swiper = this;\n    swiper.observer.observers.forEach((observer) => {\n      observer.disconnect();\n    });\n    swiper.observer.observers = [];\n  },\n};\n\nvar Observer$1 = {\n  name: 'observer',\n  params: {\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false,\n  },\n  create() {\n    const swiper = this;\n    Utils.extend(swiper, {\n      observer: {\n        init: Observer.init.bind(swiper),\n        attach: Observer.attach.bind(swiper),\n        destroy: Observer.destroy.bind(swiper),\n        observers: [],\n      },\n    });\n  },\n  on: {\n    init() {\n      const swiper = this;\n      swiper.observer.init();\n    },\n    destroy() {\n      const swiper = this;\n      swiper.observer.destroy();\n    },\n  },\n};\n\nconst Keyboard = {\n  handle(event) {\n    const swiper = this;\n    const { rtlTranslate: rtl } = swiper;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n    const kc = e.keyCode || e.charCode;\n    // Directions locks\n    if (!swiper.allowSlideNext && ((swiper.isHorizontal() && kc === 39) || (swiper.isVertical() && kc === 40) || kc === 34)) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && ((swiper.isHorizontal() && kc === 37) || (swiper.isVertical() && kc === 38) || kc === 33)) {\n      return false;\n    }\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n      return undefined;\n    }\n    if (doc.activeElement && doc.activeElement.nodeName && (doc.activeElement.nodeName.toLowerCase() === 'input' || doc.activeElement.nodeName.toLowerCase() === 'textarea')) {\n      return undefined;\n    }\n    if (swiper.params.keyboard.onlyInViewport && (kc === 33 || kc === 34 || kc === 37 || kc === 39 || kc === 38 || kc === 40)) {\n      let inView = false;\n      // Check that swiper should be inside of visible area of window\n      if (swiper.$el.parents(`.${swiper.params.slideClass}`).length > 0 && swiper.$el.parents(`.${swiper.params.slideActiveClass}`).length === 0) {\n        return undefined;\n      }\n      const windowWidth = win.innerWidth;\n      const windowHeight = win.innerHeight;\n      const swiperOffset = swiper.$el.offset();\n      if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;\n      const swiperCoord = [\n        [swiperOffset.left, swiperOffset.top],\n        [swiperOffset.left + swiper.width, swiperOffset.top],\n        [swiperOffset.left, swiperOffset.top + swiper.height],\n        [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height],\n      ];\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n        if (\n          point[0] >= 0 && point[0] <= windowWidth\n          && point[1] >= 0 && point[1] <= windowHeight\n        ) {\n          inView = true;\n        }\n      }\n      if (!inView) return undefined;\n    }\n    if (swiper.isHorizontal()) {\n      if (kc === 33 || kc === 34 || kc === 37 || kc === 39) {\n        if (e.preventDefault) e.preventDefault();\n        else e.returnValue = false;\n      }\n      if (((kc === 34 || kc === 39) && !rtl) || ((kc === 33 || kc === 37) && rtl)) swiper.slideNext();\n      if (((kc === 33 || kc === 37) && !rtl) || ((kc === 34 || kc === 39) && rtl)) swiper.slidePrev();\n    } else {\n      if (kc === 33 || kc === 34 || kc === 38 || kc === 40) {\n        if (e.preventDefault) e.preventDefault();\n        else e.returnValue = false;\n      }\n      if (kc === 34 || kc === 40) swiper.slideNext();\n      if (kc === 33 || kc === 38) swiper.slidePrev();\n    }\n    swiper.emit('keyPress', kc);\n    return undefined;\n  },\n  enable() {\n    const swiper = this;\n    if (swiper.keyboard.enabled) return;\n    $(doc).on('keydown', swiper.keyboard.handle);\n    swiper.keyboard.enabled = true;\n  },\n  disable() {\n    const swiper = this;\n    if (!swiper.keyboard.enabled) return;\n    $(doc).off('keydown', swiper.keyboard.handle);\n    swiper.keyboard.enabled = false;\n  },\n};\n\nvar keyboard = {\n  name: 'keyboard',\n  params: {\n    keyboard: {\n      enabled: false,\n      onlyInViewport: true,\n    },\n  },\n  create() {\n    const swiper = this;\n    Utils.extend(swiper, {\n      keyboard: {\n        enabled: false,\n        enable: Keyboard.enable.bind(swiper),\n        disable: Keyboard.disable.bind(swiper),\n        handle: Keyboard.handle.bind(swiper),\n      },\n    });\n  },\n  on: {\n    init() {\n      const swiper = this;\n      if (swiper.params.keyboard.enabled) {\n        swiper.keyboard.enable();\n      }\n    },\n    destroy() {\n      const swiper = this;\n      if (swiper.keyboard.enabled) {\n        swiper.keyboard.disable();\n      }\n    },\n  },\n};\n\nfunction isEventSupported() {\n  const eventName = 'onwheel';\n  let isSupported = eventName in doc;\n\n  if (!isSupported) {\n    const element = doc.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  if (!isSupported\n    && doc.implementation\n    && doc.implementation.hasFeature\n    // always returns true in newer browsers as per the standard.\n    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n    && doc.implementation.hasFeature('', '') !== true\n  ) {\n    // This is the only way to test support for the `wheel` event in IE9+.\n    isSupported = doc.implementation.hasFeature('Events.wheel', '3.0');\n  }\n\n  return isSupported;\n}\nconst Mousewheel = {\n  lastScrollTime: Utils.now(),\n  lastEventBeforeSnap: undefined,\n  recentWheelEvents: [],\n  event() {\n    if (win.navigator.userAgent.indexOf('firefox') > -1) return 'DOMMouseScroll';\n    return isEventSupported() ? 'wheel' : 'mousewheel';\n  },\n  normalize(e) {\n    // Reasonable defaults\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n\n    let sX = 0;\n    let sY = 0; // spinX, spinY\n    let pX = 0;\n    let pY = 0; // pixelX, pixelY\n\n    // Legacy\n    if ('detail' in e) {\n      sY = e.detail;\n    }\n    if ('wheelDelta' in e) {\n      sY = -e.wheelDelta / 120;\n    }\n    if ('wheelDeltaY' in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n    if ('wheelDeltaX' in e) {\n      sX = -e.wheelDeltaX / 120;\n    }\n\n    // side scrolling on FF with DOMMouseScroll\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n\n    if ('deltaY' in e) {\n      pY = e.deltaY;\n    }\n    if ('deltaX' in e) {\n      pX = e.deltaX;\n    }\n\n    if (e.shiftKey && !pX) { // if user scrolls with shift he wants horizontal scroll\n      pX = pY;\n      pY = 0;\n    }\n\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) { // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else { // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    }\n\n    // Fall-back if spin cannot be determined\n    if (pX && !sX) {\n      sX = (pX < 1) ? -1 : 1;\n    }\n    if (pY && !sY) {\n      sY = (pY < 1) ? -1 : 1;\n    }\n\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY,\n    };\n  },\n  handleMouseEnter() {\n    const swiper = this;\n    swiper.mouseEntered = true;\n  },\n  handleMouseLeave() {\n    const swiper = this;\n    swiper.mouseEntered = false;\n  },\n  handle(event) {\n    let e = event;\n    const swiper = this;\n    const params = swiper.params.mousewheel;\n\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n\n    let target = swiper.$el;\n    if (swiper.params.mousewheel.eventsTarged !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarged);\n    }\n    if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) return true;\n\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n\n    const data = Mousewheel.normalize(e);\n\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = data.pixelX * rtlFactor;\n        else return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = data.pixelY;\n      else return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n\n    if (delta === 0) return true;\n\n    if (params.invert) delta = -delta;\n\n    if (!swiper.params.freeMode) {\n      // Register the new event in a variable which stores the relevant data\n      const newEvent = {\n        time: Utils.now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event,\n      };\n\n      // Keep the most recent events\n      const recentWheelEvents = swiper.mousewheel.recentWheelEvents;\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift(); // only store the last N events\n      }\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n      recentWheelEvents.push(newEvent);\n\n      // If there is at least one previous recorded event:\n      //   If direction has changed or\n      //   if the scroll is quicker than the previous one:\n      //     Animate the slider.\n      // Else (this is the first time the wheel is moved):\n      //     Animate the slider.\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          swiper.mousewheel.animateSlider(newEvent);\n        }\n      } else {\n        swiper.mousewheel.animateSlider(newEvent);\n      }\n\n      // If it's time to release the scroll:\n      //   Return now so you don't hit the preventDefault.\n      if (swiper.mousewheel.releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      // Freemode or scrollContainer:\n\n      // If we recently snapped after a momentum scroll, then ignore wheel events\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n      // or if it's a new scroll (larger delta or inverse sign as last event before\n      // an end-of-momentum snap).\n      const newEvent = { time: Utils.now(), delta: Math.abs(delta), direction: Math.sign(delta) };\n      const { lastEventBeforeSnap } = swiper.mousewheel;\n      const ignoreWheelEvents = lastEventBeforeSnap\n        && newEvent.time < lastEventBeforeSnap.time + 500\n        && newEvent.delta <= lastEventBeforeSnap.delta\n        && newEvent.direction === lastEventBeforeSnap.direction;\n      if (!ignoreWheelEvents) {\n        swiper.mousewheel.lastEventBeforeSnap = undefined;\n\n        if (swiper.params.loop) {\n          swiper.loopFix();\n        }\n        let position = swiper.getTranslate() + (delta * params.sensitivity);\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n\n        if ((!wasBeginning && swiper.isBeginning) || (!wasEnd && swiper.isEnd)) {\n          swiper.updateSlidesClasses();\n        }\n\n        if (swiper.params.freeModeSticky) {\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\n          // 1. do all N events have decreasing or same (absolute value) delta?\n          // 2. did all N events arrive in the last M (M=500?) msecs?\n          // 3. does the earliest event have an (absolute value) delta that's\n          //    at least P (P=1?) larger than the most recent event's delta?\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n          // If 1-4 are \"yes\" then we're near the end of a momuntum scroll deceleration.\n          // Snap immediately and ignore remaining wheel events in this scroll.\n          // See comment above for \"remaining wheel events in this scroll\" determination.\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n          clearTimeout(swiper.mousewheel.timeout);\n          swiper.mousewheel.timeout = undefined;\n          const recentWheelEvents = swiper.mousewheel.recentWheelEvents;\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15\n              && newEvent.time - firstEvent.time < 500\n              && firstEvent.delta - newEvent.delta >= 1\n              && newEvent.delta <= 6\n          ) {\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\n            // to wait for more events. Snap ASAP on the next tick.\n            // Also, because there's some remaining momentum we'll bias the snap in the\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\n            // if it's already scrolled more than 20% in the current direction, keep going.\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            swiper.mousewheel.lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            swiper.mousewheel.timeout = Utils.nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 0); // no delay; move on next tick\n          }\n          if (!swiper.mousewheel.timeout) {\n            // if we get here, then we haven't detected the end of a momentum scroll, so\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\n            // for 500ms.\n            swiper.mousewheel.timeout = Utils.nextTick(() => {\n              const snapToThreshold = 0.5;\n              swiper.mousewheel.lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 500);\n          }\n        }\n\n        // Emit event\n        if (!ignoreWheelEvents) swiper.emit('scroll', e);\n\n        // Stop autoplay\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();\n        // Return page scroll on edge positions\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n      }\n    }\n\n    if (e.preventDefault) e.preventDefault();\n    else e.returnValue = false;\n    return false;\n  },\n  animateSlider(newEvent) {\n    const swiper = this;\n    // If the movement is NOT big enough and\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n    //   Don't go any further (avoid insignificant scroll movement).\n    if (newEvent.delta >= 6 && Utils.now() - swiper.mousewheel.lastScrollTime < 60) {\n      // Return false as a default\n      return true;\n    }\n    // If user is scrolling towards the end:\n    //   If the slider hasn't hit the latest slide or\n    //   if the slider is a loop and\n    //   if the slider isn't moving right now:\n    //     Go to next slide and\n    //     emit a scroll event.\n    // Else (the user is scrolling towards the beginning) and\n    // if the slider hasn't hit the first slide or\n    // if the slider is a loop and\n    // if the slider isn't moving right now:\n    //   Go to prev slide and\n    //   emit a scroll event.\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        swiper.emit('scroll', newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      swiper.emit('scroll', newEvent.raw);\n    }\n    // If you got here is because an animation has been triggered so store the current time\n    swiper.mousewheel.lastScrollTime = (new win.Date()).getTime();\n    // Return false as a default\n    return false;\n  },\n  releaseScroll(newEvent) {\n    const swiper = this;\n    const params = swiper.params.mousewheel;\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      // Return true to animate scroll on edges\n      return true;\n    }\n    return false;\n  },\n  enable() {\n    const swiper = this;\n    const event = Mousewheel.event();\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener(event, swiper.mousewheel.handle);\n      return true;\n    }\n    if (!event) return false;\n    if (swiper.mousewheel.enabled) return false;\n    let target = swiper.$el;\n    if (swiper.params.mousewheel.eventsTarged !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarged);\n    }\n    target.on('mouseenter', swiper.mousewheel.handleMouseEnter);\n    target.on('mouseleave', swiper.mousewheel.handleMouseLeave);\n    target.on(event, swiper.mousewheel.handle);\n    swiper.mousewheel.enabled = true;\n    return true;\n  },\n  disable() {\n    const swiper = this;\n    const event = Mousewheel.event();\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, swiper.mousewheel.handle);\n      return true;\n    }\n    if (!event) return false;\n    if (!swiper.mousewheel.enabled) return false;\n    let target = swiper.$el;\n    if (swiper.params.mousewheel.eventsTarged !== 'container') {\n      target = $(swiper.params.mousewheel.eventsTarged);\n    }\n    target.off(event, swiper.mousewheel.handle);\n    swiper.mousewheel.enabled = false;\n    return true;\n  },\n};\n\nconst Pagination = {\n  update() {\n    // Render || Update Pagination bullets/items\n    const swiper = this;\n    const rtl = swiper.rtl;\n    const params = swiper.params.pagination;\n    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const $el = swiper.pagination.$el;\n    // Current/Total\n    let current;\n    const total = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n    if (swiper.params.loop) {\n      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n      if (current > slidesLength - 1 - (swiper.loopedSlides * 2)) {\n        current -= (slidesLength - (swiper.loopedSlides * 2));\n      }\n      if (current > total - 1) current -= total;\n      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;\n    } else if (typeof swiper.snapIndex !== 'undefined') {\n      current = swiper.snapIndex;\n    } else {\n      current = swiper.activeIndex || 0;\n    }\n    // Types\n    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n      const bullets = swiper.pagination.bullets;\n      let firstIndex;\n      let lastIndex;\n      let midIndex;\n      if (params.dynamicBullets) {\n        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);\n        $el.css(swiper.isHorizontal() ? 'width' : 'height', `${swiper.pagination.bulletSize * (params.dynamicMainBullets + 4)}px`);\n        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {\n          swiper.pagination.dynamicBulletIndex += (current - swiper.previousIndex);\n          if (swiper.pagination.dynamicBulletIndex > (params.dynamicMainBullets - 1)) {\n            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;\n          } else if (swiper.pagination.dynamicBulletIndex < 0) {\n            swiper.pagination.dynamicBulletIndex = 0;\n          }\n        }\n        firstIndex = current - swiper.pagination.dynamicBulletIndex;\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n        midIndex = (lastIndex + firstIndex) / 2;\n      }\n      bullets.removeClass(`${params.bulletActiveClass} ${params.bulletActiveClass}-next ${params.bulletActiveClass}-next-next ${params.bulletActiveClass}-prev ${params.bulletActiveClass}-prev-prev ${params.bulletActiveClass}-main`);\n      if ($el.length > 1) {\n        bullets.each((index, bullet) => {\n          const $bullet = $(bullet);\n          const bulletIndex = $bullet.index();\n          if (bulletIndex === current) {\n            $bullet.addClass(params.bulletActiveClass);\n          }\n          if (params.dynamicBullets) {\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n              $bullet.addClass(`${params.bulletActiveClass}-main`);\n            }\n            if (bulletIndex === firstIndex) {\n              $bullet\n                .prev()\n                .addClass(`${params.bulletActiveClass}-prev`)\n                .prev()\n                .addClass(`${params.bulletActiveClass}-prev-prev`);\n            }\n            if (bulletIndex === lastIndex) {\n              $bullet\n                .next()\n                .addClass(`${params.bulletActiveClass}-next`)\n                .next()\n                .addClass(`${params.bulletActiveClass}-next-next`);\n            }\n          }\n        });\n      } else {\n        const $bullet = bullets.eq(current);\n        const bulletIndex = $bullet.index();\n        $bullet.addClass(params.bulletActiveClass);\n        if (params.dynamicBullets) {\n          const $firstDisplayedBullet = bullets.eq(firstIndex);\n          const $lastDisplayedBullet = bullets.eq(lastIndex);\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\n            bullets.eq(i).addClass(`${params.bulletActiveClass}-main`);\n          }\n          if (swiper.params.loop) {\n            if (bulletIndex >= bullets.length - params.dynamicMainBullets) {\n              for (let i = params.dynamicMainBullets; i >= 0; i -= 1) {\n                bullets.eq(bullets.length - i).addClass(`${params.bulletActiveClass}-main`);\n              }\n              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(`${params.bulletActiveClass}-prev`);\n            } else {\n              $firstDisplayedBullet\n                .prev()\n                .addClass(`${params.bulletActiveClass}-prev`)\n                .prev()\n                .addClass(`${params.bulletActiveClass}-prev-prev`);\n              $lastDisplayedBullet\n                .next()\n                .addClass(`${params.bulletActiveClass}-next`)\n                .next()\n                .addClass(`${params.bulletActiveClass}-next-next`);\n            }\n          } else {\n            $firstDisplayedBullet\n              .prev()\n              .addClass(`${params.bulletActiveClass}-prev`)\n              .prev()\n              .addClass(`${params.bulletActiveClass}-prev-prev`);\n            $lastDisplayedBullet\n              .next()\n              .addClass(`${params.bulletActiveClass}-next`)\n              .next()\n              .addClass(`${params.bulletActiveClass}-next-next`);\n          }\n        }\n      }\n      if (params.dynamicBullets) {\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n        const bulletsOffset = (((swiper.pagination.bulletSize * dynamicBulletsLength) - (swiper.pagination.bulletSize)) / 2) - (midIndex * swiper.pagination.bulletSize);\n        const offsetProp = rtl ? 'right' : 'left';\n        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', `${bulletsOffset}px`);\n      }\n    }\n    if (params.type === 'fraction') {\n      $el.find(`.${params.currentClass}`).text(params.formatFractionCurrent(current + 1));\n      $el.find(`.${params.totalClass}`).text(params.formatFractionTotal(total));\n    }\n    if (params.type === 'progressbar') {\n      let progressbarDirection;\n      if (params.progressbarOpposite) {\n        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\n      } else {\n        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\n      }\n      const scale = (current + 1) / total;\n      let scaleX = 1;\n      let scaleY = 1;\n      if (progressbarDirection === 'horizontal') {\n        scaleX = scale;\n      } else {\n        scaleY = scale;\n      }\n      $el.find(`.${params.progressbarFillClass}`).transform(`translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`).transition(swiper.params.speed);\n    }\n    if (params.type === 'custom' && params.renderCustom) {\n      $el.html(params.renderCustom(swiper, current + 1, total));\n      swiper.emit('paginationRender', swiper, $el[0]);\n    } else {\n      swiper.emit('paginationUpdate', swiper, $el[0]);\n    }\n    $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n  },\n  render() {\n    // Render Container\n    const swiper = this;\n    const params = swiper.params.pagination;\n    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n\n    const $el = swiper.pagination.$el;\n    let paginationHTML = '';\n    if (params.type === 'bullets') {\n      const numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - (swiper.loopedSlides * 2)) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n      for (let i = 0; i < numberOfBullets; i += 1) {\n        if (params.renderBullet) {\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n        } else {\n          paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n        }\n      }\n      $el.html(paginationHTML);\n      swiper.pagination.bullets = $el.find(`.${params.bulletClass}`);\n    }\n    if (params.type === 'fraction') {\n      if (params.renderFraction) {\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n      } else {\n        paginationHTML = `<span class=\"${params.currentClass}\"></span>`\n        + ' / '\n        + `<span class=\"${params.totalClass}\"></span>`;\n      }\n      $el.html(paginationHTML);\n    }\n    if (params.type === 'progressbar') {\n      if (params.renderProgressbar) {\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n      } else {\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n      }\n      $el.html(paginationHTML);\n    }\n    if (params.type !== 'custom') {\n      swiper.emit('paginationRender', swiper.pagination.$el[0]);\n    }\n  },\n  init() {\n    const swiper = this;\n    const params = swiper.params.pagination;\n    if (!params.el) return;\n\n    let $el = $(params.el);\n    if ($el.length === 0) return;\n\n    if (\n      swiper.params.uniqueNavElements\n      && typeof params.el === 'string'\n      && $el.length > 1\n      && swiper.$el.find(params.el).length === 1\n    ) {\n      $el = swiper.$el.find(params.el);\n    }\n\n    if (params.type === 'bullets' && params.clickable) {\n      $el.addClass(params.clickableClass);\n    }\n\n    $el.addClass(params.modifierClass + params.type);\n\n    if (params.type === 'bullets' && params.dynamicBullets) {\n      $el.addClass(`${params.modifierClass}${params.type}-dynamic`);\n      swiper.pagination.dynamicBulletIndex = 0;\n      if (params.dynamicMainBullets < 1) {\n        params.dynamicMainBullets = 1;\n      }\n    }\n    if (params.type === 'progressbar' && params.progressbarOpposite) {\n      $el.addClass(params.progressbarOppositeClass);\n    }\n\n    if (params.clickable) {\n      $el.on('click', `.${params.bulletClass}`, function onClick(e) {\n        e.preventDefault();\n        let index = $(this).index() * swiper.params.slidesPerGroup;\n        if (swiper.params.loop) index += swiper.loopedSlides;\n        swiper.slideTo(index);\n      });\n    }\n\n    Utils.extend(swiper.pagination, {\n      $el,\n      el: $el[0],\n    });\n  },\n  destroy() {\n    const swiper = this;\n    const params = swiper.params.pagination;\n    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;\n    const $el = swiper.pagination.$el;\n\n    $el.removeClass(params.hiddenClass);\n    $el.removeClass(params.modifierClass + params.type);\n    if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n    if (params.clickable) {\n      $el.off('click', `.${params.bulletClass}`);\n    }\n  },\n};\n\nvar pagination = {\n  name: 'pagination',\n  params: {\n    pagination: {\n      el: null,\n      bulletElement: 'span',\n      clickable: false,\n      hideOnClick: false,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: false,\n      type: 'bullets', // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n      dynamicBullets: false,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: (number) => number,\n      formatFractionTotal: (number) => number,\n      bulletClass: 'swiper-pagination-bullet',\n      bulletActiveClass: 'swiper-pagination-bullet-active',\n      modifierClass: 'swiper-pagination-', // NEW\n      currentClass: 'swiper-pagination-current',\n      totalClass: 'swiper-pagination-total',\n      hiddenClass: 'swiper-pagination-hidden',\n      progressbarFillClass: 'swiper-pagination-progressbar-fill',\n      progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',\n      clickableClass: 'swiper-pagination-clickable', // NEW\n      lockClass: 'swiper-pagination-lock',\n    },\n  },\n  create() {\n    const swiper = this;\n    Utils.extend(swiper, {\n      pagination: {\n        init: Pagination.init.bind(swiper),\n        render: Pagination.render.bind(swiper),\n        update: Pagination.update.bind(swiper),\n        destroy: Pagination.destroy.bind(swiper),\n        dynamicBulletIndex: 0,\n      },\n    });\n  },\n  on: {\n    init() {\n      const swiper = this;\n      swiper.pagination.init();\n      swiper.pagination.render();\n      swiper.pagination.update();\n    },\n    activeIndexChange() {\n      const swiper = this;\n      if (swiper.params.loop) {\n        swiper.pagination.update();\n      } else if (typeof swiper.snapIndex === 'undefined') {\n        swiper.pagination.update();\n      }\n    },\n    snapIndexChange() {\n      const swiper = this;\n      if (!swiper.params.loop) {\n        swiper.pagination.update();\n      }\n    },\n    slidesLengthChange() {\n      const swiper = this;\n      if (swiper.params.loop) {\n        swiper.pagination.render();\n        swiper.pagination.update();\n      }\n    },\n    snapGridLengthChange() {\n      const swiper = this;\n      if (!swiper.params.loop) {\n        swiper.pagination.render();\n        swiper.pagination.update();\n      }\n    },\n    destroy() {\n      const swiper = this;\n      swiper.pagination.destroy();\n    },\n    click(e) {\n      const swiper = this;\n      if (\n        swiper.params.pagination.el\n        && swiper.params.pagination.hideOnClick\n        && swiper.pagination.$el.length > 0\n        && !$(e.target).hasClass(swiper.params.pagination.bulletClass)\n      ) {\n        const isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);\n        if (isHidden === true) {\n          swiper.emit('paginationShow', swiper);\n        } else {\n          swiper.emit('paginationHide', swiper);\n        }\n        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);\n      }\n    },\n  },\n};\n\nconst Scrollbar = {\n  setTranslate() {\n    const swiper = this;\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const { scrollbar, rtlTranslate: rtl, progress } = swiper;\n    const {\n      dragSize, trackSize, $dragEl, $el,\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n    if (rtl) {\n      newPos = -newPos;\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n    if (swiper.isHorizontal()) {\n      $dragEl.transform(`translate3d(${newPos}px, 0, 0)`);\n      $dragEl[0].style.width = `${newSize}px`;\n    } else {\n      $dragEl.transform(`translate3d(0px, ${newPos}px, 0)`);\n      $dragEl[0].style.height = `${newSize}px`;\n    }\n    if (params.hide) {\n      clearTimeout(swiper.scrollbar.timeout);\n      $el[0].style.opacity = 1;\n      swiper.scrollbar.timeout = setTimeout(() => {\n        $el[0].style.opacity = 0;\n        $el.transition(400);\n      }, 1000);\n    }\n  },\n  setTransition(duration) {\n    const swiper = this;\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    swiper.scrollbar.$dragEl.transition(duration);\n  },\n  updateSize() {\n    const swiper = this;\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n\n    const { scrollbar } = swiper;\n    const { $dragEl, $el } = scrollbar;\n\n    $dragEl[0].style.width = '';\n    $dragEl[0].style.height = '';\n    const trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n\n    const divider = swiper.size / swiper.virtualSize;\n    const moveDivider = divider * (trackSize / swiper.size);\n    let dragSize;\n    if (swiper.params.scrollbar.dragSize === 'auto') {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n\n    if (swiper.isHorizontal()) {\n      $dragEl[0].style.width = `${dragSize}px`;\n    } else {\n      $dragEl[0].style.height = `${dragSize}px`;\n    }\n\n    if (divider >= 1) {\n      $el[0].style.display = 'none';\n    } else {\n      $el[0].style.display = '';\n    }\n    if (swiper.params.scrollbar.hide) {\n      $el[0].style.opacity = 0;\n    }\n    Utils.extend(scrollbar, {\n      trackSize,\n      divider,\n      moveDivider,\n      dragSize,\n    });\n    scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);\n  },\n  getPointerPosition(e) {\n    const swiper = this;\n    if (swiper.isHorizontal()) {\n      return ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].clientX : e.clientX);\n    }\n    return ((e.type === 'touchstart' || e.type === 'touchmove') ? e.targetTouches[0].clientY : e.clientY);\n  },\n  setDragPosition(e) {\n    const swiper = this;\n    const { scrollbar, rtlTranslate: rtl } = swiper;\n    const {\n      $el,\n      dragSize,\n      trackSize,\n      dragStartPos,\n    } = scrollbar;\n\n    let positionRatio;\n    positionRatio = ((scrollbar.getPointerPosition(e)) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top']\n      - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n\n    const position = swiper.minTranslate() + ((swiper.maxTranslate() - swiper.minTranslate()) * positionRatio);\n\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  },\n  onDragStart(e) {\n    const swiper = this;\n    const params = swiper.params.scrollbar;\n    const { scrollbar, $wrapperEl } = swiper;\n    const { $el, $dragEl } = scrollbar;\n    swiper.scrollbar.isTouched = true;\n    swiper.scrollbar.dragStartPos = (e.target === $dragEl[0] || e.target === $dragEl)\n      ? scrollbar.getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n    e.preventDefault();\n    e.stopPropagation();\n\n    $wrapperEl.transition(100);\n    $dragEl.transition(100);\n    scrollbar.setDragPosition(e);\n\n    clearTimeout(swiper.scrollbar.dragTimeout);\n\n    $el.transition(0);\n    if (params.hide) {\n      $el.css('opacity', 1);\n    }\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', 'none');\n    }\n    swiper.emit('scrollbarDragStart', e);\n  },\n  onDragMove(e) {\n    const swiper = this;\n    const { scrollbar, $wrapperEl } = swiper;\n    const { $el, $dragEl } = scrollbar;\n\n    if (!swiper.scrollbar.isTouched) return;\n    if (e.preventDefault) e.preventDefault();\n    else e.returnValue = false;\n    scrollbar.setDragPosition(e);\n    $wrapperEl.transition(0);\n    $el.transition(0);\n    $dragEl.transition(0);\n    swiper.emit('scrollbarDragMove', e);\n  },\n  onDragEnd(e) {\n    const swiper = this;\n\n    const params = swiper.params.scrollbar;\n    const { scrollbar, $wrapperEl } = swiper;\n    const { $el } = scrollbar;\n\n    if (!swiper.scrollbar.isTouched) return;\n    swiper.scrollbar.isTouched = false;\n    if (swiper.params.cssMode) {\n      swiper.$wrapperEl.css('scroll-snap-type', '');\n      $wrapperEl.transition('');\n    }\n    if (params.hide) {\n      clearTimeout(swiper.scrollbar.dragTimeout);\n      swiper.scrollbar.dragTimeout = Utils.nextTick(() => {\n        $el.css('opacity', 0);\n        $el.transition(400);\n      }, 1000);\n    }\n    swiper.emit('scrollbarDragEnd', e);\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  },\n  enableDraggable() {\n    const swiper = this;\n    if (!swiper.params.scrollbar.el) return;\n    const {\n      scrollbar, touchEventsTouch, touchEventsDesktop, params,\n    } = swiper;\n    const $el = scrollbar.$el;\n    const target = $el[0];\n    const activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;\n    const passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;\n    if (!Support.touch) {\n      target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);\n      doc.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);\n      doc.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);\n    } else {\n      target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);\n      target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);\n      target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);\n    }\n  },\n  disableDraggable() {\n    const swiper = this;\n    if (!swiper.params.scrollbar.el) return;\n    const {\n      scrollbar, touchEventsTouch, touchEventsDesktop, params,\n    } = swiper;\n    const $el = scrollbar.$el;\n    const target = $el[0];\n    const activeListener = Support.passiveListener && params.passiveListeners ? { passive: false, capture: false } : false;\n    const passiveListener = Support.passiveListener && params.passiveListeners ? { passive: true, capture: false } : false;\n    if (!Support.touch) {\n      target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);\n      doc.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);\n      doc.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);\n    } else {\n      target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);\n      target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);\n      target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);\n    }\n  },\n  init() {\n    const swiper = this;\n    if (!swiper.params.scrollbar.el) return;\n    const { scrollbar, $el: $swiperEl } = swiper;\n    const params = swiper.params.scrollbar;\n\n    let $el = $(params.el);\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n      $el = $swiperEl.find(params.el);\n    }\n\n    let $dragEl = $el.find(`.${swiper.params.scrollbar.dragClass}`);\n    if ($dragEl.length === 0) {\n      $dragEl = $(`<div class=\"${swiper.params.scrollbar.dragClass}\"></div>`);\n      $el.append($dragEl);\n    }\n\n    Utils.extend(scrollbar, {\n      $el,\n      el: $el[0],\n      $dragEl,\n      dragEl: $dragEl[0],\n    });\n\n    if (params.draggable) {\n      scrollbar.enableDraggable();\n    }\n  },\n  destroy() {\n    const swiper = this;\n    swiper.scrollbar.disableDraggable();\n  },\n};\n\nvar scrollbar = {\n  name: 'scrollbar',\n  params: {\n    scrollbar: {\n      el: null,\n      dragSize: 'auto',\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: 'swiper-scrollbar-lock',\n      dragClass: 'swiper-scrollbar-drag',\n    },\n  },\n  create() {\n    const swiper = this;\n    Utils.extend(swiper, {\n      scrollbar: {\n        init: Scrollbar.init.bind(swiper),\n        destroy: Scrollbar.destroy.bind(swiper),\n        updateSize: Scrollbar.updateSize.bind(swiper),\n        setTranslate: Scrollbar.setTranslate.bind(swiper),\n        setTransition: Scrollbar.setTransition.bind(swiper),\n        enableDraggable: Scrollbar.enableDraggable.bind(swiper),\n        disableDraggable: Scrollbar.disableDraggable.bind(swiper),\n        setDragPosition: Scrollbar.setDragPosition.bind(swiper),\n        getPointerPosition: Scrollbar.getPointerPosition.bind(swiper),\n        onDragStart: Scrollbar.onDragStart.bind(swiper),\n        onDragMove: Scrollbar.onDragMove.bind(swiper),\n        onDragEnd: Scrollbar.onDragEnd.bind(swiper),\n        isTouched: false,\n        timeout: null,\n        dragTimeout: null,\n      },\n    });\n  },\n  on: {\n    init() {\n      const swiper = this;\n      swiper.scrollbar.init();\n      swiper.scrollbar.updateSize();\n      swiper.scrollbar.setTranslate();\n    },\n    update() {\n      const swiper = this;\n      swiper.scrollbar.updateSize();\n    },\n    resize() {\n      const swiper = this;\n      swiper.scrollbar.updateSize();\n    },\n    observerUpdate() {\n      const swiper = this;\n      swiper.scrollbar.updateSize();\n    },\n    setTranslate() {\n      const swiper = this;\n      swiper.scrollbar.setTranslate();\n    },\n    setTransition(duration) {\n      const swiper = this;\n      swiper.scrollbar.setTransition(duration);\n    },\n    destroy() {\n      const swiper = this;\n      swiper.scrollbar.destroy();\n    },\n  },\n};\n\nconst Zoom = {\n  // Calc Scale From Multi-touches\n  getDistanceBetweenTouches(e) {\n    if (e.targetTouches.length < 2) return 1;\n    const x1 = e.targetTouches[0].pageX;\n    const y1 = e.targetTouches[0].pageY;\n    const x2 = e.targetTouches[1].pageX;\n    const y2 = e.targetTouches[1].pageY;\n    const distance = Math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2));\n    return distance;\n  },\n  // Events\n  onGestureStart(e) {\n    const swiper = this;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    const { gesture } = zoom;\n    zoom.fakeGestureTouched = false;\n    zoom.fakeGestureMoved = false;\n    if (!Support.gestures) {\n      if (e.type !== 'touchstart' || (e.type === 'touchstart' && e.targetTouches.length < 2)) {\n        return;\n      }\n      zoom.fakeGestureTouched = true;\n      gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);\n    }\n    if (!gesture.$slideEl || !gesture.$slideEl.length) {\n      gesture.$slideEl = $(e.target).closest(`.${swiper.params.slideClass}`);\n      if (gesture.$slideEl.length === 0) gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n      gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n      if (gesture.$imageWrapEl.length === 0) {\n        gesture.$imageEl = undefined;\n        return;\n      }\n    }\n    if (gesture.$imageEl) {\n      gesture.$imageEl.transition(0);\n    }\n    swiper.zoom.isScaling = true;\n  },\n  onGestureChange(e) {\n    const swiper = this;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    const { gesture } = zoom;\n    if (!Support.gestures) {\n      if (e.type !== 'touchmove' || (e.type === 'touchmove' && e.targetTouches.length < 2)) {\n        return;\n      }\n      zoom.fakeGestureMoved = true;\n      gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    if (Support.gestures) {\n      zoom.scale = e.scale * zoom.currentScale;\n    } else {\n      zoom.scale = (gesture.scaleMove / gesture.scaleStart) * zoom.currentScale;\n    }\n    if (zoom.scale > gesture.maxRatio) {\n      zoom.scale = (gesture.maxRatio - 1) + (((zoom.scale - gesture.maxRatio) + 1) ** 0.5);\n    }\n    if (zoom.scale < params.minRatio) {\n      zoom.scale = (params.minRatio + 1) - (((params.minRatio - zoom.scale) + 1) ** 0.5);\n    }\n    gesture.$imageEl.transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  },\n  onGestureEnd(e) {\n    const swiper = this;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    const { gesture } = zoom;\n    if (!Support.gestures) {\n      if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {\n        return;\n      }\n      if (e.type !== 'touchend' || (e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android)) {\n        return;\n      }\n      zoom.fakeGestureTouched = false;\n      zoom.fakeGestureMoved = false;\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n    gesture.$imageEl.transition(swiper.params.speed).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n    zoom.currentScale = zoom.scale;\n    zoom.isScaling = false;\n    if (zoom.scale === 1) gesture.$slideEl = undefined;\n  },\n  onTouchStart(e) {\n    const swiper = this;\n    const zoom = swiper.zoom;\n    const { gesture, image } = zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    if (image.isTouched) return;\n    if (Device.android && e.cancelable) e.preventDefault();\n    image.isTouched = true;\n    image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n  },\n  onTouchMove(e) {\n    const swiper = this;\n    const zoom = swiper.zoom;\n    const { gesture, image, velocity } = zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    swiper.allowClick = false;\n    if (!image.isTouched || !gesture.$slideEl) return;\n\n    if (!image.isMoved) {\n      image.width = gesture.$imageEl[0].offsetWidth;\n      image.height = gesture.$imageEl[0].offsetHeight;\n      image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;\n      image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;\n      gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n      gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n      gesture.$imageWrapEl.transition(0);\n      if (swiper.rtl) {\n        image.startX = -image.startX;\n        image.startY = -image.startY;\n      }\n    }\n    // Define if we need image drag\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n\n    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;\n\n    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);\n    image.maxY = -image.minY;\n\n    image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n    image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n    if (!image.isMoved && !zoom.isScaling) {\n      if (\n        swiper.isHorizontal()\n        && (\n          (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x)\n          || (Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)\n        )\n      ) {\n        image.isTouched = false;\n        return;\n      } if (\n        !swiper.isHorizontal()\n        && (\n          (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y)\n          || (Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)\n        )\n      ) {\n        image.isTouched = false;\n        return;\n      }\n    }\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n    e.stopPropagation();\n\n    image.isMoved = true;\n    image.currentX = (image.touchesCurrent.x - image.touchesStart.x) + image.startX;\n    image.currentY = (image.touchesCurrent.y - image.touchesStart.y) + image.startY;\n\n    if (image.currentX < image.minX) {\n      image.currentX = (image.minX + 1) - (((image.minX - image.currentX) + 1) ** 0.8);\n    }\n    if (image.currentX > image.maxX) {\n      image.currentX = (image.maxX - 1) + (((image.currentX - image.maxX) + 1) ** 0.8);\n    }\n\n    if (image.currentY < image.minY) {\n      image.currentY = (image.minY + 1) - (((image.minY - image.currentY) + 1) ** 0.8);\n    }\n    if (image.currentY > image.maxY) {\n      image.currentY = (image.maxY - 1) + (((image.currentY - image.maxY) + 1) ** 0.8);\n    }\n\n    // Velocity\n    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n    if (!velocity.prevTime) velocity.prevTime = Date.now();\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n    velocity.prevPositionX = image.touchesCurrent.x;\n    velocity.prevPositionY = image.touchesCurrent.y;\n    velocity.prevTime = Date.now();\n\n    gesture.$imageWrapEl.transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  },\n  onTouchEnd() {\n    const swiper = this;\n    const zoom = swiper.zoom;\n    const { gesture, image, velocity } = zoom;\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n    if (!image.isTouched || !image.isMoved) {\n      image.isTouched = false;\n      image.isMoved = false;\n      return;\n    }\n    image.isTouched = false;\n    image.isMoved = false;\n    let momentumDurationX = 300;\n    let momentumDurationY = 300;\n    const momentumDistanceX = velocity.x * momentumDurationX;\n    const newPositionX = image.currentX + momentumDistanceX;\n    const momentumDistanceY = velocity.y * momentumDurationY;\n    const newPositionY = image.currentY + momentumDistanceY;\n\n    // Fix duration\n    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n\n    image.currentX = newPositionX;\n    image.currentY = newPositionY;\n\n    // Define if we need image drag\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    image.minX = Math.min(((gesture.slideWidth / 2) - (scaledWidth / 2)), 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(((gesture.slideHeight / 2) - (scaledHeight / 2)), 0);\n    image.maxY = -image.minY;\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n\n    gesture.$imageWrapEl.transition(momentumDuration).transform(`translate3d(${image.currentX}px, ${image.currentY}px,0)`);\n  },\n  onTransitionEnd() {\n    const swiper = this;\n    const zoom = swiper.zoom;\n    const { gesture } = zoom;\n    if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n      if (gesture.$imageEl) {\n        gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');\n      }\n      if (gesture.$imageWrapEl) {\n        gesture.$imageWrapEl.transform('translate3d(0,0,0)');\n      }\n\n      zoom.scale = 1;\n      zoom.currentScale = 1;\n\n      gesture.$slideEl = undefined;\n      gesture.$imageEl = undefined;\n      gesture.$imageWrapEl = undefined;\n    }\n  },\n  // Toggle Zoom\n  toggle(e) {\n    const swiper = this;\n    const zoom = swiper.zoom;\n\n    if (zoom.scale && zoom.scale !== 1) {\n      // Zoom Out\n      zoom.out();\n    } else {\n      // Zoom In\n      zoom.in(e);\n    }\n  },\n  in(e) {\n    const swiper = this;\n\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    const { gesture, image } = zoom;\n\n    if (!gesture.$slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n      } else {\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      }\n      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n\n    gesture.$slideEl.addClass(`${params.zoomedSlideClass}`);\n\n    let touchX;\n    let touchY;\n    let offsetX;\n    let offsetY;\n    let diffX;\n    let diffY;\n    let translateX;\n    let translateY;\n    let imageWidth;\n    let imageHeight;\n    let scaledWidth;\n    let scaledHeight;\n    let translateMinX;\n    let translateMinY;\n    let translateMaxX;\n    let translateMaxY;\n    let slideWidth;\n    let slideHeight;\n\n    if (typeof image.touchesStart.x === 'undefined' && e) {\n      touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;\n      touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;\n    } else {\n      touchX = image.touchesStart.x;\n      touchY = image.touchesStart.y;\n    }\n\n    zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n    zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n    if (e) {\n      slideWidth = gesture.$slideEl[0].offsetWidth;\n      slideHeight = gesture.$slideEl[0].offsetHeight;\n      offsetX = gesture.$slideEl.offset().left;\n      offsetY = gesture.$slideEl.offset().top;\n      diffX = (offsetX + (slideWidth / 2)) - touchX;\n      diffY = (offsetY + (slideHeight / 2)) - touchY;\n\n      imageWidth = gesture.$imageEl[0].offsetWidth;\n      imageHeight = gesture.$imageEl[0].offsetHeight;\n      scaledWidth = imageWidth * zoom.scale;\n      scaledHeight = imageHeight * zoom.scale;\n\n      translateMinX = Math.min(((slideWidth / 2) - (scaledWidth / 2)), 0);\n      translateMinY = Math.min(((slideHeight / 2) - (scaledHeight / 2)), 0);\n      translateMaxX = -translateMinX;\n      translateMaxY = -translateMinY;\n\n      translateX = diffX * zoom.scale;\n      translateY = diffY * zoom.scale;\n\n      if (translateX < translateMinX) {\n        translateX = translateMinX;\n      }\n      if (translateX > translateMaxX) {\n        translateX = translateMaxX;\n      }\n\n      if (translateY < translateMinY) {\n        translateY = translateMinY;\n      }\n      if (translateY > translateMaxY) {\n        translateY = translateMaxY;\n      }\n    } else {\n      translateX = 0;\n      translateY = 0;\n    }\n    gesture.$imageWrapEl.transition(300).transform(`translate3d(${translateX}px, ${translateY}px,0)`);\n    gesture.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${zoom.scale})`);\n  },\n  out() {\n    const swiper = this;\n\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    const { gesture } = zoom;\n\n    if (!gesture.$slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.$slideEl = swiper.$wrapperEl.children(`.${swiper.params.slideActiveClass}`);\n      } else {\n        gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n      }\n      gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');\n      gesture.$imageWrapEl = gesture.$imageEl.parent(`.${params.containerClass}`);\n    }\n    if (!gesture.$imageEl || gesture.$imageEl.length === 0) return;\n\n    zoom.scale = 1;\n    zoom.currentScale = 1;\n    gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');\n    gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');\n    gesture.$slideEl.removeClass(`${params.zoomedSlideClass}`);\n    gesture.$slideEl = undefined;\n  },\n  // Attach/Detach Events\n  enable() {\n    const swiper = this;\n    const zoom = swiper.zoom;\n    if (zoom.enabled) return;\n    zoom.enabled = true;\n\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;\n    const activeListenerWithCapture = Support.passiveListener ? { passive: false, capture: true } : true;\n\n    const slideSelector = `.${swiper.params.slideClass}`;\n\n    // Scale image\n    if (Support.gestures) {\n      swiper.$wrapperEl.on('gesturestart', slideSelector, zoom.onGestureStart, passiveListener);\n      swiper.$wrapperEl.on('gesturechange', slideSelector, zoom.onGestureChange, passiveListener);\n      swiper.$wrapperEl.on('gestureend', slideSelector, zoom.onGestureEnd, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);\n      swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);\n      }\n    }\n\n    // Move image\n    swiper.$wrapperEl.on(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, zoom.onTouchMove, activeListenerWithCapture);\n  },\n  disable() {\n    const swiper = this;\n    const zoom = swiper.zoom;\n    if (!zoom.enabled) return;\n\n    swiper.zoom.enabled = false;\n\n    const passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? { passive: true, capture: false } : false;\n    const activeListenerWithCapture = Support.passiveListener ? { passive: false, capture: true } : true;\n\n    const slideSelector = `.${swiper.params.slideClass}`;\n\n    // Scale image\n    if (Support.gestures) {\n      swiper.$wrapperEl.off('gesturestart', slideSelector, zoom.onGestureStart, passiveListener);\n      swiper.$wrapperEl.off('gesturechange', slideSelector, zoom.onGestureChange, passiveListener);\n      swiper.$wrapperEl.off('gestureend', slideSelector, zoom.onGestureEnd, passiveListener);\n    } else if (swiper.touchEvents.start === 'touchstart') {\n      swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);\n      swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);\n      swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);\n      if (swiper.touchEvents.cancel) {\n        swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);\n      }\n    }\n\n    // Move image\n    swiper.$wrapperEl.off(swiper.touchEvents.move, `.${swiper.params.zoom.containerClass}`, zoom.onTouchMove, activeListenerWithCapture);\n  },\n};\n\nvar zoom = {\n  name: 'zoom',\n  params: {\n    zoom: {\n      enabled: false,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: true,\n      containerClass: 'swiper-zoom-container',\n      zoomedSlideClass: 'swiper-slide-zoomed',\n    },\n  },\n  create() {\n    const swiper = this;\n    const zoom = {\n      enabled: false,\n      scale: 1,\n      currentScale: 1,\n      isScaling: false,\n      gesture: {\n        $slideEl: undefined,\n        slideWidth: undefined,\n        slideHeight: undefined,\n        $imageEl: undefined,\n        $imageWrapEl: undefined,\n        maxRatio: 3,\n      },\n      image: {\n        isTouched: undefined,\n        isMoved: undefined,\n        currentX: undefined,\n        currentY: undefined,\n        minX: undefined,\n        minY: undefined,\n        maxX: undefined,\n        maxY: undefined,\n        width: undefined,\n        height: undefined,\n        startX: undefined,\n        startY: undefined,\n        touchesStart: {},\n        touchesCurrent: {},\n      },\n      velocity: {\n        x: undefined,\n        y: undefined,\n        prevPositionX: undefined,\n        prevPositionY: undefined,\n        prevTime: undefined,\n      },\n    };\n\n    ('onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out').split(' ').forEach((methodName) => {\n      zoom[methodName] = Zoom[methodName].bind(swiper);\n    });\n    Utils.extend(swiper, {\n      zoom,\n    });\n\n    let scale = 1;\n    Object.defineProperty(swiper.zoom, 'scale', {\n      get() {\n        return scale;\n      },\n      set(value) {\n        if (scale !== value) {\n          const imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;\n          const slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;\n          swiper.emit('zoomChange', value, imageEl, slideEl);\n        }\n        scale = value;\n      },\n    });\n  },\n  on: {\n    init() {\n      const swiper = this;\n      if (swiper.params.zoom.enabled) {\n        swiper.zoom.enable();\n      }\n    },\n    destroy() {\n      const swiper = this;\n      swiper.zoom.disable();\n    },\n    touchStart(e) {\n      const swiper = this;\n      if (!swiper.zoom.enabled) return;\n      swiper.zoom.onTouchStart(e);\n    },\n    touchEnd(e) {\n      const swiper = this;\n      if (!swiper.zoom.enabled) return;\n      swiper.zoom.onTouchEnd(e);\n    },\n    doubleTap(e) {\n      const swiper = this;\n      if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n        swiper.zoom.toggle(e);\n      }\n    },\n    transitionEnd() {\n      const swiper = this;\n      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n        swiper.zoom.onTransitionEnd();\n      }\n    },\n    slideChange() {\n      const swiper = this;\n      if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n        swiper.zoom.onTransitionEnd();\n      }\n    },\n  },\n};\n\n/* eslint no-underscore-dangle: \"off\" */\n\nconst Autoplay = {\n  run() {\n    const swiper = this;\n    const $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n    let delay = swiper.params.autoplay.delay;\n    if ($activeSlideEl.attr('data-swiper-autoplay')) {\n      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;\n    }\n    clearTimeout(swiper.autoplay.timeout);\n    swiper.autoplay.timeout = Utils.nextTick(() => {\n      if (swiper.params.autoplay.reverseDirection) {\n        if (swiper.params.loop) {\n          swiper.loopFix();\n          swiper.slidePrev(swiper.params.speed, true, true);\n          swiper.emit('autoplay');\n        } else if (!swiper.isBeginning) {\n          swiper.slidePrev(swiper.params.speed, true, true);\n          swiper.emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n          swiper.emit('autoplay');\n        } else {\n          swiper.autoplay.stop();\n        }\n      } else if (swiper.params.loop) {\n        swiper.loopFix();\n        swiper.slideNext(swiper.params.speed, true, true);\n        swiper.emit('autoplay');\n      } else if (!swiper.isEnd) {\n        swiper.slideNext(swiper.params.speed, true, true);\n        swiper.emit('autoplay');\n      } else if (!swiper.params.autoplay.stopOnLastSlide) {\n        swiper.slideTo(0, swiper.params.speed, true, true);\n        swiper.emit('autoplay');\n      } else {\n        swiper.autoplay.stop();\n      }\n      if (swiper.params.cssMode && swiper.autoplay.running) swiper.autoplay.run();\n    }, delay);\n  },\n  start() {\n    const swiper = this;\n    if (typeof swiper.autoplay.timeout !== 'undefined') return false;\n    if (swiper.autoplay.running) return false;\n    swiper.autoplay.running = true;\n    swiper.emit('autoplayStart');\n    swiper.autoplay.run();\n    return true;\n  },\n  stop() {\n    const swiper = this;\n    if (!swiper.autoplay.running) return false;\n    if (typeof swiper.autoplay.timeout === 'undefined') return false;\n\n    if (swiper.autoplay.timeout) {\n      clearTimeout(swiper.autoplay.timeout);\n      swiper.autoplay.timeout = undefined;\n    }\n    swiper.autoplay.running = false;\n    swiper.emit('autoplayStop');\n    return true;\n  },\n  pause(speed) {\n    const swiper = this;\n    if (!swiper.autoplay.running) return;\n    if (swiper.autoplay.paused) return;\n    if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);\n    swiper.autoplay.paused = true;\n    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n      swiper.autoplay.paused = false;\n      swiper.autoplay.run();\n    } else {\n      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);\n      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);\n    }\n  },\n};\n\nvar autoplay = {\n  name: 'autoplay',\n  params: {\n    autoplay: {\n      enabled: false,\n      delay: 3000,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n    },\n  },\n  create() {\n    const swiper = this;\n    Utils.extend(swiper, {\n      autoplay: {\n        running: false,\n        paused: false,\n        run: Autoplay.run.bind(swiper),\n        start: Autoplay.start.bind(swiper),\n        stop: Autoplay.stop.bind(swiper),\n        pause: Autoplay.pause.bind(swiper),\n        onVisibilityChange() {\n          if (document.visibilityState === 'hidden' && swiper.autoplay.running) {\n            swiper.autoplay.pause();\n          }\n          if (document.visibilityState === 'visible' && swiper.autoplay.paused) {\n            swiper.autoplay.run();\n            swiper.autoplay.paused = false;\n          }\n        },\n        onTransitionEnd(e) {\n          if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;\n          if (e.target !== this) return;\n          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);\n          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);\n          swiper.autoplay.paused = false;\n          if (!swiper.autoplay.running) {\n            swiper.autoplay.stop();\n          } else {\n            swiper.autoplay.run();\n          }\n        },\n      },\n    });\n  },\n  on: {\n    init() {\n      const swiper = this;\n      if (swiper.params.autoplay.enabled) {\n        swiper.autoplay.start();\n        document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);\n      }\n    },\n    beforeTransitionStart(speed, internal) {\n      const swiper = this;\n      if (swiper.autoplay.running) {\n        if (internal || !swiper.params.autoplay.disableOnInteraction) {\n          swiper.autoplay.pause(speed);\n        } else {\n          swiper.autoplay.stop();\n        }\n      }\n    },\n    sliderFirstMove() {\n      const swiper = this;\n      if (swiper.autoplay.running) {\n        if (swiper.params.autoplay.disableOnInteraction) {\n          swiper.autoplay.stop();\n        } else {\n          swiper.autoplay.pause();\n        }\n      }\n    },\n    touchEnd() {\n      const swiper = this;\n      if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n        swiper.autoplay.run();\n      }\n    },\n    destroy() {\n      const swiper = this;\n      if (swiper.autoplay.running) {\n        swiper.autoplay.stop();\n      }\n      document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);\n    },\n  },\n};\n\n// Swiper Class\n\nconst components = [\n  Device$1,\n  Support$1,\n  Browser$1,\n  Resize,\n  Observer$1,\n];\n\nif (typeof Swiper.use === 'undefined') {\n  Swiper.use = Swiper.Class.use;\n  Swiper.installModule = Swiper.Class.installModule;\n}\n\nSwiper.use(components);\n\nSwiper.use([pagination, scrollbar, autoplay, keyboard, zoom]);\n\nexport { Swiper };\n"]}