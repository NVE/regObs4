(function () {
  "use strict";

  (self["webpackChunkregobs4"] = self["webpackChunkregobs4"] || []).push([["node_modules_pouchdb-adapter-idb_lib_index_es_js"], {
    /***/
    5508: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! pouchdb-adapter-utils */
      53875);
      /* harmony import */


      var pouchdb_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! pouchdb-json */
      14477);
      /* harmony import */


      var pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! pouchdb-merge */
      29070);
      /* harmony import */


      var pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! pouchdb-binary-utils */
      84847);
      /* harmony import */


      var pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! pouchdb-errors */
      44090);
      /* harmony import */


      var pouchdb_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! pouchdb-collections */
      31793);
      /* harmony import */


      var pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! pouchdb-utils */
      94084); // IndexedDB requires a versioned database structure, so we use the
      // version here to manage migrations.


      var ADAPTER_VERSION = 5; // The object stores created for each database
      // DOC_STORE stores the document meta data, its revision history and state
      // Keyed by document id

      var DOC_STORE = 'document-store'; // BY_SEQ_STORE stores a particular version of a document, keyed by its
      // sequence id

      var BY_SEQ_STORE = 'by-sequence'; // Where we store attachments

      var ATTACH_STORE = 'attach-store'; // Where we store many-to-many relations
      // between attachment digests and seqs

      var ATTACH_AND_SEQ_STORE = 'attach-seq-store'; // Where we store database-wide meta data in a single record
      // keyed by id: META_STORE

      var META_STORE = 'meta-store'; // Where we store local documents

      var LOCAL_STORE = 'local-store'; // Where we detect blob support

      var DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';

      function idbError(callback) {
        return function (evt) {
          var message = 'unknown_error';

          if (evt.target && evt.target.error) {
            message = evt.target.error.name || evt.target.error.message;
          }

          callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.IDB_ERROR, message, evt.type));
        };
      } // Unfortunately, the metadata has to be stringified
      // when it is put into the database, because otherwise
      // IndexedDB can throw errors for deeply-nested objects.
      // Originally we just used JSON.parse/JSON.stringify; now
      // we use this custom vuvuzela library that avoids recursion.
      // If we could do it all over again, we'd probably use a
      // format for the revision trees other than JSON.


      function encodeMetadata(metadata, winningRev$$1, deleted) {
        return {
          data: (0, pouchdb_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(metadata),
          winningRev: winningRev$$1,
          deletedOrLocal: deleted ? '1' : '0',
          seq: metadata.seq,
          // highest seq for this doc
          id: metadata.id
        };
      }

      function decodeMetadata(storedObject) {
        if (!storedObject) {
          return null;
        }

        var metadata = (0, pouchdb_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(storedObject.data);
        metadata.winningRev = storedObject.winningRev;
        metadata.deleted = storedObject.deletedOrLocal === '1';
        metadata.seq = storedObject.seq;
        return metadata;
      } // read the doc back out from the database. we don't store the
      // _id or _rev because we already have _doc_id_rev.


      function decodeDoc(doc) {
        if (!doc) {
          return doc;
        }

        var idx = doc._doc_id_rev.lastIndexOf(':');

        doc._id = doc._doc_id_rev.substring(0, idx - 1);
        doc._rev = doc._doc_id_rev.substring(idx + 1);
        delete doc._doc_id_rev;
        return doc;
      } // Read a blob from the database, encoding as necessary
      // and translating from base64 if the IDB doesn't support
      // native Blobs


      function readBlobData(body, type, asBlob, callback) {
        if (asBlob) {
          if (!body) {
            callback((0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_3__.blob)([''], {
              type: type
            }));
          } else if (typeof body !== 'string') {
            // we have blob support
            callback(body);
          } else {
            // no blob support
            callback((0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_3__.base64StringToBlobOrBuffer)(body, type));
          }
        } else {
          // as base64 string
          if (!body) {
            callback('');
          } else if (typeof body !== 'string') {
            // we have blob support
            (0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_3__.readAsBinaryString)(body, function (binary) {
              callback((0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_3__.btoa)(binary));
            });
          } else {
            // no blob support
            callback(body);
          }
        }
      }

      function fetchAttachmentsIfNecessary(doc, opts, txn, cb) {
        var attachments = Object.keys(doc._attachments || {});

        if (!attachments.length) {
          return cb && cb();
        }

        var numDone = 0;

        function checkDone() {
          if (++numDone === attachments.length && cb) {
            cb();
          }
        }

        function fetchAttachment(doc, att) {
          var attObj = doc._attachments[att];
          var digest = attObj.digest;
          var req = txn.objectStore(ATTACH_STORE).get(digest);

          req.onsuccess = function (e) {
            attObj.body = e.target.result.body;
            checkDone();
          };
        }

        attachments.forEach(function (att) {
          if (opts.attachments && opts.include_docs) {
            fetchAttachment(doc, att);
          } else {
            doc._attachments[att].stub = true;
            checkDone();
          }
        });
      } // IDB-specific postprocessing necessary because
      // we don't know whether we stored a true Blob or
      // a base64-encoded string, and if it's a Blob it
      // needs to be read outside of the transaction context


      function postProcessAttachments(results, asBlob) {
        return Promise.all(results.map(function (row) {
          if (row.doc && row.doc._attachments) {
            var attNames = Object.keys(row.doc._attachments);
            return Promise.all(attNames.map(function (att) {
              var attObj = row.doc._attachments[att];

              if (!('body' in attObj)) {
                // already processed
                return;
              }

              var body = attObj.body;
              var type = attObj.content_type;
              return new Promise(function (resolve) {
                readBlobData(body, type, asBlob, function (data) {
                  row.doc._attachments[att] = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.assign)((0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.pick)(attObj, ['digest', 'content_type']), {
                    data: data
                  });
                  resolve();
                });
              });
            }));
          }
        }));
      }

      function compactRevs(revs, docId, txn) {
        var possiblyOrphanedDigests = [];
        var seqStore = txn.objectStore(BY_SEQ_STORE);
        var attStore = txn.objectStore(ATTACH_STORE);
        var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
        var count = revs.length;

        function checkDone() {
          count--;

          if (!count) {
            // done processing all revs
            deleteOrphanedAttachments();
          }
        }

        function deleteOrphanedAttachments() {
          if (!possiblyOrphanedDigests.length) {
            return;
          }

          possiblyOrphanedDigests.forEach(function (digest) {
            var countReq = attAndSeqStore.index('digestSeq').count(IDBKeyRange.bound(digest + '::', digest + "::\uFFFF", false, false));

            countReq.onsuccess = function (e) {
              var count = e.target.result;

              if (!count) {
                // orphaned
                attStore["delete"](digest);
              }
            };
          });
        }

        revs.forEach(function (rev) {
          var index = seqStore.index('_doc_id_rev');
          var key = docId + "::" + rev;

          index.getKey(key).onsuccess = function (e) {
            var seq = e.target.result;

            if (typeof seq !== 'number') {
              return checkDone();
            }

            seqStore["delete"](seq);
            var cursor = attAndSeqStore.index('seq').openCursor(IDBKeyRange.only(seq));

            cursor.onsuccess = function (event) {
              var cursor = event.target.result;

              if (cursor) {
                var digest = cursor.value.digestSeq.split('::')[0];
                possiblyOrphanedDigests.push(digest);
                attAndSeqStore["delete"](cursor.primaryKey);
                cursor["continue"]();
              } else {
                // done
                checkDone();
              }
            };
          };
        });
      }

      function openTransactionSafely(idb, stores, mode) {
        try {
          return {
            txn: idb.transaction(stores, mode)
          };
        } catch (err) {
          return {
            error: err
          };
        }
      }

      var changesHandler$1 = new pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.changesHandler();

      function idbBulkDocs(dbOpts, req, opts, api, idb, callback) {
        var docInfos = req.docs;
        var txn;
        var docStore;
        var bySeqStore;
        var attachStore;
        var attachAndSeqStore;
        var metaStore;
        var docInfoError;
        var metaDoc;

        for (var i = 0, len = docInfos.length; i < len; i++) {
          var doc = docInfos[i];

          if (doc._id && (0, pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_0__.isLocalId)(doc._id)) {
            continue;
          }

          doc = docInfos[i] = (0, pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_0__.parseDoc)(doc, opts.new_edits, dbOpts);

          if (doc.error && !docInfoError) {
            docInfoError = doc;
          }
        }

        if (docInfoError) {
          return callback(docInfoError);
        }

        var allDocsProcessed = false;
        var docCountDelta = 0;
        var results = new Array(docInfos.length);
        var fetchedDocs = new pouchdb_collections__WEBPACK_IMPORTED_MODULE_5__.Map();
        var preconditionErrored = false;
        var blobType = api._meta.blobSupport ? 'blob' : 'base64';
        (0, pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_0__.preprocessAttachments)(docInfos, blobType, function (err) {
          if (err) {
            return callback(err);
          }

          startTransaction();
        });

        function startTransaction() {
          var stores = [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE, LOCAL_STORE, ATTACH_AND_SEQ_STORE, META_STORE];
          var txnResult = openTransactionSafely(idb, stores, 'readwrite');

          if (txnResult.error) {
            return callback(txnResult.error);
          }

          txn = txnResult.txn;
          txn.onabort = idbError(callback);
          txn.ontimeout = idbError(callback);
          txn.oncomplete = complete;
          docStore = txn.objectStore(DOC_STORE);
          bySeqStore = txn.objectStore(BY_SEQ_STORE);
          attachStore = txn.objectStore(ATTACH_STORE);
          attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
          metaStore = txn.objectStore(META_STORE);

          metaStore.get(META_STORE).onsuccess = function (e) {
            metaDoc = e.target.result;
            updateDocCountIfReady();
          };

          verifyAttachments(function (err) {
            if (err) {
              preconditionErrored = true;
              return callback(err);
            }

            fetchExistingDocs();
          });
        }

        function onAllDocsProcessed() {
          allDocsProcessed = true;
          updateDocCountIfReady();
        }

        function idbProcessDocs() {
          (0, pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_0__.processDocs)(dbOpts.revs_limit, docInfos, api, fetchedDocs, txn, results, writeDoc, opts, onAllDocsProcessed);
        }

        function updateDocCountIfReady() {
          if (!metaDoc || !allDocsProcessed) {
            return;
          } // caching the docCount saves a lot of time in allDocs() and
          // info(), which is why we go to all the trouble of doing this


          metaDoc.docCount += docCountDelta;
          metaStore.put(metaDoc);
        }

        function fetchExistingDocs() {
          if (!docInfos.length) {
            return;
          }

          var numFetched = 0;

          function checkDone() {
            if (++numFetched === docInfos.length) {
              idbProcessDocs();
            }
          }

          function readMetadata(event) {
            var metadata = decodeMetadata(event.target.result);

            if (metadata) {
              fetchedDocs.set(metadata.id, metadata);
            }

            checkDone();
          }

          for (var i = 0, len = docInfos.length; i < len; i++) {
            var docInfo = docInfos[i];

            if (docInfo._id && (0, pouchdb_adapter_utils__WEBPACK_IMPORTED_MODULE_0__.isLocalId)(docInfo._id)) {
              checkDone(); // skip local docs

              continue;
            }

            var req = docStore.get(docInfo.metadata.id);
            req.onsuccess = readMetadata;
          }
        }

        function complete() {
          if (preconditionErrored) {
            return;
          }

          changesHandler$1.notify(api._meta.name);
          callback(null, results);
        }

        function verifyAttachment(digest, callback) {
          var req = attachStore.get(digest);

          req.onsuccess = function (e) {
            if (!e.target.result) {
              var err = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_STUB, 'unknown stub attachment with digest ' + digest);
              err.status = 412;
              callback(err);
            } else {
              callback();
            }
          };
        }

        function verifyAttachments(finish) {
          var digests = [];
          docInfos.forEach(function (docInfo) {
            if (docInfo.data && docInfo.data._attachments) {
              Object.keys(docInfo.data._attachments).forEach(function (filename) {
                var att = docInfo.data._attachments[filename];

                if (att.stub) {
                  digests.push(att.digest);
                }
              });
            }
          });

          if (!digests.length) {
            return finish();
          }

          var numDone = 0;
          var err;

          function checkDone() {
            if (++numDone === digests.length) {
              finish(err);
            }
          }

          digests.forEach(function (digest) {
            verifyAttachment(digest, function (attErr) {
              if (attErr && !err) {
                err = attErr;
              }

              checkDone();
            });
          });
        }

        function writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted, isUpdate, delta, resultsIdx, callback) {
          docInfo.metadata.winningRev = winningRev$$1;
          docInfo.metadata.deleted = winningRevIsDeleted;
          var doc = docInfo.data;
          doc._id = docInfo.metadata.id;
          doc._rev = docInfo.metadata.rev;

          if (newRevIsDeleted) {
            doc._deleted = true;
          }

          var hasAttachments = doc._attachments && Object.keys(doc._attachments).length;

          if (hasAttachments) {
            return writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted, isUpdate, resultsIdx, callback);
          }

          docCountDelta += delta;
          updateDocCountIfReady();
          finishDoc(docInfo, winningRev$$1, winningRevIsDeleted, isUpdate, resultsIdx, callback);
        }

        function finishDoc(docInfo, winningRev$$1, winningRevIsDeleted, isUpdate, resultsIdx, callback) {
          var doc = docInfo.data;
          var metadata = docInfo.metadata;
          doc._doc_id_rev = metadata.id + '::' + metadata.rev;
          delete doc._id;
          delete doc._rev;

          function afterPutDoc(e) {
            var revsToDelete = docInfo.stemmedRevs || [];

            if (isUpdate && api.auto_compaction) {
              revsToDelete = revsToDelete.concat((0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.compactTree)(docInfo.metadata));
            }

            if (revsToDelete && revsToDelete.length) {
              compactRevs(revsToDelete, docInfo.metadata.id, txn);
            }

            metadata.seq = e.target.result; // Current _rev is calculated from _rev_tree on read
            // delete metadata.rev;

            var metadataToStore = encodeMetadata(metadata, winningRev$$1, winningRevIsDeleted);
            var metaDataReq = docStore.put(metadataToStore);
            metaDataReq.onsuccess = afterPutMetadata;
          }

          function afterPutDocError(e) {
            // ConstraintError, need to update, not put (see #1638 for details)
            e.preventDefault(); // avoid transaction abort

            e.stopPropagation(); // avoid transaction onerror

            var index = bySeqStore.index('_doc_id_rev');
            var getKeyReq = index.getKey(doc._doc_id_rev);

            getKeyReq.onsuccess = function (e) {
              var putReq = bySeqStore.put(doc, e.target.result);
              putReq.onsuccess = afterPutDoc;
            };
          }

          function afterPutMetadata() {
            results[resultsIdx] = {
              ok: true,
              id: metadata.id,
              rev: metadata.rev
            };
            fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);
            insertAttachmentMappings(docInfo, metadata.seq, callback);
          }

          var putReq = bySeqStore.put(doc);
          putReq.onsuccess = afterPutDoc;
          putReq.onerror = afterPutDocError;
        }

        function writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted, isUpdate, resultsIdx, callback) {
          var doc = docInfo.data;
          var numDone = 0;
          var attachments = Object.keys(doc._attachments);

          function collectResults() {
            if (numDone === attachments.length) {
              finishDoc(docInfo, winningRev$$1, winningRevIsDeleted, isUpdate, resultsIdx, callback);
            }
          }

          function attachmentSaved() {
            numDone++;
            collectResults();
          }

          attachments.forEach(function (key) {
            var att = docInfo.data._attachments[key];

            if (!att.stub) {
              var data = att.data;
              delete att.data;
              att.revpos = parseInt(winningRev$$1, 10);
              var digest = att.digest;
              saveAttachment(digest, data, attachmentSaved);
            } else {
              numDone++;
              collectResults();
            }
          });
        } // map seqs to attachment digests, which
        // we will need later during compaction


        function insertAttachmentMappings(docInfo, seq, callback) {
          var attsAdded = 0;
          var attsToAdd = Object.keys(docInfo.data._attachments || {});

          if (!attsToAdd.length) {
            return callback();
          }

          function checkDone() {
            if (++attsAdded === attsToAdd.length) {
              callback();
            }
          }

          function add(att) {
            var digest = docInfo.data._attachments[att].digest;
            var req = attachAndSeqStore.put({
              seq: seq,
              digestSeq: digest + '::' + seq
            });
            req.onsuccess = checkDone;

            req.onerror = function (e) {
              // this callback is for a constaint error, which we ignore
              // because this docid/rev has already been associated with
              // the digest (e.g. when new_edits == false)
              e.preventDefault(); // avoid transaction abort

              e.stopPropagation(); // avoid transaction onerror

              checkDone();
            };
          }

          for (var i = 0; i < attsToAdd.length; i++) {
            add(attsToAdd[i]); // do in parallel
          }
        }

        function saveAttachment(digest, data, callback) {
          var getKeyReq = attachStore.count(digest);

          getKeyReq.onsuccess = function (e) {
            var count = e.target.result;

            if (count) {
              return callback(); // already exists
            }

            var newAtt = {
              digest: digest,
              body: data
            };
            var putReq = attachStore.put(newAtt);
            putReq.onsuccess = callback;
          };
        }
      } // Abstraction over IDBCursor and getAll()/getAllKeys() that allows us to batch our operations
      // while falling back to a normal IDBCursor operation on browsers that don't support getAll() or
      // getAllKeys(). This allows for a much faster implementation than just straight-up cursors, because
      // we're not processing each document one-at-a-time.


      function runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {
        if (batchSize === -1) {
          batchSize = 1000;
        } // Bail out of getAll()/getAllKeys() in the following cases:
        // 1) either method is unsupported - we need both
        // 2) batchSize is 1 (might as well use IDBCursor)
        // 3) descending – no real way to do this via getAll()/getAllKeys()


        var useGetAll = typeof objectStore.getAll === 'function' && typeof objectStore.getAllKeys === 'function' && batchSize > 1 && !descending;
        var keysBatch;
        var valuesBatch;
        var pseudoCursor;

        function onGetAll(e) {
          valuesBatch = e.target.result;

          if (keysBatch) {
            onBatch(keysBatch, valuesBatch, pseudoCursor);
          }
        }

        function onGetAllKeys(e) {
          keysBatch = e.target.result;

          if (valuesBatch) {
            onBatch(keysBatch, valuesBatch, pseudoCursor);
          }
        }

        function continuePseudoCursor() {
          if (!keysBatch.length) {
            // no more results
            return onBatch();
          } // fetch next batch, exclusive start


          var lastKey = keysBatch[keysBatch.length - 1];
          var newKeyRange;

          if (keyRange && keyRange.upper) {
            try {
              newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper, true, keyRange.upperOpen);
            } catch (e) {
              if (e.name === "DataError" && e.code === 0) {
                return onBatch(); // we're done, startkey and endkey are equal
              }
            }
          } else {
            newKeyRange = IDBKeyRange.lowerBound(lastKey, true);
          }

          keyRange = newKeyRange;
          keysBatch = null;
          valuesBatch = null;
          objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
          objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
        }

        function onCursor(e) {
          var cursor = e.target.result;

          if (!cursor) {
            // done
            return onBatch();
          } // regular IDBCursor acts like a batch where batch size is always 1


          onBatch([cursor.key], [cursor.value], cursor);
        }

        if (useGetAll) {
          pseudoCursor = {
            "continue": continuePseudoCursor
          };
          objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
          objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
        } else if (descending) {
          objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;
        } else {
          objectStore.openCursor(keyRange).onsuccess = onCursor;
        }
      } // simple shim for objectStore.getAll(), falling back to IDBCursor


      function getAll(objectStore, keyRange, onSuccess) {
        if (typeof objectStore.getAll === 'function') {
          // use native getAll
          objectStore.getAll(keyRange).onsuccess = onSuccess;
          return;
        } // fall back to cursors


        var values = [];

        function onCursor(e) {
          var cursor = e.target.result;

          if (cursor) {
            values.push(cursor.value);
            cursor["continue"]();
          } else {
            onSuccess({
              target: {
                result: values
              }
            });
          }
        }

        objectStore.openCursor(keyRange).onsuccess = onCursor;
      }

      function allDocsKeys(keys, docStore, onBatch) {
        // It's not guaranted to be returned in right order  
        var valuesBatch = new Array(keys.length);
        var count = 0;
        keys.forEach(function (key, index) {
          docStore.get(key).onsuccess = function (event) {
            if (event.target.result) {
              valuesBatch[index] = event.target.result;
            } else {
              valuesBatch[index] = {
                key: key,
                error: 'not_found'
              };
            }

            count++;

            if (count === keys.length) {
              onBatch(keys, valuesBatch, {});
            }
          };
        });
      }

      function createKeyRange(start, end, inclusiveEnd, key, descending) {
        try {
          if (start && end) {
            if (descending) {
              return IDBKeyRange.bound(end, start, !inclusiveEnd, false);
            } else {
              return IDBKeyRange.bound(start, end, false, !inclusiveEnd);
            }
          } else if (start) {
            if (descending) {
              return IDBKeyRange.upperBound(start);
            } else {
              return IDBKeyRange.lowerBound(start);
            }
          } else if (end) {
            if (descending) {
              return IDBKeyRange.lowerBound(end, !inclusiveEnd);
            } else {
              return IDBKeyRange.upperBound(end, !inclusiveEnd);
            }
          } else if (key) {
            return IDBKeyRange.only(key);
          }
        } catch (e) {
          return {
            error: e
          };
        }

        return null;
      }

      function idbAllDocs(opts, idb, callback) {
        var start = 'startkey' in opts ? opts.startkey : false;
        var end = 'endkey' in opts ? opts.endkey : false;
        var key = 'key' in opts ? opts.key : false;
        var keys = 'keys' in opts ? opts.keys : false;
        var skip = opts.skip || 0;
        var limit = typeof opts.limit === 'number' ? opts.limit : -1;
        var inclusiveEnd = opts.inclusive_end !== false;
        var keyRange;
        var keyRangeError;

        if (!keys) {
          keyRange = createKeyRange(start, end, inclusiveEnd, key, opts.descending);
          keyRangeError = keyRange && keyRange.error;

          if (keyRangeError && !(keyRangeError.name === "DataError" && keyRangeError.code === 0)) {
            // DataError with error code 0 indicates start is less than end, so
            // can just do an empty query. Else need to throw
            return callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.IDB_ERROR, keyRangeError.name, keyRangeError.message));
          }
        }

        var stores = [DOC_STORE, BY_SEQ_STORE, META_STORE];

        if (opts.attachments) {
          stores.push(ATTACH_STORE);
        }

        var txnResult = openTransactionSafely(idb, stores, 'readonly');

        if (txnResult.error) {
          return callback(txnResult.error);
        }

        var txn = txnResult.txn;
        txn.oncomplete = onTxnComplete;
        txn.onabort = idbError(callback);
        var docStore = txn.objectStore(DOC_STORE);
        var seqStore = txn.objectStore(BY_SEQ_STORE);
        var metaStore = txn.objectStore(META_STORE);
        var docIdRevIndex = seqStore.index('_doc_id_rev');
        var results = [];
        var docCount;
        var updateSeq;

        metaStore.get(META_STORE).onsuccess = function (e) {
          docCount = e.target.result.docCount;
        };
        /* istanbul ignore if */


        if (opts.update_seq) {
          getMaxUpdateSeq(seqStore, function (e) {
            if (e.target.result && e.target.result.length > 0) {
              updateSeq = e.target.result[0];
            }
          });
        }

        function getMaxUpdateSeq(objectStore, onSuccess) {
          function onCursor(e) {
            var cursor = e.target.result;
            var maxKey = undefined;

            if (cursor && cursor.key) {
              maxKey = cursor.key;
            }

            return onSuccess({
              target: {
                result: [maxKey]
              }
            });
          }

          objectStore.openCursor(null, 'prev').onsuccess = onCursor;
        } // if the user specifies include_docs=true, then we don't
        // want to block the main cursor while we're fetching the doc


        function fetchDocAsynchronously(metadata, row, winningRev$$1) {
          var key = metadata.id + "::" + winningRev$$1;

          docIdRevIndex.get(key).onsuccess = function onGetDoc(e) {
            row.doc = decodeDoc(e.target.result) || {};

            if (opts.conflicts) {
              var conflicts = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.collectConflicts)(metadata);

              if (conflicts.length) {
                row.doc._conflicts = conflicts;
              }
            }

            fetchAttachmentsIfNecessary(row.doc, opts, txn);
          };
        }

        function allDocsInner(winningRev$$1, metadata) {
          var row = {
            id: metadata.id,
            key: metadata.id,
            value: {
              rev: winningRev$$1
            }
          };
          var deleted = metadata.deleted;

          if (deleted) {
            if (keys) {
              results.push(row); // deleted docs are okay with "keys" requests

              row.value.deleted = true;
              row.doc = null;
            }
          } else if (skip-- <= 0) {
            results.push(row);

            if (opts.include_docs) {
              fetchDocAsynchronously(metadata, row, winningRev$$1);
            }
          }
        }

        function processBatch(batchValues) {
          for (var i = 0, len = batchValues.length; i < len; i++) {
            if (results.length === limit) {
              break;
            }

            var batchValue = batchValues[i];

            if (batchValue.error && keys) {
              // key was not found with "keys" requests
              results.push(batchValue);
              continue;
            }

            var metadata = decodeMetadata(batchValue);
            var winningRev$$1 = metadata.winningRev;
            allDocsInner(winningRev$$1, metadata);
          }
        }

        function onBatch(batchKeys, batchValues, cursor) {
          if (!cursor) {
            return;
          }

          processBatch(batchValues);

          if (results.length < limit) {
            cursor["continue"]();
          }
        }

        function onGetAll(e) {
          var values = e.target.result;

          if (opts.descending) {
            values = values.reverse();
          }

          processBatch(values);
        }

        function onResultsReady() {
          var returnVal = {
            total_rows: docCount,
            offset: opts.skip,
            rows: results
          };
          /* istanbul ignore if */

          if (opts.update_seq && updateSeq !== undefined) {
            returnVal.update_seq = updateSeq;
          }

          callback(null, returnVal);
        }

        function onTxnComplete() {
          if (opts.attachments) {
            postProcessAttachments(results, opts.binary).then(onResultsReady);
          } else {
            onResultsReady();
          }
        } // don't bother doing any requests if start > end or limit === 0


        if (keyRangeError || limit === 0) {
          return;
        }

        if (keys) {
          return allDocsKeys(opts.keys, docStore, onBatch);
        }

        if (limit === -1) {
          // just fetch everything
          return getAll(docStore, keyRange, onGetAll);
        } // else do a cursor
        // choose a batch size based on the skip, since we'll need to skip that many


        runBatchedCursor(docStore, keyRange, opts.descending, limit + skip, onBatch);
      } //
      // Blobs are not supported in all versions of IndexedDB, notably
      // Chrome <37 and Android <5. In those versions, storing a blob will throw.
      //
      // Various other blob bugs exist in Chrome v37-42 (inclusive).
      // Detecting them is expensive and confusing to users, and Chrome 37-42
      // is at very low usage worldwide, so we do a hacky userAgent check instead.
      //
      // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
      // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
      // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
      //


      function checkBlobSupport(txn) {
        return new Promise(function (resolve) {
          var blob$$1 = (0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_3__.blob)(['']);
          var req = txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob$$1, 'key');

          req.onsuccess = function () {
            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
            var matchedEdge = navigator.userAgent.match(/Edge\//); // MS Edge pretends to be Chrome 42:
            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx

            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
          };

          req.onerror = txn.onabort = function (e) {
            // If the transaction aborts now its due to not being able to
            // write to the database, likely due to the disk being full
            e.preventDefault();
            e.stopPropagation();
            resolve(false);
          };
        })["catch"](function () {
          return false; // error, so assume unsupported
        });
      }

      function countDocs(txn, cb) {
        var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');

        index.count(IDBKeyRange.only('0')).onsuccess = function (e) {
          cb(e.target.result);
        };
      } // This task queue ensures that IDB open calls are done in their own tick


      var running = false;
      var queue = [];

      function tryCode(fun, err, res, PouchDB) {
        try {
          fun(err, res);
        } catch (err) {
          // Shouldn't happen, but in some odd cases
          // IndexedDB implementations might throw a sync
          // error, in which case this will at least log it.
          PouchDB.emit('error', err);
        }
      }

      function applyNext() {
        if (running || !queue.length) {
          return;
        }

        running = true;
        queue.shift()();
      }

      function enqueueTask(action, callback, PouchDB) {
        queue.push(function runAction() {
          action(function runCallback(err, res) {
            tryCode(callback, err, res, PouchDB);
            running = false;
            (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.nextTick)(function runNext() {
              applyNext(PouchDB);
            });
          });
        });
        applyNext();
      }

      function changes(opts, api, dbName, idb) {
        opts = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.clone)(opts);

        if (opts.continuous) {
          var id = dbName + ':' + (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.uuid)();
          changesHandler$1.addListener(dbName, id, api, opts);
          changesHandler$1.notify(dbName);
          return {
            cancel: function cancel() {
              changesHandler$1.removeListener(dbName, id);
            }
          };
        }

        var docIds = opts.doc_ids && new pouchdb_collections__WEBPACK_IMPORTED_MODULE_5__.Set(opts.doc_ids);
        opts.since = opts.since || 0;
        var lastSeq = opts.since;
        var limit = 'limit' in opts ? opts.limit : -1;

        if (limit === 0) {
          limit = 1; // per CouchDB _changes spec
        }

        var results = [];
        var numResults = 0;
        var filter = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.filterChange)(opts);
        var docIdsToMetadata = new pouchdb_collections__WEBPACK_IMPORTED_MODULE_5__.Map();
        var txn;
        var bySeqStore;
        var docStore;
        var docIdRevIndex;

        function onBatch(batchKeys, batchValues, cursor) {
          if (!cursor || !batchKeys.length) {
            // done
            return;
          }

          var winningDocs = new Array(batchKeys.length);
          var metadatas = new Array(batchKeys.length);

          function processMetadataAndWinningDoc(metadata, winningDoc) {
            var change = opts.processChange(winningDoc, metadata, opts);
            lastSeq = change.seq = metadata.seq;
            var filtered = filter(change);

            if (typeof filtered === 'object') {
              // anything but true/false indicates error
              return Promise.reject(filtered);
            }

            if (!filtered) {
              return Promise.resolve();
            }

            numResults++;

            if (opts.return_docs) {
              results.push(change);
            } // process the attachment immediately
            // for the benefit of live listeners


            if (opts.attachments && opts.include_docs) {
              return new Promise(function (resolve) {
                fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {
                  postProcessAttachments([change], opts.binary).then(function () {
                    resolve(change);
                  });
                });
              });
            } else {
              return Promise.resolve(change);
            }
          }

          function onBatchDone() {
            var promises = [];

            for (var i = 0, len = winningDocs.length; i < len; i++) {
              if (numResults === limit) {
                break;
              }

              var winningDoc = winningDocs[i];

              if (!winningDoc) {
                continue;
              }

              var metadata = metadatas[i];
              promises.push(processMetadataAndWinningDoc(metadata, winningDoc));
            }

            Promise.all(promises).then(function (changes) {
              for (var i = 0, len = changes.length; i < len; i++) {
                if (changes[i]) {
                  opts.onChange(changes[i]);
                }
              }
            })["catch"](opts.complete);

            if (numResults !== limit) {
              cursor["continue"]();
            }
          } // Fetch all metadatas/winningdocs from this batch in parallel, then process
          // them all only once all data has been collected. This is done in parallel
          // because it's faster than doing it one-at-a-time.


          var numDone = 0;
          batchValues.forEach(function (value, i) {
            var doc = decodeDoc(value);
            var seq = batchKeys[i];
            fetchWinningDocAndMetadata(doc, seq, function (metadata, winningDoc) {
              metadatas[i] = metadata;
              winningDocs[i] = winningDoc;

              if (++numDone === batchKeys.length) {
                onBatchDone();
              }
            });
          });
        }

        function onGetMetadata(doc, seq, metadata, cb) {
          if (metadata.seq !== seq) {
            // some other seq is later
            return cb();
          }

          if (metadata.winningRev === doc._rev) {
            // this is the winning doc
            return cb(metadata, doc);
          } // fetch winning doc in separate request


          var docIdRev = doc._id + '::' + metadata.winningRev;
          var req = docIdRevIndex.get(docIdRev);

          req.onsuccess = function (e) {
            cb(metadata, decodeDoc(e.target.result));
          };
        }

        function fetchWinningDocAndMetadata(doc, seq, cb) {
          if (docIds && !docIds.has(doc._id)) {
            return cb();
          }

          var metadata = docIdsToMetadata.get(doc._id);

          if (metadata) {
            // cached
            return onGetMetadata(doc, seq, metadata, cb);
          } // metadata not cached, have to go fetch it


          docStore.get(doc._id).onsuccess = function (e) {
            metadata = decodeMetadata(e.target.result);
            docIdsToMetadata.set(doc._id, metadata);
            onGetMetadata(doc, seq, metadata, cb);
          };
        }

        function finish() {
          opts.complete(null, {
            results: results,
            last_seq: lastSeq
          });
        }

        function onTxnComplete() {
          if (!opts.continuous && opts.attachments) {
            // cannot guarantee that postProcessing was already done,
            // so do it again
            postProcessAttachments(results).then(finish);
          } else {
            finish();
          }
        }

        var objectStores = [DOC_STORE, BY_SEQ_STORE];

        if (opts.attachments) {
          objectStores.push(ATTACH_STORE);
        }

        var txnResult = openTransactionSafely(idb, objectStores, 'readonly');

        if (txnResult.error) {
          return opts.complete(txnResult.error);
        }

        txn = txnResult.txn;
        txn.onabort = idbError(opts.complete);
        txn.oncomplete = onTxnComplete;
        bySeqStore = txn.objectStore(BY_SEQ_STORE);
        docStore = txn.objectStore(DOC_STORE);
        docIdRevIndex = bySeqStore.index('_doc_id_rev');
        var keyRange = opts.since && !opts.descending ? IDBKeyRange.lowerBound(opts.since, true) : null;
        runBatchedCursor(bySeqStore, keyRange, opts.descending, limit, onBatch);
      }

      var cachedDBs = new pouchdb_collections__WEBPACK_IMPORTED_MODULE_5__.Map();
      var blobSupportPromise;
      var openReqList = new pouchdb_collections__WEBPACK_IMPORTED_MODULE_5__.Map();

      function IdbPouch(opts, callback) {
        var api = this;
        enqueueTask(function (thisCallback) {
          init(api, opts, thisCallback);
        }, callback, api.constructor);
      }

      function init(api, opts, callback) {
        var dbName = opts.name;
        var idb = null;
        api._meta = null; // called when creating a fresh new database

        function createSchema(db) {
          var docStore = db.createObjectStore(DOC_STORE, {
            keyPath: 'id'
          });
          db.createObjectStore(BY_SEQ_STORE, {
            autoIncrement: true
          }).createIndex('_doc_id_rev', '_doc_id_rev', {
            unique: true
          });
          db.createObjectStore(ATTACH_STORE, {
            keyPath: 'digest'
          });
          db.createObjectStore(META_STORE, {
            keyPath: 'id',
            autoIncrement: false
          });
          db.createObjectStore(DETECT_BLOB_SUPPORT_STORE); // added in v2

          docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {
            unique: false
          }); // added in v3

          db.createObjectStore(LOCAL_STORE, {
            keyPath: '_id'
          }); // added in v4

          var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE, {
            autoIncrement: true
          });
          attAndSeqStore.createIndex('seq', 'seq');
          attAndSeqStore.createIndex('digestSeq', 'digestSeq', {
            unique: true
          });
        } // migration to version 2
        // unfortunately "deletedOrLocal" is a misnomer now that we no longer
        // store local docs in the main doc-store, but whaddyagonnado


        function addDeletedOrLocalIndex(txn, callback) {
          var docStore = txn.objectStore(DOC_STORE);
          docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {
            unique: false
          });

          docStore.openCursor().onsuccess = function (event) {
            var cursor = event.target.result;

            if (cursor) {
              var metadata = cursor.value;
              var deleted = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.isDeleted)(metadata);
              metadata.deletedOrLocal = deleted ? "1" : "0";
              docStore.put(metadata);
              cursor["continue"]();
            } else {
              callback();
            }
          };
        } // migration to version 3 (part 1)


        function createLocalStoreSchema(db) {
          db.createObjectStore(LOCAL_STORE, {
            keyPath: '_id'
          }).createIndex('_doc_id_rev', '_doc_id_rev', {
            unique: true
          });
        } // migration to version 3 (part 2)


        function migrateLocalStore(txn, cb) {
          var localStore = txn.objectStore(LOCAL_STORE);
          var docStore = txn.objectStore(DOC_STORE);
          var seqStore = txn.objectStore(BY_SEQ_STORE);
          var cursor = docStore.openCursor();

          cursor.onsuccess = function (event) {
            var cursor = event.target.result;

            if (cursor) {
              var metadata = cursor.value;
              var docId = metadata.id;
              var local = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.isLocalId)(docId);
              var rev = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.winningRev)(metadata);

              if (local) {
                var docIdRev = docId + "::" + rev; // remove all seq entries
                // associated with this docId

                var start = docId + "::";
                var end = docId + "::~";
                var index = seqStore.index('_doc_id_rev');
                var range = IDBKeyRange.bound(start, end, false, false);
                var seqCursor = index.openCursor(range);

                seqCursor.onsuccess = function (e) {
                  seqCursor = e.target.result;

                  if (!seqCursor) {
                    // done
                    docStore["delete"](cursor.primaryKey);
                    cursor["continue"]();
                  } else {
                    var data = seqCursor.value;

                    if (data._doc_id_rev === docIdRev) {
                      localStore.put(data);
                    }

                    seqStore["delete"](seqCursor.primaryKey);
                    seqCursor["continue"]();
                  }
                };
              } else {
                cursor["continue"]();
              }
            } else if (cb) {
              cb();
            }
          };
        } // migration to version 4 (part 1)


        function addAttachAndSeqStore(db) {
          var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE, {
            autoIncrement: true
          });
          attAndSeqStore.createIndex('seq', 'seq');
          attAndSeqStore.createIndex('digestSeq', 'digestSeq', {
            unique: true
          });
        } // migration to version 4 (part 2)


        function migrateAttsAndSeqs(txn, callback) {
          var seqStore = txn.objectStore(BY_SEQ_STORE);
          var attStore = txn.objectStore(ATTACH_STORE);
          var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE); // need to actually populate the table. this is the expensive part,
          // so as an optimization, check first that this database even
          // contains attachments

          var req = attStore.count();

          req.onsuccess = function (e) {
            var count = e.target.result;

            if (!count) {
              return callback(); // done
            }

            seqStore.openCursor().onsuccess = function (e) {
              var cursor = e.target.result;

              if (!cursor) {
                return callback(); // done
              }

              var doc = cursor.value;
              var seq = cursor.primaryKey;
              var atts = Object.keys(doc._attachments || {});
              var digestMap = {};

              for (var j = 0; j < atts.length; j++) {
                var att = doc._attachments[atts[j]];
                digestMap[att.digest] = true; // uniq digests, just in case
              }

              var digests = Object.keys(digestMap);

              for (j = 0; j < digests.length; j++) {
                var digest = digests[j];
                attAndSeqStore.put({
                  seq: seq,
                  digestSeq: digest + '::' + seq
                });
              }

              cursor["continue"]();
            };
          };
        } // migration to version 5
        // Instead of relying on on-the-fly migration of metadata,
        // this brings the doc-store to its modern form:
        // - metadata.winningrev
        // - metadata.seq
        // - stringify the metadata when storing it


        function migrateMetadata(txn) {
          function decodeMetadataCompat(storedObject) {
            if (!storedObject.data) {
              // old format, when we didn't store it stringified
              storedObject.deleted = storedObject.deletedOrLocal === '1';
              return storedObject;
            }

            return decodeMetadata(storedObject);
          } // ensure that every metadata has a winningRev and seq,
          // which was previously created on-the-fly but better to migrate


          var bySeqStore = txn.objectStore(BY_SEQ_STORE);
          var docStore = txn.objectStore(DOC_STORE);
          var cursor = docStore.openCursor();

          cursor.onsuccess = function (e) {
            var cursor = e.target.result;

            if (!cursor) {
              return; // done
            }

            var metadata = decodeMetadataCompat(cursor.value);
            metadata.winningRev = metadata.winningRev || (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.winningRev)(metadata);

            function fetchMetadataSeq() {
              // metadata.seq was added post-3.2.0, so if it's missing,
              // we need to fetch it manually
              var start = metadata.id + '::';
              var end = metadata.id + "::\uFFFF";
              var req = bySeqStore.index('_doc_id_rev').openCursor(IDBKeyRange.bound(start, end));
              var metadataSeq = 0;

              req.onsuccess = function (e) {
                var cursor = e.target.result;

                if (!cursor) {
                  metadata.seq = metadataSeq;
                  return onGetMetadataSeq();
                }

                var seq = cursor.primaryKey;

                if (seq > metadataSeq) {
                  metadataSeq = seq;
                }

                cursor["continue"]();
              };
            }

            function onGetMetadataSeq() {
              var metadataToStore = encodeMetadata(metadata, metadata.winningRev, metadata.deleted);
              var req = docStore.put(metadataToStore);

              req.onsuccess = function () {
                cursor["continue"]();
              };
            }

            if (metadata.seq) {
              return onGetMetadataSeq();
            }

            fetchMetadataSeq();
          };
        }

        api._remote = false;

        api.type = function () {
          return 'idb';
        };

        api._id = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.toPromise)(function (callback) {
          callback(null, api._meta.instanceId);
        });

        api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {
          idbBulkDocs(opts, req, reqOpts, api, idb, callback);
        }; // First we look up the metadata in the ids database, then we fetch the
        // current revision(s) from the by sequence store


        api._get = function idb_get(id, opts, callback) {
          var doc;
          var metadata;
          var err;
          var txn = opts.ctx;

          if (!txn) {
            var txnResult = openTransactionSafely(idb, [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');

            if (txnResult.error) {
              return callback(txnResult.error);
            }

            txn = txnResult.txn;
          }

          function finish() {
            callback(err, {
              doc: doc,
              metadata: metadata,
              ctx: txn
            });
          }

          txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {
            metadata = decodeMetadata(e.target.result); // we can determine the result here if:
            // 1. there is no such document
            // 2. the document is deleted and we don't ask about specific rev
            // When we ask with opts.rev we expect the answer to be either
            // doc (possibly with _deleted=true) or missing error

            if (!metadata) {
              err = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_DOC, 'missing');
              return finish();
            }

            var rev;

            if (!opts.rev) {
              rev = metadata.winningRev;
              var deleted = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.isDeleted)(metadata);

              if (deleted) {
                err = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_DOC, "deleted");
                return finish();
              }
            } else {
              rev = opts.latest ? (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.latest)(opts.rev, metadata) : opts.rev;
            }

            var objectStore = txn.objectStore(BY_SEQ_STORE);
            var key = metadata.id + '::' + rev;

            objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {
              doc = e.target.result;

              if (doc) {
                doc = decodeDoc(doc);
              }

              if (!doc) {
                err = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_DOC, 'missing');
                return finish();
              }

              finish();
            };
          };
        };

        api._getAttachment = function (docId, attachId, attachment, opts, callback) {
          var txn;

          if (opts.ctx) {
            txn = opts.ctx;
          } else {
            var txnResult = openTransactionSafely(idb, [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');

            if (txnResult.error) {
              return callback(txnResult.error);
            }

            txn = txnResult.txn;
          }

          var digest = attachment.digest;
          var type = attachment.content_type;

          txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {
            var body = e.target.result.body;
            readBlobData(body, type, opts.binary, function (blobData) {
              callback(null, blobData);
            });
          };
        };

        api._info = function idb_info(callback) {
          var updateSeq;
          var docCount;
          var txnResult = openTransactionSafely(idb, [META_STORE, BY_SEQ_STORE], 'readonly');

          if (txnResult.error) {
            return callback(txnResult.error);
          }

          var txn = txnResult.txn;

          txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
            docCount = e.target.result.docCount;
          };

          txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev').onsuccess = function (e) {
            var cursor = e.target.result;
            updateSeq = cursor ? cursor.key : 0;
          };

          txn.oncomplete = function () {
            callback(null, {
              doc_count: docCount,
              update_seq: updateSeq,
              // for debugging
              idb_attachment_format: api._meta.blobSupport ? 'binary' : 'base64'
            });
          };
        };

        api._allDocs = function idb_allDocs(opts, callback) {
          idbAllDocs(opts, idb, callback);
        };

        api._changes = function idbChanges(opts) {
          return changes(opts, api, dbName, idb);
        };

        api._close = function (callback) {
          // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close
          // "Returns immediately and closes the connection in a separate thread..."
          idb.close();
          cachedDBs["delete"](dbName);
          callback();
        };

        api._getRevisionTree = function (docId, callback) {
          var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');

          if (txnResult.error) {
            return callback(txnResult.error);
          }

          var txn = txnResult.txn;
          var req = txn.objectStore(DOC_STORE).get(docId);

          req.onsuccess = function (event) {
            var doc = decodeMetadata(event.target.result);

            if (!doc) {
              callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_DOC));
            } else {
              callback(null, doc.rev_tree);
            }
          };
        }; // This function removes revisions of document docId
        // which are listed in revs and sets this document
        // revision to to rev_tree


        api._doCompaction = function (docId, revs, callback) {
          var stores = [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE, ATTACH_AND_SEQ_STORE];
          var txnResult = openTransactionSafely(idb, stores, 'readwrite');

          if (txnResult.error) {
            return callback(txnResult.error);
          }

          var txn = txnResult.txn;
          var docStore = txn.objectStore(DOC_STORE);

          docStore.get(docId).onsuccess = function (event) {
            var metadata = decodeMetadata(event.target.result);
            (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_2__.traverseRevTree)(metadata.rev_tree, function (isLeaf, pos, revHash, ctx, opts) {
              var rev = pos + '-' + revHash;

              if (revs.indexOf(rev) !== -1) {
                opts.status = 'missing';
              }
            });
            compactRevs(revs, docId, txn);
            var winningRev$$1 = metadata.winningRev;
            var deleted = metadata.deleted;
            txn.objectStore(DOC_STORE).put(encodeMetadata(metadata, winningRev$$1, deleted));
          };

          txn.onabort = idbError(callback);

          txn.oncomplete = function () {
            callback();
          };
        };

        api._getLocal = function (id, callback) {
          var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');

          if (txnResult.error) {
            return callback(txnResult.error);
          }

          var tx = txnResult.txn;
          var req = tx.objectStore(LOCAL_STORE).get(id);
          req.onerror = idbError(callback);

          req.onsuccess = function (e) {
            var doc = e.target.result;

            if (!doc) {
              callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_DOC));
            } else {
              delete doc['_doc_id_rev']; // for backwards compat

              callback(null, doc);
            }
          };
        };

        api._putLocal = function (doc, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          delete doc._revisions; // ignore this, trust the rev

          var oldRev = doc._rev;
          var id = doc._id;

          if (!oldRev) {
            doc._rev = '0-1';
          } else {
            doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);
          }

          var tx = opts.ctx;
          var ret;

          if (!tx) {
            var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');

            if (txnResult.error) {
              return callback(txnResult.error);
            }

            tx = txnResult.txn;
            tx.onerror = idbError(callback);

            tx.oncomplete = function () {
              if (ret) {
                callback(null, ret);
              }
            };
          }

          var oStore = tx.objectStore(LOCAL_STORE);
          var req;

          if (oldRev) {
            req = oStore.get(id);

            req.onsuccess = function (e) {
              var oldDoc = e.target.result;

              if (!oldDoc || oldDoc._rev !== oldRev) {
                callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.REV_CONFLICT));
              } else {
                // update
                var req = oStore.put(doc);

                req.onsuccess = function () {
                  ret = {
                    ok: true,
                    id: doc._id,
                    rev: doc._rev
                  };

                  if (opts.ctx) {
                    // return immediately
                    callback(null, ret);
                  }
                };
              }
            };
          } else {
            // new doc
            req = oStore.add(doc);

            req.onerror = function (e) {
              // constraint error, already exists
              callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.REV_CONFLICT));
              e.preventDefault(); // avoid transaction abort

              e.stopPropagation(); // avoid transaction onerror
            };

            req.onsuccess = function () {
              ret = {
                ok: true,
                id: doc._id,
                rev: doc._rev
              };

              if (opts.ctx) {
                // return immediately
                callback(null, ret);
              }
            };
          }
        };

        api._removeLocal = function (doc, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts;
            opts = {};
          }

          var tx = opts.ctx;

          if (!tx) {
            var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');

            if (txnResult.error) {
              return callback(txnResult.error);
            }

            tx = txnResult.txn;

            tx.oncomplete = function () {
              if (ret) {
                callback(null, ret);
              }
            };
          }

          var ret;
          var id = doc._id;
          var oStore = tx.objectStore(LOCAL_STORE);
          var req = oStore.get(id);
          req.onerror = idbError(callback);

          req.onsuccess = function (e) {
            var oldDoc = e.target.result;

            if (!oldDoc || oldDoc._rev !== doc._rev) {
              callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_DOC));
            } else {
              oStore["delete"](id);
              ret = {
                ok: true,
                id: id,
                rev: '0-0'
              };

              if (opts.ctx) {
                // return immediately
                callback(null, ret);
              }
            }
          };
        };

        api._destroy = function (opts, callback) {
          changesHandler$1.removeAllListeners(dbName); //Close open request for "dbName" database to fix ie delay.

          var openReq = openReqList.get(dbName);

          if (openReq && openReq.result) {
            openReq.result.close();
            cachedDBs["delete"](dbName);
          }

          var req = indexedDB.deleteDatabase(dbName);

          req.onsuccess = function () {
            //Remove open request from the list.
            openReqList["delete"](dbName);

            if ((0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.hasLocalStorage)() && dbName in localStorage) {
              delete localStorage[dbName];
            }

            callback(null, {
              'ok': true
            });
          };

          req.onerror = idbError(callback);
        };

        var cached = cachedDBs.get(dbName);

        if (cached) {
          idb = cached.idb;
          api._meta = cached.global;
          return (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.nextTick)(function () {
            callback(null, api);
          });
        }

        var req = indexedDB.open(dbName, ADAPTER_VERSION);
        openReqList.set(dbName, req);

        req.onupgradeneeded = function (e) {
          var db = e.target.result;

          if (e.oldVersion < 1) {
            return createSchema(db); // new db, initial schema
          } // do migrations


          var txn = e.currentTarget.transaction; // these migrations have to be done in this function, before
          // control is returned to the event loop, because IndexedDB

          if (e.oldVersion < 3) {
            createLocalStoreSchema(db); // v2 -> v3
          }

          if (e.oldVersion < 4) {
            addAttachAndSeqStore(db); // v3 -> v4
          }

          var migrations = [addDeletedOrLocalIndex, // v1 -> v2
          migrateLocalStore, // v2 -> v3
          migrateAttsAndSeqs, // v3 -> v4
          migrateMetadata // v4 -> v5
          ];
          var i = e.oldVersion;

          function next() {
            var migration = migrations[i - 1];
            i++;

            if (migration) {
              migration(txn, next);
            }
          }

          next();
        };

        req.onsuccess = function (e) {
          idb = e.target.result;

          idb.onversionchange = function () {
            idb.close();
            cachedDBs["delete"](dbName);
          };

          idb.onabort = function (e) {
            (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.guardedConsole)('error', 'Database has a global failure', e.target.error);
            idb.close();
            cachedDBs["delete"](dbName);
          }; // Do a few setup operations (in parallel as much as possible):
          // 1. Fetch meta doc
          // 2. Check blob support
          // 3. Calculate docCount
          // 4. Generate an instanceId if necessary
          // 5. Store docCount and instanceId on meta doc


          var txn = idb.transaction([META_STORE, DETECT_BLOB_SUPPORT_STORE, DOC_STORE], 'readwrite');
          var storedMetaDoc = false;
          var metaDoc;
          var docCount;
          var blobSupport;
          var instanceId;

          function completeSetup() {
            if (typeof blobSupport === 'undefined' || !storedMetaDoc) {
              return;
            }

            api._meta = {
              name: dbName,
              instanceId: instanceId,
              blobSupport: blobSupport
            };
            cachedDBs.set(dbName, {
              idb: idb,
              global: api._meta
            });
            callback(null, api);
          }

          function storeMetaDocIfReady() {
            if (typeof docCount === 'undefined' || typeof metaDoc === 'undefined') {
              return;
            }

            var instanceKey = dbName + '_id';

            if (instanceKey in metaDoc) {
              instanceId = metaDoc[instanceKey];
            } else {
              metaDoc[instanceKey] = instanceId = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.uuid)();
            }

            metaDoc.docCount = docCount;
            txn.objectStore(META_STORE).put(metaDoc);
          } //
          // fetch or generate the instanceId
          //


          txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
            metaDoc = e.target.result || {
              id: META_STORE
            };
            storeMetaDocIfReady();
          }; //
          // countDocs
          //


          countDocs(txn, function (count) {
            docCount = count;
            storeMetaDocIfReady();
          }); //
          // check blob support
          //

          if (!blobSupportPromise) {
            // make sure blob support is only checked once
            blobSupportPromise = checkBlobSupport(txn);
          }

          blobSupportPromise.then(function (val) {
            blobSupport = val;
            completeSetup();
          }); // only when the metadata put transaction has completed,
          // consider the setup done

          txn.oncomplete = function () {
            storedMetaDoc = true;
            completeSetup();
          };

          txn.onabort = idbError(callback);
        };

        req.onerror = function (e) {
          var msg = e.target.error && e.target.error.message;

          if (!msg) {
            msg = 'Failed to open indexedDB, are you in private browsing mode?';
          } else if (msg.indexOf("stored database is a higher version") !== -1) {
            msg = new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter');
          }

          (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_6__.guardedConsole)('error', msg);
          callback((0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.IDB_ERROR, msg));
        };
      }

      IdbPouch.valid = function () {
        // Following #7085 buggy idb versions (typically Safari < 10.1) are
        // considered valid.
        // On Firefox SecurityError is thrown while referencing indexedDB if cookies
        // are not allowed. `typeof indexedDB` also triggers the error.
        try {
          // some outdated implementations of IDB that appear on Samsung
          // and HTC Android devices <4.4 are missing IDBKeyRange
          return typeof indexedDB !== 'undefined' && typeof IDBKeyRange !== 'undefined';
        } catch (e) {
          return false;
        }
      };

      function index(PouchDB) {
        PouchDB.adapter('idb', IdbPouch, true);
      }
      /* harmony default export */


      __webpack_exports__["default"] = index;
      /***/
    },

    /***/
    53875: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "invalidIdError": function invalidIdError() {
          return (
            /* reexport safe */
            pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__.invalidIdError
          );
        },

        /* harmony export */
        "normalizeDdocFunctionName": function normalizeDdocFunctionName() {
          return (
            /* reexport safe */
            pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__.normalizeDdocFunctionName
          );
        },

        /* harmony export */
        "parseDdocFunctionName": function parseDdocFunctionName() {
          return (
            /* reexport safe */
            pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__.parseDdocFunctionName
          );
        },

        /* harmony export */
        "isDeleted": function isDeleted() {
          return (
            /* reexport safe */
            pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isDeleted
          );
        },

        /* harmony export */
        "isLocalId": function isLocalId() {
          return (
            /* reexport safe */
            pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isLocalId
          );
        },

        /* harmony export */
        "allDocsKeysQuery": function allDocsKeysQuery() {
          return (
            /* binding */
            _allDocsKeysQuery
          );
        },

        /* harmony export */
        "parseDoc": function parseDoc() {
          return (
            /* binding */
            _parseDoc
          );
        },

        /* harmony export */
        "preprocessAttachments": function preprocessAttachments() {
          return (
            /* binding */
            _preprocessAttachments
          );
        },

        /* harmony export */
        "processDocs": function processDocs() {
          return (
            /* binding */
            _processDocs
          );
        },

        /* harmony export */
        "updateDoc": function updateDoc() {
          return (
            /* binding */
            _updateDoc
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! pouchdb-utils */
      94084);
      /* harmony import */


      var pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! pouchdb-binary-utils */
      84847);
      /* harmony import */


      var pouchdb_md5__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! pouchdb-md5 */
      80733);
      /* harmony import */


      var pouchdb_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! pouchdb-collections */
      31793);
      /* harmony import */


      var pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! pouchdb-errors */
      44090);
      /* harmony import */


      var pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! pouchdb-merge */
      29070);

      function _allDocsKeysQuery(api, opts) {
        var keys = opts.keys;
        var finalResults = {
          offset: opts.skip
        };
        return Promise.all(keys.map(function (key) {
          var subOpts = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__.assign)({
            key: key,
            deleted: 'ok'
          }, opts);
          ['limit', 'skip', 'keys'].forEach(function (optKey) {
            delete subOpts[optKey];
          });
          return new Promise(function (resolve, reject) {
            api._allDocs(subOpts, function (err, res) {
              /* istanbul ignore if */
              if (err) {
                return reject(err);
              }
              /* istanbul ignore if */


              if (opts.update_seq && res.update_seq !== undefined) {
                finalResults.update_seq = res.update_seq;
              }

              finalResults.total_rows = res.total_rows;
              resolve(res.rows[0] || {
                key: key,
                error: 'not_found'
              });
            });
          });
        })).then(function (results) {
          finalResults.rows = results;
          return finalResults;
        });
      }

      function toObject(array) {
        return array.reduce(function (obj, item) {
          obj[item] = true;
          return obj;
        }, {});
      } // List of top level reserved words for doc


      var reservedWords = toObject(['_id', '_rev', '_attachments', '_deleted', '_revisions', '_revs_info', '_conflicts', '_deleted_conflicts', '_local_seq', '_rev_tree', //replication documents
      '_replication_id', '_replication_state', '_replication_state_time', '_replication_state_reason', '_replication_stats', // Specific to Couchbase Sync Gateway
      '_removed']); // List of reserved words that should end up the document

      var dataWords = toObject(['_attachments', //replication documents
      '_replication_id', '_replication_state', '_replication_state_time', '_replication_state_reason', '_replication_stats']);

      function parseRevisionInfo(rev$$1) {
        if (!/^\d+-/.test(rev$$1)) {
          return (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.INVALID_REV);
        }

        var idx = rev$$1.indexOf('-');
        var left = rev$$1.substring(0, idx);
        var right = rev$$1.substring(idx + 1);
        return {
          prefix: parseInt(left, 10),
          id: right
        };
      }

      function makeRevTreeFromRevisions(revisions, opts) {
        var pos = revisions.start - revisions.ids.length + 1;
        var revisionIds = revisions.ids;
        var ids = [revisionIds[0], opts, []];

        for (var i = 1, len = revisionIds.length; i < len; i++) {
          ids = [revisionIds[i], {
            status: 'missing'
          }, [ids]];
        }

        return [{
          pos: pos,
          ids: ids
        }];
      } // Preprocess documents, parse their revisions, assign an id and a
      // revision for new writes that are missing them, etc


      function _parseDoc(doc, newEdits, dbOpts) {
        if (!dbOpts) {
          dbOpts = {
            deterministic_revs: true
          };
        }

        var nRevNum;
        var newRevId;
        var revInfo;
        var opts = {
          status: 'available'
        };

        if (doc._deleted) {
          opts.deleted = true;
        }

        if (newEdits) {
          if (!doc._id) {
            doc._id = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__.uuid)();
          }

          newRevId = (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__.rev)(doc, dbOpts.deterministic_revs);

          if (doc._rev) {
            revInfo = parseRevisionInfo(doc._rev);

            if (revInfo.error) {
              return revInfo;
            }

            doc._rev_tree = [{
              pos: revInfo.prefix,
              ids: [revInfo.id, {
                status: 'missing'
              }, [[newRevId, opts, []]]]
            }];
            nRevNum = revInfo.prefix + 1;
          } else {
            doc._rev_tree = [{
              pos: 1,
              ids: [newRevId, opts, []]
            }];
            nRevNum = 1;
          }
        } else {
          if (doc._revisions) {
            doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);
            nRevNum = doc._revisions.start;
            newRevId = doc._revisions.ids[0];
          }

          if (!doc._rev_tree) {
            revInfo = parseRevisionInfo(doc._rev);

            if (revInfo.error) {
              return revInfo;
            }

            nRevNum = revInfo.prefix;
            newRevId = revInfo.id;
            doc._rev_tree = [{
              pos: nRevNum,
              ids: [newRevId, opts, []]
            }];
          }
        }

        (0, pouchdb_utils__WEBPACK_IMPORTED_MODULE_0__.invalidIdError)(doc._id);
        doc._rev = nRevNum + '-' + newRevId;
        var result = {
          metadata: {},
          data: {}
        };

        for (var key in doc) {
          /* istanbul ignore else */
          if (Object.prototype.hasOwnProperty.call(doc, key)) {
            var specialKey = key[0] === '_';

            if (specialKey && !reservedWords[key]) {
              var error = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.DOC_VALIDATION, key);
              error.message = pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.DOC_VALIDATION.message + ': ' + key;
              throw error;
            } else if (specialKey && !dataWords[key]) {
              result.metadata[key.slice(1)] = doc[key];
            } else {
              result.data[key] = doc[key];
            }
          }
        }

        return result;
      }

      function parseBase64(data) {
        try {
          return (0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_1__.atob)(data);
        } catch (e) {
          var err = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.BAD_ARG, 'Attachment is not a valid base64 string');
          return {
            error: err
          };
        }
      }

      function preprocessString(att, blobType, callback) {
        var asBinary = parseBase64(att.data);

        if (asBinary.error) {
          return callback(asBinary.error);
        }

        att.length = asBinary.length;

        if (blobType === 'blob') {
          att.data = (0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_1__.binaryStringToBlobOrBuffer)(asBinary, att.content_type);
        } else if (blobType === 'base64') {
          att.data = (0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_1__.btoa)(asBinary);
        } else {
          // binary
          att.data = asBinary;
        }

        (0, pouchdb_md5__WEBPACK_IMPORTED_MODULE_2__.binaryMd5)(asBinary, function (result) {
          att.digest = 'md5-' + result;
          callback();
        });
      }

      function preprocessBlob(att, blobType, callback) {
        (0, pouchdb_md5__WEBPACK_IMPORTED_MODULE_2__.binaryMd5)(att.data, function (md5) {
          att.digest = 'md5-' + md5; // size is for blobs (browser), length is for buffers (node)

          att.length = att.data.size || att.data.length || 0;

          if (blobType === 'binary') {
            (0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_1__.blobOrBufferToBinaryString)(att.data, function (binString) {
              att.data = binString;
              callback();
            });
          } else if (blobType === 'base64') {
            (0, pouchdb_binary_utils__WEBPACK_IMPORTED_MODULE_1__.blobOrBufferToBase64)(att.data, function (b64) {
              att.data = b64;
              callback();
            });
          } else {
            callback();
          }
        });
      }

      function preprocessAttachment(att, blobType, callback) {
        if (att.stub) {
          return callback();
        }

        if (typeof att.data === 'string') {
          // input is a base64 string
          preprocessString(att, blobType, callback);
        } else {
          // input is a blob
          preprocessBlob(att, blobType, callback);
        }
      }

      function _preprocessAttachments(docInfos, blobType, callback) {
        if (!docInfos.length) {
          return callback();
        }

        var docv = 0;
        var overallErr;
        docInfos.forEach(function (docInfo) {
          var attachments = docInfo.data && docInfo.data._attachments ? Object.keys(docInfo.data._attachments) : [];
          var recv = 0;

          if (!attachments.length) {
            return done();
          }

          function processedAttachment(err) {
            overallErr = err;
            recv++;

            if (recv === attachments.length) {
              done();
            }
          }

          for (var key in docInfo.data._attachments) {
            if (docInfo.data._attachments.hasOwnProperty(key)) {
              preprocessAttachment(docInfo.data._attachments[key], blobType, processedAttachment);
            }
          }
        });

        function done() {
          docv++;

          if (docInfos.length === docv) {
            if (overallErr) {
              callback(overallErr);
            } else {
              callback();
            }
          }
        }
      }

      function _updateDoc(revLimit, prev, docInfo, results, i, cb, writeDoc, newEdits) {
        if ((0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.revExists)(prev.rev_tree, docInfo.metadata.rev) && !newEdits) {
          results[i] = docInfo;
          return cb();
        } // sometimes this is pre-calculated. historically not always


        var previousWinningRev = prev.winningRev || (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.winningRev)(prev);
        var previouslyDeleted = 'deleted' in prev ? prev.deleted : (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isDeleted)(prev, previousWinningRev);
        var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted : (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isDeleted)(docInfo.metadata);
        var isRoot = /^1-/.test(docInfo.metadata.rev);

        if (previouslyDeleted && !deleted && newEdits && isRoot) {
          var newDoc = docInfo.data;
          newDoc._rev = previousWinningRev;
          newDoc._id = docInfo.metadata.id;
          docInfo = _parseDoc(newDoc, newEdits);
        }

        var merged = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.merge)(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);
        var inConflict = newEdits && (previouslyDeleted && deleted && merged.conflicts !== 'new_leaf' || !previouslyDeleted && merged.conflicts !== 'new_leaf' || previouslyDeleted && !deleted && merged.conflicts === 'new_branch');

        if (inConflict) {
          var err = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.REV_CONFLICT);
          results[i] = err;
          return cb();
        }

        var newRev = docInfo.metadata.rev;
        docInfo.metadata.rev_tree = merged.tree;
        docInfo.stemmedRevs = merged.stemmedRevs || [];
        /* istanbul ignore else */

        if (prev.rev_map) {
          docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb
        } // recalculate


        var winningRev$$1 = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.winningRev)(docInfo.metadata);
        var winningRevIsDeleted = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isDeleted)(docInfo.metadata, winningRev$$1); // calculate the total number of documents that were added/removed,
        // from the perspective of total_rows/doc_count

        var delta = previouslyDeleted === winningRevIsDeleted ? 0 : previouslyDeleted < winningRevIsDeleted ? -1 : 1;
        var newRevIsDeleted;

        if (newRev === winningRev$$1) {
          // if the new rev is the same as the winning rev, we can reuse that value
          newRevIsDeleted = winningRevIsDeleted;
        } else {
          // if they're not the same, then we need to recalculate
          newRevIsDeleted = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isDeleted)(docInfo.metadata, newRev);
        }

        writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted, true, delta, i, cb);
      }

      function rootIsMissing(docInfo) {
        return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';
      }

      function _processDocs(revLimit, docInfos, api, fetchedDocs, tx, results, writeDoc, opts, overallCallback) {
        // Default to 1000 locally
        revLimit = revLimit || 1000;

        function insertDoc(docInfo, resultsIdx, callback) {
          // Cant insert new deleted documents
          var winningRev$$1 = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.winningRev)(docInfo.metadata);
          var deleted = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isDeleted)(docInfo.metadata, winningRev$$1);

          if ('was_delete' in opts && deleted) {
            results[resultsIdx] = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.MISSING_DOC, 'deleted');
            return callback();
          } // 4712 - detect whether a new document was inserted with a _rev


          var inConflict = newEdits && rootIsMissing(docInfo);

          if (inConflict) {
            var err = (0, pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.createError)(pouchdb_errors__WEBPACK_IMPORTED_MODULE_4__.REV_CONFLICT);
            results[resultsIdx] = err;
            return callback();
          }

          var delta = deleted ? 0 : 1;
          writeDoc(docInfo, winningRev$$1, deleted, deleted, false, delta, resultsIdx, callback);
        }

        var newEdits = opts.new_edits;
        var idsToDocs = new pouchdb_collections__WEBPACK_IMPORTED_MODULE_3__.Map();
        var docsDone = 0;
        var docsToDo = docInfos.length;

        function checkAllDocsDone() {
          if (++docsDone === docsToDo && overallCallback) {
            overallCallback();
          }
        }

        docInfos.forEach(function (currentDoc, resultsIdx) {
          if (currentDoc._id && (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.isLocalId)(currentDoc._id)) {
            var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';
            api[fun](currentDoc, {
              ctx: tx
            }, function (err, res) {
              results[resultsIdx] = err || res;
              checkAllDocsDone();
            });
            return;
          }

          var id = currentDoc.metadata.id;

          if (idsToDocs.has(id)) {
            docsToDo--; // duplicate

            idsToDocs.get(id).push([currentDoc, resultsIdx]);
          } else {
            idsToDocs.set(id, [[currentDoc, resultsIdx]]);
          }
        }); // in the case of new_edits, the user can provide multiple docs
        // with the same id. these need to be processed sequentially

        idsToDocs.forEach(function (docs, id) {
          var numDone = 0;

          function docWritten() {
            if (++numDone < docs.length) {
              nextDoc();
            } else {
              checkAllDocsDone();
            }
          }

          function nextDoc() {
            var value = docs[numDone];
            var currentDoc = value[0];
            var resultsIdx = value[1];

            if (fetchedDocs.has(id)) {
              _updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results, resultsIdx, docWritten, writeDoc, newEdits);
            } else {
              // Ensure stemming applies to new writes as well
              var merged = (0, pouchdb_merge__WEBPACK_IMPORTED_MODULE_5__.merge)([], currentDoc.metadata.rev_tree[0], revLimit);
              currentDoc.metadata.rev_tree = merged.tree;
              currentDoc.stemmedRevs = merged.stemmedRevs || [];
              insertDoc(currentDoc, resultsIdx, docWritten);
            }
          }

          nextDoc();
        });
      }
      /***/

    },

    /***/
    14477: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "safeJsonParse": function safeJsonParse() {
          return (
            /* binding */
            _safeJsonParse
          );
        },

        /* harmony export */
        "safeJsonStringify": function safeJsonStringify() {
          return (
            /* binding */
            _safeJsonStringify
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var vuvuzela__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! vuvuzela */
      28578);

      function _safeJsonParse(str) {
        // This try/catch guards against stack overflow errors.
        // JSON.parse() is faster than vuvuzela.parse() but vuvuzela
        // cannot overflow.
        try {
          return JSON.parse(str);
        } catch (e) {
          /* istanbul ignore next */
          return vuvuzela__WEBPACK_IMPORTED_MODULE_0__.parse(str);
        }
      }

      function _safeJsonStringify(json) {
        try {
          return JSON.stringify(json);
        } catch (e) {
          /* istanbul ignore next */
          return vuvuzela__WEBPACK_IMPORTED_MODULE_0__.stringify(json);
        }
      }
      /***/

    },

    /***/
    28578: function _(__unused_webpack_module, exports) {
      /**
       * Stringify/parse functions that don't operate
       * recursively, so they avoid call stack exceeded
       * errors.
       */
      exports.stringify = function stringify(input) {
        var queue = [];
        queue.push({
          obj: input
        });
        var res = '';
        var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;

        while (next = queue.pop()) {
          obj = next.obj;
          prefix = next.prefix || '';
          val = next.val || '';
          res += prefix;

          if (val) {
            res += val;
          } else if (typeof obj !== 'object') {
            res += typeof obj === 'undefined' ? null : JSON.stringify(obj);
          } else if (obj === null) {
            res += 'null';
          } else if (Array.isArray(obj)) {
            queue.push({
              val: ']'
            });

            for (i = obj.length - 1; i >= 0; i--) {
              arrayPrefix = i === 0 ? '' : ',';
              queue.push({
                obj: obj[i],
                prefix: arrayPrefix
              });
            }

            queue.push({
              val: '['
            });
          } else {
            // object
            keys = [];

            for (k in obj) {
              if (obj.hasOwnProperty(k)) {
                keys.push(k);
              }
            }

            queue.push({
              val: '}'
            });

            for (i = keys.length - 1; i >= 0; i--) {
              key = keys[i];
              value = obj[key];
              objPrefix = i > 0 ? ',' : '';
              objPrefix += JSON.stringify(key) + ':';
              queue.push({
                obj: value,
                prefix: objPrefix
              });
            }

            queue.push({
              val: '{'
            });
          }
        }

        return res;
      }; // Convenience function for the parse function.
      // This pop function is basically copied from
      // pouchCollate.parseIndexableString


      function pop(obj, stack, metaStack) {
        var lastMetaElement = metaStack[metaStack.length - 1];

        if (obj === lastMetaElement.element) {
          // popping a meta-element, e.g. an object whose value is another object
          metaStack.pop();
          lastMetaElement = metaStack[metaStack.length - 1];
        }

        var element = lastMetaElement.element;
        var lastElementIndex = lastMetaElement.index;

        if (Array.isArray(element)) {
          element.push(obj);
        } else if (lastElementIndex === stack.length - 2) {
          // obj with key+value
          var key = stack.pop();
          element[key] = obj;
        } else {
          stack.push(obj); // obj with key only
        }
      }

      exports.parse = function (str) {
        var stack = [];
        var metaStack = []; // stack for arrays and objects

        var i = 0;
        var collationIndex, parsedNum, numChar;
        var parsedString, lastCh, numConsecutiveSlashes, ch;
        var arrayElement, objElement;

        while (true) {
          collationIndex = str[i++];

          if (collationIndex === '}' || collationIndex === ']' || typeof collationIndex === 'undefined') {
            if (stack.length === 1) {
              return stack.pop();
            } else {
              pop(stack.pop(), stack, metaStack);
              continue;
            }
          }

          switch (collationIndex) {
            case ' ':
            case '\t':
            case '\n':
            case ':':
            case ',':
              break;

            case 'n':
              i += 3; // 'ull'

              pop(null, stack, metaStack);
              break;

            case 't':
              i += 3; // 'rue'

              pop(true, stack, metaStack);
              break;

            case 'f':
              i += 4; // 'alse'

              pop(false, stack, metaStack);
              break;

            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case '-':
              parsedNum = '';
              i--;

              while (true) {
                numChar = str[i++];

                if (/[\d\.\-e\+]/.test(numChar)) {
                  parsedNum += numChar;
                } else {
                  i--;
                  break;
                }
              }

              pop(parseFloat(parsedNum), stack, metaStack);
              break;

            case '"':
              parsedString = '';
              lastCh = void 0;
              numConsecutiveSlashes = 0;

              while (true) {
                ch = str[i++];

                if (ch !== '"' || lastCh === '\\' && numConsecutiveSlashes % 2 === 1) {
                  parsedString += ch;
                  lastCh = ch;

                  if (lastCh === '\\') {
                    numConsecutiveSlashes++;
                  } else {
                    numConsecutiveSlashes = 0;
                  }
                } else {
                  break;
                }
              }

              pop(JSON.parse('"' + parsedString + '"'), stack, metaStack);
              break;

            case '[':
              arrayElement = {
                element: [],
                index: stack.length
              };
              stack.push(arrayElement.element);
              metaStack.push(arrayElement);
              break;

            case '{':
              objElement = {
                element: {},
                index: stack.length
              };
              stack.push(objElement.element);
              metaStack.push(objElement);
              break;

            default:
              throw new Error('unexpectedly reached end of input: ' + collationIndex);
          }
        }
      };
      /***/

    }
  }]);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,