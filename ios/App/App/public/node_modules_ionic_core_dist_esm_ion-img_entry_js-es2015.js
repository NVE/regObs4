"use strict";
(self["webpackChunkregobs4"] = self["webpackChunkregobs4"] || []).push([["node_modules_ionic_core_dist_esm_ion-img_entry_js"],{

/***/ 98107:
/*!************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-img.entry.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_img": function() { return /* binding */ Img; }
/* harmony export */ });
/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ 76842);
/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ionic-global-63a97a32.js */ 33124);


const imgCss = ":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}";
const Img = class {
  constructor(hostRef) {
    (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ionImgWillLoad = (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionImgWillLoad", 7);
    this.ionImgDidLoad = (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionImgDidLoad", 7);
    this.ionError = (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionError", 7);

    this.onLoad = () => {
      this.ionImgDidLoad.emit();
    };

    this.onError = () => {
      this.ionError.emit();
    };
  }

  srcChanged() {
    this.addIO();
  }

  componentDidLoad() {
    this.addIO();
  }

  addIO() {
    if (this.src === undefined) {
      return;
    }

    if (typeof window !== 'undefined' && 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'isIntersecting' in window.IntersectionObserverEntry.prototype) {
      this.removeIO();
      this.io = new IntersectionObserver(data => {
        /**
         * On slower devices, it is possible for an intersection observer entry to contain multiple
         * objects in the array. This happens when quickly scrolling an image into view and then out of
         * view. In this case, the last object represents the current state of the component.
         */
        if (data[data.length - 1].isIntersecting) {
          this.load();
          this.removeIO();
        }
      });
      this.io.observe(this.el);
    } else {
      // fall back to setTimeout for Safari and IE
      setTimeout(() => this.load(), 200);
    }
  }

  load() {
    this.loadError = this.onError;
    this.loadSrc = this.src;
    this.ionImgWillLoad.emit();
  }

  removeIO() {
    if (this.io) {
      this.io.disconnect();
      this.io = undefined;
    }
  }

  render() {
    return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.H, {
      class: (0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_1__.b)(this)
    }, (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", {
      decoding: "async",
      src: this.loadSrc,
      alt: this.alt,
      onLoad: this.onLoad,
      onError: this.loadError,
      part: "image"
    }));
  }

  get el() {
    return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__.i)(this);
  }

  static get watchers() {
    return {
      "src": ["srcChanged"]
    };
  }

};
Img.style = imgCss;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLWltZ19lbnRyeV9qcy1lczIwMTUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBLE1BQU1XLE1BQU0sR0FBRyxvTUFBZjtBQUVBLE1BQU1DLEdBQUcsR0FBRyxNQUFNO0FBQ2hCQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQmIsSUFBQUEscURBQWdCLENBQUMsSUFBRCxFQUFPYSxPQUFQLENBQWhCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQloscURBQVcsQ0FBQyxJQUFELEVBQU8sZ0JBQVAsRUFBeUIsQ0FBekIsQ0FBakM7QUFDQSxTQUFLYSxhQUFMLEdBQXFCYixxREFBVyxDQUFDLElBQUQsRUFBTyxlQUFQLEVBQXdCLENBQXhCLENBQWhDO0FBQ0EsU0FBS2MsUUFBTCxHQUFnQmQscURBQVcsQ0FBQyxJQUFELEVBQU8sVUFBUCxFQUFtQixDQUFuQixDQUEzQjs7QUFDQSxTQUFLZSxNQUFMLEdBQWMsTUFBTTtBQUNsQixXQUFLRixhQUFMLENBQW1CRyxJQUFuQjtBQUNELEtBRkQ7O0FBR0EsU0FBS0MsT0FBTCxHQUFlLE1BQU07QUFDbkIsV0FBS0gsUUFBTCxDQUFjRSxJQUFkO0FBQ0QsS0FGRDtBQUdEOztBQUNERSxFQUFBQSxVQUFVLEdBQUc7QUFDWCxTQUFLQyxLQUFMO0FBQ0Q7O0FBQ0RDLEVBQUFBLGdCQUFnQixHQUFHO0FBQ2pCLFNBQUtELEtBQUw7QUFDRDs7QUFDREEsRUFBQUEsS0FBSyxHQUFHO0FBQ04sUUFBSSxLQUFLRSxHQUFMLEtBQWFDLFNBQWpCLEVBQTRCO0FBQzFCO0FBQ0Q7O0FBQ0QsUUFBSSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQ0YsMEJBQTBCQSxNQUR4QixJQUVGLCtCQUErQkEsTUFGN0IsSUFHRixvQkFBb0JBLE1BQU0sQ0FBQ0MseUJBQVAsQ0FBaUNDLFNBSHZELEVBR2tFO0FBQ2hFLFdBQUtDLFFBQUw7QUFDQSxXQUFLQyxFQUFMLEdBQVUsSUFBSUMsb0JBQUosQ0FBeUJDLElBQUksSUFBSTtBQUN6QztBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ1EsWUFBSUEsSUFBSSxDQUFDQSxJQUFJLENBQUNDLE1BQUwsR0FBYyxDQUFmLENBQUosQ0FBc0JDLGNBQTFCLEVBQTBDO0FBQ3hDLGVBQUtDLElBQUw7QUFDQSxlQUFLTixRQUFMO0FBQ0Q7QUFDRixPQVZTLENBQVY7QUFXQSxXQUFLQyxFQUFMLENBQVFNLE9BQVIsQ0FBZ0IsS0FBS0MsRUFBckI7QUFDRCxLQWpCRCxNQWtCSztBQUNIO0FBQ0FDLE1BQUFBLFVBQVUsQ0FBQyxNQUFNLEtBQUtILElBQUwsRUFBUCxFQUFvQixHQUFwQixDQUFWO0FBQ0Q7QUFDRjs7QUFDREEsRUFBQUEsSUFBSSxHQUFHO0FBQ0wsU0FBS0ksU0FBTCxHQUFpQixLQUFLbkIsT0FBdEI7QUFDQSxTQUFLb0IsT0FBTCxHQUFlLEtBQUtoQixHQUFwQjtBQUNBLFNBQUtULGNBQUwsQ0FBb0JJLElBQXBCO0FBQ0Q7O0FBQ0RVLEVBQUFBLFFBQVEsR0FBRztBQUNULFFBQUksS0FBS0MsRUFBVCxFQUFhO0FBQ1gsV0FBS0EsRUFBTCxDQUFRVyxVQUFSO0FBQ0EsV0FBS1gsRUFBTCxHQUFVTCxTQUFWO0FBQ0Q7QUFDRjs7QUFDRGlCLEVBQUFBLE1BQU0sR0FBRztBQUNQLFdBQVF0QyxxREFBQyxDQUFDRSxpREFBRCxFQUFPO0FBQUVxQyxNQUFBQSxLQUFLLEVBQUVqQyw0REFBVSxDQUFDLElBQUQ7QUFBbkIsS0FBUCxFQUFvQ04scURBQUMsQ0FBQyxLQUFELEVBQVE7QUFBRXdDLE1BQUFBLFFBQVEsRUFBRSxPQUFaO0FBQXFCcEIsTUFBQUEsR0FBRyxFQUFFLEtBQUtnQixPQUEvQjtBQUF3Q0ssTUFBQUEsR0FBRyxFQUFFLEtBQUtBLEdBQWxEO0FBQXVEM0IsTUFBQUEsTUFBTSxFQUFFLEtBQUtBLE1BQXBFO0FBQTRFRSxNQUFBQSxPQUFPLEVBQUUsS0FBS21CLFNBQTFGO0FBQXFHTyxNQUFBQSxJQUFJLEVBQUU7QUFBM0csS0FBUixDQUFyQyxDQUFUO0FBQ0Q7O0FBQ0ssTUFBRlQsRUFBRSxHQUFHO0FBQUUsV0FBTzdCLHFEQUFVLENBQUMsSUFBRCxDQUFqQjtBQUEwQjs7QUFDbEIsYUFBUnVDLFFBQVEsR0FBRztBQUFFLFdBQU87QUFDN0IsYUFBTyxDQUFDLFlBQUQ7QUFEc0IsS0FBUDtBQUVwQjs7QUEvRFksQ0FBbEI7QUFpRUFuQyxHQUFHLENBQUNvQyxLQUFKLEdBQVlyQyxNQUFaIiwic291cmNlcyI6WyIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9pb24taW1nLmVudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgZSBhcyBjcmVhdGVFdmVudCwgaCwgSCBhcyBIb3N0LCBpIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LTdhOGI3YTFjLmpzJztcbmltcG9ydCB7IGIgYXMgZ2V0SW9uTW9kZSB9IGZyb20gJy4vaW9uaWMtZ2xvYmFsLTYzYTk3YTMyLmpzJztcblxuY29uc3QgaW1nQ3NzID0gXCI6aG9zdHtkaXNwbGF5OmJsb2NrOy1vLW9iamVjdC1maXQ6Y29udGFpbjtvYmplY3QtZml0OmNvbnRhaW59aW1ne2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTstby1vYmplY3QtZml0OmluaGVyaXQ7b2JqZWN0LWZpdDppbmhlcml0Oy1vLW9iamVjdC1wb3NpdGlvbjppbmhlcml0O29iamVjdC1wb3NpdGlvbjppbmhlcml0fVwiO1xuXG5jb25zdCBJbWcgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW9uSW1nV2lsbExvYWQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkltZ1dpbGxMb2FkXCIsIDcpO1xuICAgIHRoaXMuaW9uSW1nRGlkTG9hZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uSW1nRGlkTG9hZFwiLCA3KTtcbiAgICB0aGlzLmlvbkVycm9yID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25FcnJvclwiLCA3KTtcbiAgICB0aGlzLm9uTG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuaW9uSW1nRGlkTG9hZC5lbWl0KCk7XG4gICAgfTtcbiAgICB0aGlzLm9uRXJyb3IgPSAoKSA9PiB7XG4gICAgICB0aGlzLmlvbkVycm9yLmVtaXQoKTtcbiAgICB9O1xuICB9XG4gIHNyY0NoYW5nZWQoKSB7XG4gICAgdGhpcy5hZGRJTygpO1xuICB9XG4gIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgdGhpcy5hZGRJTygpO1xuICB9XG4gIGFkZElPKCkge1xuICAgIGlmICh0aGlzLnNyYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgJiZcbiAgICAgICdJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5JyBpbiB3aW5kb3cgJiZcbiAgICAgICdpc0ludGVyc2VjdGluZycgaW4gd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlKSB7XG4gICAgICB0aGlzLnJlbW92ZUlPKCk7XG4gICAgICB0aGlzLmlvID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGRhdGEgPT4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogT24gc2xvd2VyIGRldmljZXMsIGl0IGlzIHBvc3NpYmxlIGZvciBhbiBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgZW50cnkgdG8gY29udGFpbiBtdWx0aXBsZVxuICAgICAgICAgKiBvYmplY3RzIGluIHRoZSBhcnJheS4gVGhpcyBoYXBwZW5zIHdoZW4gcXVpY2tseSBzY3JvbGxpbmcgYW4gaW1hZ2UgaW50byB2aWV3IGFuZCB0aGVuIG91dCBvZlxuICAgICAgICAgKiB2aWV3LiBJbiB0aGlzIGNhc2UsIHRoZSBsYXN0IG9iamVjdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZGF0YVtkYXRhLmxlbmd0aCAtIDFdLmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVJTygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuaW8ub2JzZXJ2ZSh0aGlzLmVsKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBmYWxsIGJhY2sgdG8gc2V0VGltZW91dCBmb3IgU2FmYXJpIGFuZCBJRVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmxvYWQoKSwgMjAwKTtcbiAgICB9XG4gIH1cbiAgbG9hZCgpIHtcbiAgICB0aGlzLmxvYWRFcnJvciA9IHRoaXMub25FcnJvcjtcbiAgICB0aGlzLmxvYWRTcmMgPSB0aGlzLnNyYztcbiAgICB0aGlzLmlvbkltZ1dpbGxMb2FkLmVtaXQoKTtcbiAgfVxuICByZW1vdmVJTygpIHtcbiAgICBpZiAodGhpcy5pbykge1xuICAgICAgdGhpcy5pby5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLmlvID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IGdldElvbk1vZGUodGhpcykgfSwgaChcImltZ1wiLCB7IGRlY29kaW5nOiBcImFzeW5jXCIsIHNyYzogdGhpcy5sb2FkU3JjLCBhbHQ6IHRoaXMuYWx0LCBvbkxvYWQ6IHRoaXMub25Mb2FkLCBvbkVycm9yOiB0aGlzLmxvYWRFcnJvciwgcGFydDogXCJpbWFnZVwiIH0pKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwic3JjXCI6IFtcInNyY0NoYW5nZWRcIl1cbiAgfTsgfVxufTtcbkltZy5zdHlsZSA9IGltZ0NzcztcblxuZXhwb3J0IHsgSW1nIGFzIGlvbl9pbWcgfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVnaXN0ZXJJbnN0YW5jZSIsImUiLCJjcmVhdGVFdmVudCIsImgiLCJIIiwiSG9zdCIsImkiLCJnZXRFbGVtZW50IiwiYiIsImdldElvbk1vZGUiLCJpbWdDc3MiLCJJbWciLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJpb25JbWdXaWxsTG9hZCIsImlvbkltZ0RpZExvYWQiLCJpb25FcnJvciIsIm9uTG9hZCIsImVtaXQiLCJvbkVycm9yIiwic3JjQ2hhbmdlZCIsImFkZElPIiwiY29tcG9uZW50RGlkTG9hZCIsInNyYyIsInVuZGVmaW5lZCIsIndpbmRvdyIsIkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkiLCJwcm90b3R5cGUiLCJyZW1vdmVJTyIsImlvIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJkYXRhIiwibGVuZ3RoIiwiaXNJbnRlcnNlY3RpbmciLCJsb2FkIiwib2JzZXJ2ZSIsImVsIiwic2V0VGltZW91dCIsImxvYWRFcnJvciIsImxvYWRTcmMiLCJkaXNjb25uZWN0IiwicmVuZGVyIiwiY2xhc3MiLCJkZWNvZGluZyIsImFsdCIsInBhcnQiLCJ3YXRjaGVycyIsInN0eWxlIiwiaW9uX2ltZyJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8ifQ==