{"version":3,"mappings":"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","names":["DEBUG_TAG","AppResetService","services","dbHelperService","loggingService","Promise","all","map","s","resolve","appOnReset","resetDb","table","log","_logging_log_level_model__WEBPACK_IMPORTED_MODULE_2__","appOnResetComplete","_angular_core__WEBPACK_IMPORTED_MODULE_4__","factory","providedIn","routes","path","component","_user_settings_page__WEBPACK_IMPORTED_MODULE_0__","UserSettingsPageModule","_modules_shared_shared_module__WEBPACK_IMPORTED_MODULE_1__","_angular_router__WEBPACK_IMPORTED_MODULE_6__","declarations","imports","_angular_core__WEBPACK_IMPORTED_MODULE_7__","ctx_r1","TAPS_TO_ENABLE_TEST_MODE","UserSettingsPage","userSettingService","kdvService","ngZone","translateService","alertController","appVersionService","loadingController","appResetService","navController","fileLoggingService","options","id","text","disabled","userSettings","featureToggleDeveloperMode","versionClicks","subscriptions","push","userSetting$","subscribe","val","run","getAppVersion","appver","version","stopSubscriptions","subscription","unsubscribe","updateSettings","saveUserSettings","showAdvanced","isUpdating","update","showKdvElementsUpdated","sendLogsByEmail","ok","get","toPromise","translations","create","message","buttons","alert","present","onDidDismiss","handler","reset","role","loading","doReset","_modules_shared_services_logging_log_level_model__WEBPACK_IMPORTED_MODULE_4__","dismiss","navigateRoot","resetApp","selectors","decls","vars","consts","template"],"sources":["webpack:///src/app/modules/shared/services/app-reset/app-reset.service.ts","webpack:///src/app/pages/user-settings/user-settings.module.ts","webpack:///src/app/pages/user-settings/user-settings.page.html","webpack:///src/app/pages/user-settings/user-settings.page.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { OnReset } from '../../interfaces/on-reset.interface';\r\nimport { DbHelperService } from '../../../../core/services/db-helper/db-helper.service';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { LogLevel } from '../logging/log-level.model';\r\n\r\nconst DEBUG_TAG = 'AppResetService';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppResetService {\r\n  constructor(\r\n    @Inject('OnReset') private services: OnReset[],\r\n    private dbHelperService: DbHelperService,\r\n    private loggingService: LoggingService\r\n  ) {}\r\n\r\n  async resetApp(): Promise<void> {\r\n    await Promise.all(\r\n      this.services.map((s) => Promise.resolve(s.appOnReset()))\r\n    );\r\n    await this.dbHelperService.resetDb((table) => {\r\n      this.loggingService.log(\r\n        `Error reset table ${table}`,\r\n        null,\r\n        LogLevel.Warning,\r\n        DEBUG_TAG\r\n      );\r\n    });\r\n    await Promise.all(\r\n      this.services.map((s) =>\r\n        Promise.resolve(s.appOnResetComplete ? s.appOnResetComplete() : true)\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserSettingsPage } from './user-settings.page';\r\nimport { SharedModule } from '../../modules/shared/shared.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserSettingsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [SharedModule, RouterModule.forChild(routes)],\r\n  declarations: [UserSettingsPage]\r\n})\r\nexport class UserSettingsPageModule {}\r\n","<ion-header>\r\n  <ion-toolbar appHeaderColor mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/\" text=\"\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>\r\n      {{\"SETTINGS.TITLE\" | translate}}\r\n    </ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content class=\"ion-padding\" *ngIf=\"userSettings\">\r\n  <ion-list lines=\"full\">\r\n    <ion-item>\r\n      <ion-label>\r\n        {{'SETTINGS.EMAIL_RECEIPT' | translate}}\r\n      </ion-label>\r\n      <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.emailReceipt\" (ngModelChange)=\"updateSettings()\"></ion-toggle>\r\n    </ion-item>\r\n    <ion-item>\r\n      <ion-label>\r\n        {{'SETTINGS.ALLOW_ANALYTICS' | translate}}\r\n      </ion-label>\r\n      <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.consentForSendingAnalytics\" (ngModelChange)=\"updateSettings()\">\r\n      </ion-toggle>\r\n    </ion-item>\r\n  </ion-list>\r\n  <ion-button (click)=\"toggleAdvanced()\" fill=\"clear\" expand=\"full\">\r\n    <ion-icon slot=\"start\" [name]=\"(showAdvanced ? 'chevron-up' : 'chevron-down')\"></ion-icon>\r\n    {{( showAdvanced ? 'SETTINGS.HIDE_ADVANCED' : 'SETTINGS.SHOW_ADVANCED') | translate }}\r\n  </ion-button>\r\n  <ng-container *ngIf=\"showAdvanced\">\r\n    <ion-list lines=\"full\">\r\n      <ion-item (click)=\"versionClick()\">\r\n        <ion-label position=\"stacked\" color=\"medium\" class=\"ion-text-uppercase\">{{'SETTINGS.APP_VERSION' | translate}}\r\n        </ion-label>\r\n        <ion-text class=\"ion-align-self-start\" class=\"build-version\">\r\n          {{version.version }} ({{ version.buildNumber }})\r\n        </ion-text>\r\n        <ion-text class=\"build-rev ion-align-self-start\" color=\"medium\">\r\n          {{ version.revision }} - {{ version.date | formatDate | async }}\r\n        </ion-text>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"stacked\" color=\"medium\" class=\"ion-text-uppercase\">{{ \"SETTINGS.APPMODE\" | translate }}\r\n        </ion-label>\r\n        <app-select [(selectedValue)]=\"userSettings.appMode\" [options]=\"appModeOptions\"\r\n          (selectedValueChange)=\"updateSettings()\" [showReset]=\"false\"> </app-select>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label>\r\n          {{'SETTINGS.USE_RETINA_MAP' | translate}}\r\n        </ion-label>\r\n        <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.useRetinaMap\" (ngModelChange)=\"updateSettings()\">\r\n        </ion-toggle>\r\n      </ion-item>\r\n      <ion-item *ngIf=\"userSettings.featureToggleDeveloperMode\">\r\n        <ion-label>\r\n          GPS debug\r\n        </ion-label>\r\n        <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.featureToggeGpsDebug\" (ngModelChange)=\"updateSettings()\">\r\n        </ion-toggle>\r\n      </ion-item>\r\n    </ion-list>\r\n    <ion-list lines=\"none\">\r\n      <ion-button expand=\"block\" [disabled]=\"isUpdating\" (click)=\"updateDropdowns()\">\r\n        <ion-icon slot=\"start\" name=\"refresh\"></ion-icon>\r\n        {{ \"SETTINGS.UPDATE_DROPDOWNS\" | translate }}\r\n      </ion-button>\r\n      <ion-button expand=\"block\" [disabled]=\"isUpdating\" (click)=\"sendLogs()\">\r\n        <ion-icon slot=\"start\" name=\"mail-outline\"></ion-icon>\r\n        Send logger til Regobs Team\r\n      </ion-button>\r\n      <ion-button class=\"reset-button\" color=\"danger\" expand=\"block\" [disabled]=\"isUpdating\" (click)=\"confirmReset()\">\r\n        <ion-icon slot=\"start\" name=\"medkit\"></ion-icon>\r\n        {{ \"SETTINGS.RESET\" | translate }}\r\n      </ion-button>\r\n    </ion-list>\r\n  </ng-container>\r\n</ion-content>","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\r\nimport { UserSettingService } from '../../core/services/user-setting/user-setting.service';\r\nimport { UserSetting } from '../../core/models/user-settings.model';\r\nimport {\r\n  NavController,\r\n  AlertController,\r\n  LoadingController\r\n} from '@ionic/angular';\r\nimport { KdvService } from 'src/app/modules/common-registration/registration.services';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AppVersionService } from '../../core/services/app-version/app-version.service';\r\nimport { AppVersion } from '../../core/models/app-version.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { LoggingService } from '../../modules/shared/services/logging/logging.service';\r\nimport { LogLevel } from '../../modules/shared/services/logging/log-level.model';\r\nimport { AppResetService } from '../../modules/shared/services/app-reset/app-reset.service';\r\nimport { SelectOption } from '../../modules/shared/components/input/select/select-option.model';\r\nimport { FileLoggingService } from 'src/app/modules/shared/services/logging/file-logging.service';\r\n\r\nconst DEBUG_TAG = 'UserSettingsPage';\r\nconst TAPS_TO_ENABLE_TEST_MODE = 7;\r\n\r\n@Component({\r\n  selector: 'app-user-settings',\r\n  templateUrl: './user-settings.page.html',\r\n  styleUrls: ['./user-settings.page.scss']\r\n})\r\nexport class UserSettingsPage implements OnInit, OnDestroy {\r\n  userSettings: UserSetting;\r\n  showAdvanced = false;\r\n  isUpdating = false;\r\n  version: AppVersion;\r\n  private subscriptions: Subscription[] = [];\r\n  private versionClicks = 0;\r\n\r\n  get appModeOptions() {\r\n    const options: SelectOption[] = [\r\n      { id: 'PROD', text: 'Regobs' },\r\n      { id: 'DEMO', text: 'Demo Regobs' },\r\n      {\r\n        id: 'TEST',\r\n        text: 'Test Regobs',\r\n        disabled: !this.userSettings.featureToggleDeveloperMode\r\n      }\r\n    ];\r\n    return options;\r\n  }\r\n\r\n  constructor(\r\n    private userSettingService: UserSettingService,\r\n    private kdvService: KdvService,\r\n    private ngZone: NgZone,\r\n    private loggingService: LoggingService,\r\n    private translateService: TranslateService,\r\n    private alertController: AlertController,\r\n    private appVersionService: AppVersionService,\r\n    private loadingController: LoadingController,\r\n    private appResetService: AppResetService,\r\n    private navController: NavController,\r\n    private fileLoggingService: FileLoggingService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.versionClicks = 0;\r\n    this.subscriptions.push(\r\n      this.userSettingService.userSetting$.subscribe((val) => {\r\n        this.ngZone.run(() => {\r\n          this.userSettings = val;\r\n        });\r\n      })\r\n    );\r\n    const appver = await this.appVersionService.getAppVersion();\r\n    this.ngZone.run(() => {\r\n      this.version = appver;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stopSubscriptions();\r\n  }\r\n\r\n  private stopSubscriptions() {\r\n    for (const subscription of this.subscriptions) {\r\n      subscription.unsubscribe();\r\n    }\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  versionClick() {\r\n    this.versionClicks++;\r\n    if (\r\n      this.versionClicks >= TAPS_TO_ENABLE_TEST_MODE &&\r\n      !this.userSettings.featureToggleDeveloperMode\r\n    ) {\r\n      this.userSettings.featureToggleDeveloperMode = true;\r\n      this.updateSettings();\r\n    }\r\n  }\r\n\r\n  updateSettings() {\r\n    this.userSettingService.saveUserSettings(this.userSettings);\r\n  }\r\n\r\n  async toggleAdvanced() {\r\n    this.showAdvanced = !this.showAdvanced;\r\n  }\r\n\r\n  async updateDropdowns() {\r\n    this.isUpdating = true;\r\n    this.kdvService.update();\r\n    await this.showKdvElementsUpdated(true);\r\n    this.ngZone.run(() => {\r\n      this.isUpdating = false;\r\n    });\r\n  }\r\n\r\n  async sendLogs() {\r\n    this.fileLoggingService.sendLogsByEmail();\r\n  }\r\n\r\n  async showKdvElementsUpdated(ok: boolean) {\r\n    const translations = await this.translateService\r\n      .get([\r\n        'SETTINGS.DROPDOWNS_UPDATED',\r\n        'SETTINGS.DROPDOWNS_FAILED',\r\n        'ALERT.OK'\r\n      ])\r\n      .toPromise();\r\n    const alert = await this.alertController.create({\r\n      message: ok\r\n        ? translations['SETTINGS.DROPDOWNS_UPDATED']\r\n        : translations['SETTINGS.DROPDOWNS_FAILED'],\r\n      buttons: [translations['ALERT.OK']]\r\n    });\r\n    alert.present();\r\n    return alert.onDidDismiss();\r\n  }\r\n\r\n  async confirmReset() {\r\n    const translations = await this.translateService\r\n      .get(['SETTINGS.CONFIRM_RESET', 'ALERT.OK', 'ALERT.CANCEL'])\r\n      .toPromise();\r\n    const alert = await this.alertController.create({\r\n      message: translations['SETTINGS.CONFIRM_RESET'],\r\n      buttons: [\r\n        {\r\n          text: translations['ALERT.OK'],\r\n          handler: () => this.reset()\r\n        },\r\n        {\r\n          text: translations['ALERT.CANCEL'],\r\n          role: 'cancel'\r\n        }\r\n      ]\r\n    });\r\n    alert.present();\r\n  }\r\n\r\n  async reset() {\r\n    const message = await this.translateService\r\n      .get('SETTINGS.RESETTING')\r\n      .toPromise();\r\n    const loading = await this.loadingController.create({\r\n      message\r\n    });\r\n    loading.present();\r\n    this.isUpdating = true;\r\n    // TODO: Implement some kind of subscription manager to stop all subscriptions and resubscribe when complete\r\n    try {\r\n      await this.doReset();\r\n    } catch (err) {\r\n      this.loggingService.log(\r\n        'Could not reset db',\r\n        err,\r\n        LogLevel.Warning,\r\n        DEBUG_TAG\r\n      );\r\n    }\r\n    this.ngZone.run(() => {\r\n      this.isUpdating = false;\r\n      loading.dismiss();\r\n      this.navController.navigateRoot('start-wizard');\r\n    });\r\n  }\r\n\r\n  private async doReset() {\r\n    this.stopSubscriptions();\r\n    return this.appResetService.resetApp();\r\n  }\r\n}\r\n"]}