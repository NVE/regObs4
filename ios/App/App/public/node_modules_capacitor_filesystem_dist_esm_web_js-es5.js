(function () {
  "use strict";

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  (self["webpackChunkregobs4"] = self["webpackChunkregobs4"] || []).push([["node_modules_capacitor_filesystem_dist_esm_web_js"], {
    /***/
    16603: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "FilesystemWeb": function FilesystemWeb() {
          return (
            /* binding */
            _FilesystemWeb
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator */
      80151);
      /* harmony import */


      var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @capacitor/core */
      41899);

      function resolve(path) {
        var posix = path.split('/').filter(function (item) {
          return item !== '.';
        });
        var newPosix = [];
        posix.forEach(function (item) {
          if (item === '..' && newPosix.length > 0 && newPosix[newPosix.length - 1] !== '..') {
            newPosix.pop();
          } else {
            newPosix.push(item);
          }
        });
        return newPosix.join('/');
      }

      function isPathParent(parent, children) {
        parent = resolve(parent);
        children = resolve(children);
        var pathsA = parent.split('/');
        var pathsB = children.split('/');
        return parent !== children && pathsA.every(function (value, index) {
          return value === pathsB[index];
        });
      }

      var _FilesystemWeb = /*#__PURE__*/function (_capacitor_core__WEBP) {
        _inherits(_FilesystemWeb, _capacitor_core__WEBP);

        var _super = _createSuper(_FilesystemWeb);

        function _FilesystemWeb() {
          var _this17;

          _classCallCheck(this, _FilesystemWeb);

          _this17 = _super.apply(this, arguments);
          _this17.DB_VERSION = 1;
          _this17.DB_NAME = 'Disc';
          _this17._writeCmds = ['add', 'put', 'delete'];
          return _this17;
        }

        _createClass(_FilesystemWeb, [{
          key: "initDb",
          value: function initDb() {
            var _this = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!(_this._db !== undefined)) {
                        _context.next = 2;
                        break;
                      }

                      return _context.abrupt("return", _this._db);

                    case 2:
                      if ('indexedDB' in window) {
                        _context.next = 4;
                        break;
                      }

                      throw _this.unavailable("This browser doesn't support IndexedDB");

                    case 4:
                      return _context.abrupt("return", new Promise(function (resolve, reject) {
                        var request = indexedDB.open(_this.DB_NAME, _this.DB_VERSION);
                        request.onupgradeneeded = _FilesystemWeb.doUpgrade;

                        request.onsuccess = function () {
                          _this._db = request.result;
                          resolve(request.result);
                        };

                        request.onerror = function () {
                          return reject(request.error);
                        };

                        request.onblocked = function () {
                          console.warn('db blocked');
                        };
                      }));

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))();
          }
        }, {
          key: "dbRequest",
          value: function dbRequest(cmd, args) {
            var _this2 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              var readFlag;
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      readFlag = _this2._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';
                      return _context2.abrupt("return", _this2.initDb().then(function (conn) {
                        return new Promise(function (resolve, reject) {
                          var tx = conn.transaction(['FileStorage'], readFlag);
                          var store = tx.objectStore('FileStorage');
                          var req = store[cmd].apply(store, _toConsumableArray(args));

                          req.onsuccess = function () {
                            return resolve(req.result);
                          };

                          req.onerror = function () {
                            return reject(req.error);
                          };
                        });
                      }));

                    case 2:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            }))();
          }
        }, {
          key: "dbIndexRequest",
          value: function dbIndexRequest(indexName, cmd, args) {
            var _this3 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              var readFlag;
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      readFlag = _this3._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';
                      return _context3.abrupt("return", _this3.initDb().then(function (conn) {
                        return new Promise(function (resolve, reject) {
                          var tx = conn.transaction(['FileStorage'], readFlag);
                          var store = tx.objectStore('FileStorage');
                          var index = store.index(indexName);
                          var req = index[cmd].apply(index, _toConsumableArray(args));

                          req.onsuccess = function () {
                            return resolve(req.result);
                          };

                          req.onerror = function () {
                            return reject(req.error);
                          };
                        });
                      }));

                    case 2:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            }))();
          }
        }, {
          key: "getPath",
          value: function getPath(directory, uriPath) {
            var cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';
            var fsPath = '';
            if (directory !== undefined) fsPath += '/' + directory;
            if (uriPath !== '') fsPath += '/' + cleanedUriPath;
            return fsPath;
          }
        }, {
          key: "clear",
          value: function clear() {
            var _this4 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
              var conn, tx, store;
              return regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      _context4.next = 2;
                      return _this4.initDb();

                    case 2:
                      conn = _context4.sent;
                      tx = conn.transaction(['FileStorage'], 'readwrite');
                      store = tx.objectStore('FileStorage');
                      store.clear();

                    case 6:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee4);
            }))();
          }
          /**
           * Read a file from disk
           * @param options options for the file read
           * @return a promise that resolves with the read file data result
           */

        }, {
          key: "readFile",
          value: function readFile(options) {
            var _this5 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
              var path, entry;
              return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      path = _this5.getPath(options.directory, options.path); // const encoding = options.encoding;

                      _context5.next = 3;
                      return _this5.dbRequest('get', [path]);

                    case 3:
                      entry = _context5.sent;

                      if (!(entry === undefined)) {
                        _context5.next = 6;
                        break;
                      }

                      throw Error('File does not exist.');

                    case 6:
                      return _context5.abrupt("return", {
                        data: entry.content ? entry.content : ''
                      });

                    case 7:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee5);
            }))();
          }
          /**
           * Write a file to disk in the specified location on device
           * @param options options for the file write
           * @return a promise that resolves with the file write result
           */

        }, {
          key: "writeFile",
          value: function writeFile(options) {
            var _this6 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
              var path, data, doRecursive, occupiedEntry, encoding, parentPath, parentEntry, subDirIndex, parentArgPath, now, pathObj;
              return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      path = _this6.getPath(options.directory, options.path);
                      data = options.data;
                      doRecursive = options.recursive;
                      _context6.next = 5;
                      return _this6.dbRequest('get', [path]);

                    case 5:
                      occupiedEntry = _context6.sent;

                      if (!(occupiedEntry && occupiedEntry.type === 'directory')) {
                        _context6.next = 8;
                        break;
                      }

                      throw 'The supplied path is a directory.';

                    case 8:
                      encoding = options.encoding;
                      parentPath = path.substr(0, path.lastIndexOf('/'));
                      _context6.next = 12;
                      return _this6.dbRequest('get', [parentPath]);

                    case 12:
                      parentEntry = _context6.sent;

                      if (!(parentEntry === undefined)) {
                        _context6.next = 19;
                        break;
                      }

                      subDirIndex = parentPath.indexOf('/', 1);

                      if (!(subDirIndex !== -1)) {
                        _context6.next = 19;
                        break;
                      }

                      parentArgPath = parentPath.substr(subDirIndex);
                      _context6.next = 19;
                      return _this6.mkdir({
                        path: parentArgPath,
                        directory: options.directory,
                        recursive: doRecursive
                      });

                    case 19:
                      now = Date.now();
                      pathObj = {
                        path: path,
                        folder: parentPath,
                        type: 'file',
                        size: data.length,
                        ctime: now,
                        mtime: now,
                        content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data
                      };
                      _context6.next = 23;
                      return _this6.dbRequest('put', [pathObj]);

                    case 23:
                      return _context6.abrupt("return", {
                        uri: pathObj.path
                      });

                    case 24:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6);
            }))();
          }
          /**
           * Append to a file on disk in the specified location on device
           * @param options options for the file append
           * @return a promise that resolves with the file write result
           */

        }, {
          key: "appendFile",
          value: function appendFile(options) {
            var _this7 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
              var path, data, parentPath, now, ctime, occupiedEntry, parentEntry, subDirIndex, parentArgPath, pathObj;
              return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      path = _this7.getPath(options.directory, options.path);
                      data = options.data; // const encoding = options.encoding;

                      parentPath = path.substr(0, path.lastIndexOf('/'));
                      now = Date.now();
                      ctime = now;
                      _context7.next = 7;
                      return _this7.dbRequest('get', [path]);

                    case 7:
                      occupiedEntry = _context7.sent;

                      if (!(occupiedEntry && occupiedEntry.type === 'directory')) {
                        _context7.next = 10;
                        break;
                      }

                      throw 'The supplied path is a directory.';

                    case 10:
                      _context7.next = 12;
                      return _this7.dbRequest('get', [parentPath]);

                    case 12:
                      parentEntry = _context7.sent;

                      if (!(parentEntry === undefined)) {
                        _context7.next = 19;
                        break;
                      }

                      subDirIndex = parentPath.indexOf('/', 1);

                      if (!(subDirIndex !== -1)) {
                        _context7.next = 19;
                        break;
                      }

                      parentArgPath = parentPath.substr(subDirIndex);
                      _context7.next = 19;
                      return _this7.mkdir({
                        path: parentArgPath,
                        directory: options.directory,
                        recursive: true
                      });

                    case 19:
                      if (occupiedEntry !== undefined) {
                        data = occupiedEntry.content + data;
                        ctime = occupiedEntry.ctime;
                      }

                      pathObj = {
                        path: path,
                        folder: parentPath,
                        type: 'file',
                        size: data.length,
                        ctime: ctime,
                        mtime: now,
                        content: data
                      };
                      _context7.next = 23;
                      return _this7.dbRequest('put', [pathObj]);

                    case 23:
                    case "end":
                      return _context7.stop();
                  }
                }
              }, _callee7);
            }))();
          }
          /**
           * Delete a file from disk
           * @param options options for the file delete
           * @return a promise that resolves with the deleted file data result
           */

        }, {
          key: "deleteFile",
          value: function deleteFile(options) {
            var _this8 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
              var path, entry, entries;
              return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      path = _this8.getPath(options.directory, options.path);
                      _context8.next = 3;
                      return _this8.dbRequest('get', [path]);

                    case 3:
                      entry = _context8.sent;

                      if (!(entry === undefined)) {
                        _context8.next = 6;
                        break;
                      }

                      throw Error('File does not exist.');

                    case 6:
                      _context8.next = 8;
                      return _this8.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);

                    case 8:
                      entries = _context8.sent;

                      if (!(entries.length !== 0)) {
                        _context8.next = 11;
                        break;
                      }

                      throw Error('Folder is not empty.');

                    case 11:
                      _context8.next = 13;
                      return _this8.dbRequest('delete', [path]);

                    case 13:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee8);
            }))();
          }
          /**
           * Create a directory.
           * @param options options for the mkdir
           * @return a promise that resolves with the mkdir result
           */

        }, {
          key: "mkdir",
          value: function mkdir(options) {
            var _this9 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
              var path, doRecursive, parentPath, depth, parentEntry, occupiedEntry, parentArgPath, now, pathObj;
              return regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                  switch (_context9.prev = _context9.next) {
                    case 0:
                      path = _this9.getPath(options.directory, options.path);
                      doRecursive = options.recursive;
                      parentPath = path.substr(0, path.lastIndexOf('/'));
                      depth = (path.match(/\//g) || []).length;
                      _context9.next = 6;
                      return _this9.dbRequest('get', [parentPath]);

                    case 6:
                      parentEntry = _context9.sent;
                      _context9.next = 9;
                      return _this9.dbRequest('get', [path]);

                    case 9:
                      occupiedEntry = _context9.sent;

                      if (!(depth === 1)) {
                        _context9.next = 12;
                        break;
                      }

                      throw Error('Cannot create Root directory');

                    case 12:
                      if (!(occupiedEntry !== undefined)) {
                        _context9.next = 14;
                        break;
                      }

                      throw Error('Current directory does already exist.');

                    case 14:
                      if (!(!doRecursive && depth !== 2 && parentEntry === undefined)) {
                        _context9.next = 16;
                        break;
                      }

                      throw Error('Parent directory must exist');

                    case 16:
                      if (!(doRecursive && depth !== 2 && parentEntry === undefined)) {
                        _context9.next = 20;
                        break;
                      }

                      parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));
                      _context9.next = 20;
                      return _this9.mkdir({
                        path: parentArgPath,
                        directory: options.directory,
                        recursive: doRecursive
                      });

                    case 20:
                      now = Date.now();
                      pathObj = {
                        path: path,
                        folder: parentPath,
                        type: 'directory',
                        size: 0,
                        ctime: now,
                        mtime: now
                      };
                      _context9.next = 24;
                      return _this9.dbRequest('put', [pathObj]);

                    case 24:
                    case "end":
                      return _context9.stop();
                  }
                }
              }, _callee9);
            }))();
          }
          /**
           * Remove a directory
           * @param options the options for the directory remove
           */

        }, {
          key: "rmdir",
          value: function rmdir(options) {
            var _this10 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
              var path, directory, recursive, fullPath, entry, readDirResult, _iterator, _step, _entry, entryPath, entryObj;

              return regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      path = options.path, directory = options.directory, recursive = options.recursive;
                      fullPath = _this10.getPath(directory, path);
                      _context10.next = 4;
                      return _this10.dbRequest('get', [fullPath]);

                    case 4:
                      entry = _context10.sent;

                      if (!(entry === undefined)) {
                        _context10.next = 7;
                        break;
                      }

                      throw Error('Folder does not exist.');

                    case 7:
                      if (!(entry.type !== 'directory')) {
                        _context10.next = 9;
                        break;
                      }

                      throw Error('Requested path is not a directory');

                    case 9:
                      _context10.next = 11;
                      return _this10.readdir({
                        path: path,
                        directory: directory
                      });

                    case 11:
                      readDirResult = _context10.sent;

                      if (!(readDirResult.files.length !== 0 && !recursive)) {
                        _context10.next = 14;
                        break;
                      }

                      throw Error('Folder is not empty');

                    case 14:
                      _iterator = _createForOfIteratorHelper(readDirResult.files);
                      _context10.prev = 15;

                      _iterator.s();

                    case 17:
                      if ((_step = _iterator.n()).done) {
                        _context10.next = 32;
                        break;
                      }

                      _entry = _step.value;
                      entryPath = "".concat(path, "/").concat(_entry);
                      _context10.next = 22;
                      return _this10.stat({
                        path: entryPath,
                        directory: directory
                      });

                    case 22:
                      entryObj = _context10.sent;

                      if (!(entryObj.type === 'file')) {
                        _context10.next = 28;
                        break;
                      }

                      _context10.next = 26;
                      return _this10.deleteFile({
                        path: entryPath,
                        directory: directory
                      });

                    case 26:
                      _context10.next = 30;
                      break;

                    case 28:
                      _context10.next = 30;
                      return _this10.rmdir({
                        path: entryPath,
                        directory: directory,
                        recursive: recursive
                      });

                    case 30:
                      _context10.next = 17;
                      break;

                    case 32:
                      _context10.next = 37;
                      break;

                    case 34:
                      _context10.prev = 34;
                      _context10.t0 = _context10["catch"](15);

                      _iterator.e(_context10.t0);

                    case 37:
                      _context10.prev = 37;

                      _iterator.f();

                      return _context10.finish(37);

                    case 40:
                      _context10.next = 42;
                      return _this10.dbRequest('delete', [fullPath]);

                    case 42:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee10, null, [[15, 34, 37, 40]]);
            }))();
          }
          /**
           * Return a list of files from the directory (not recursive)
           * @param options the options for the readdir operation
           * @return a promise that resolves with the readdir directory listing result
           */

        }, {
          key: "readdir",
          value: function readdir(options) {
            var _this11 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
              var path, entry, entries, names;
              return regeneratorRuntime.wrap(function _callee11$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      path = _this11.getPath(options.directory, options.path);
                      _context11.next = 3;
                      return _this11.dbRequest('get', [path]);

                    case 3:
                      entry = _context11.sent;

                      if (!(options.path !== '' && entry === undefined)) {
                        _context11.next = 6;
                        break;
                      }

                      throw Error('Folder does not exist.');

                    case 6:
                      _context11.next = 8;
                      return _this11.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);

                    case 8:
                      entries = _context11.sent;
                      names = entries.map(function (e) {
                        return e.substring(path.length + 1);
                      });
                      return _context11.abrupt("return", {
                        files: names
                      });

                    case 11:
                    case "end":
                      return _context11.stop();
                  }
                }
              }, _callee11);
            }))();
          }
          /**
           * Return full File URI for a path and directory
           * @param options the options for the stat operation
           * @return a promise that resolves with the file stat result
           */

        }, {
          key: "getUri",
          value: function getUri(options) {
            var _this12 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
              var path, entry;
              return regeneratorRuntime.wrap(function _callee12$(_context12) {
                while (1) {
                  switch (_context12.prev = _context12.next) {
                    case 0:
                      path = _this12.getPath(options.directory, options.path);
                      _context12.next = 3;
                      return _this12.dbRequest('get', [path]);

                    case 3:
                      entry = _context12.sent;

                      if (!(entry === undefined)) {
                        _context12.next = 8;
                        break;
                      }

                      _context12.next = 7;
                      return _this12.dbRequest('get', [path + '/']);

                    case 7:
                      entry = _context12.sent;

                    case 8:
                      return _context12.abrupt("return", {
                        uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path
                      });

                    case 9:
                    case "end":
                      return _context12.stop();
                  }
                }
              }, _callee12);
            }))();
          }
          /**
           * Return data about a file
           * @param options the options for the stat operation
           * @return a promise that resolves with the file stat result
           */

        }, {
          key: "stat",
          value: function stat(options) {
            var _this13 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
              var path, entry;
              return regeneratorRuntime.wrap(function _callee13$(_context13) {
                while (1) {
                  switch (_context13.prev = _context13.next) {
                    case 0:
                      path = _this13.getPath(options.directory, options.path);
                      _context13.next = 3;
                      return _this13.dbRequest('get', [path]);

                    case 3:
                      entry = _context13.sent;

                      if (!(entry === undefined)) {
                        _context13.next = 8;
                        break;
                      }

                      _context13.next = 7;
                      return _this13.dbRequest('get', [path + '/']);

                    case 7:
                      entry = _context13.sent;

                    case 8:
                      if (!(entry === undefined)) {
                        _context13.next = 10;
                        break;
                      }

                      throw Error('Entry does not exist.');

                    case 10:
                      return _context13.abrupt("return", {
                        type: entry.type,
                        size: entry.size,
                        ctime: entry.ctime,
                        mtime: entry.mtime,
                        uri: entry.path
                      });

                    case 11:
                    case "end":
                      return _context13.stop();
                  }
                }
              }, _callee13);
            }))();
          }
          /**
           * Rename a file or directory
           * @param options the options for the rename operation
           * @return a promise that resolves with the rename result
           */

        }, {
          key: "rename",
          value: function rename(options) {
            var _this14 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
              return regeneratorRuntime.wrap(function _callee14$(_context14) {
                while (1) {
                  switch (_context14.prev = _context14.next) {
                    case 0:
                      return _context14.abrupt("return", _this14._copy(options, true));

                    case 1:
                    case "end":
                      return _context14.stop();
                  }
                }
              }, _callee14);
            }))();
          }
          /**
           * Copy a file or directory
           * @param options the options for the copy operation
           * @return a promise that resolves with the copy result
           */

        }, {
          key: "copy",
          value: function copy(options) {
            var _this15 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
              return regeneratorRuntime.wrap(function _callee15$(_context15) {
                while (1) {
                  switch (_context15.prev = _context15.next) {
                    case 0:
                      return _context15.abrupt("return", _this15._copy(options, false));

                    case 1:
                    case "end":
                      return _context15.stop();
                  }
                }
              }, _callee15);
            }))();
          }
        }, {
          key: "requestPermissions",
          value: function requestPermissions() {
            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
              return regeneratorRuntime.wrap(function _callee16$(_context16) {
                while (1) {
                  switch (_context16.prev = _context16.next) {
                    case 0:
                      return _context16.abrupt("return", {
                        publicStorage: 'granted'
                      });

                    case 1:
                    case "end":
                      return _context16.stop();
                  }
                }
              }, _callee16);
            }))();
          }
        }, {
          key: "checkPermissions",
          value: function checkPermissions() {
            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
              return regeneratorRuntime.wrap(function _callee17$(_context17) {
                while (1) {
                  switch (_context17.prev = _context17.next) {
                    case 0:
                      return _context17.abrupt("return", {
                        publicStorage: 'granted'
                      });

                    case 1:
                    case "end":
                      return _context17.stop();
                  }
                }
              }, _callee17);
            }))();
          }
          /**
           * Function that can perform a copy or a rename
           * @param options the options for the rename operation
           * @param doRename whether to perform a rename or copy operation
           * @return a promise that resolves with the result
           */

        }, {
          key: "_copy",
          value: function _copy(options) {
            var doRename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var _this16 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
              var toDirectory, to, from, fromDirectory, fromPath, toPath, toObj, toPathComponents, _toPath, toParentDirectory, fromObj, updateTime, ctime, file, contents, _iterator2, _step2, filename;

              return regeneratorRuntime.wrap(function _callee19$(_context19) {
                while (1) {
                  switch (_context19.prev = _context19.next) {
                    case 0:
                      toDirectory = options.toDirectory;
                      to = options.to, from = options.from, fromDirectory = options.directory;

                      if (!(!to || !from)) {
                        _context19.next = 4;
                        break;
                      }

                      throw Error('Both to and from must be provided');

                    case 4:
                      // If no "to" directory is provided, use the "from" directory
                      if (!toDirectory) {
                        toDirectory = fromDirectory;
                      }

                      fromPath = _this16.getPath(fromDirectory, from);
                      toPath = _this16.getPath(toDirectory, to); // Test that the "to" and "from" locations are different

                      if (!(fromPath === toPath)) {
                        _context19.next = 9;
                        break;
                      }

                      return _context19.abrupt("return");

                    case 9:
                      if (!isPathParent(fromPath, toPath)) {
                        _context19.next = 11;
                        break;
                      }

                      throw Error('To path cannot contain the from path');

                    case 11:
                      _context19.prev = 11;
                      _context19.next = 14;
                      return _this16.stat({
                        path: to,
                        directory: toDirectory
                      });

                    case 14:
                      toObj = _context19.sent;
                      _context19.next = 28;
                      break;

                    case 17:
                      _context19.prev = 17;
                      _context19.t0 = _context19["catch"](11);
                      // To location does not exist, ensure the directory containing "to" location exists and is a directory
                      toPathComponents = to.split('/');
                      toPathComponents.pop();
                      _toPath = toPathComponents.join('/'); // Check the containing directory of the "to" location exists

                      if (!(toPathComponents.length > 0)) {
                        _context19.next = 28;
                        break;
                      }

                      _context19.next = 25;
                      return _this16.stat({
                        path: _toPath,
                        directory: toDirectory
                      });

                    case 25:
                      toParentDirectory = _context19.sent;

                      if (!(toParentDirectory.type !== 'directory')) {
                        _context19.next = 28;
                        break;
                      }

                      throw new Error('Parent directory of the to path is a file');

                    case 28:
                      if (!(toObj && toObj.type === 'directory')) {
                        _context19.next = 30;
                        break;
                      }

                      throw new Error('Cannot overwrite a directory with a file');

                    case 30:
                      _context19.next = 32;
                      return _this16.stat({
                        path: from,
                        directory: fromDirectory
                      });

                    case 32:
                      fromObj = _context19.sent;

                      // Set the mtime/ctime of the supplied path
                      updateTime = /*#__PURE__*/function () {
                        var _ref = (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(path, ctime, mtime) {
                          var fullPath, entry;
                          return regeneratorRuntime.wrap(function _callee18$(_context18) {
                            while (1) {
                              switch (_context18.prev = _context18.next) {
                                case 0:
                                  fullPath = _this16.getPath(toDirectory, path);
                                  _context18.next = 3;
                                  return _this16.dbRequest('get', [fullPath]);

                                case 3:
                                  entry = _context18.sent;
                                  entry.ctime = ctime;
                                  entry.mtime = mtime;
                                  _context18.next = 8;
                                  return _this16.dbRequest('put', [entry]);

                                case 8:
                                case "end":
                                  return _context18.stop();
                              }
                            }
                          }, _callee18);
                        }));

                        return function updateTime(_x, _x2, _x3) {
                          return _ref.apply(this, arguments);
                        };
                      }();

                      ctime = fromObj.ctime ? fromObj.ctime : Date.now();
                      _context19.t1 = fromObj.type;
                      _context19.next = _context19.t1 === 'file' ? 38 : _context19.t1 === 'directory' ? 50 : 85;
                      break;

                    case 38:
                      _context19.next = 40;
                      return _this16.readFile({
                        path: from,
                        directory: fromDirectory
                      });

                    case 40:
                      file = _context19.sent;

                      if (!doRename) {
                        _context19.next = 44;
                        break;
                      }

                      _context19.next = 44;
                      return _this16.deleteFile({
                        path: from,
                        directory: fromDirectory
                      });

                    case 44:
                      _context19.next = 46;
                      return _this16.writeFile({
                        path: to,
                        directory: toDirectory,
                        data: file.data
                      });

                    case 46:
                      if (!doRename) {
                        _context19.next = 49;
                        break;
                      }

                      _context19.next = 49;
                      return updateTime(to, ctime, fromObj.mtime);

                    case 49:
                      return _context19.abrupt("return");

                    case 50:
                      if (!toObj) {
                        _context19.next = 52;
                        break;
                      }

                      throw Error('Cannot move a directory over an existing object');

                    case 52:
                      _context19.prev = 52;
                      _context19.next = 55;
                      return _this16.mkdir({
                        path: to,
                        directory: toDirectory,
                        recursive: false
                      });

                    case 55:
                      if (!doRename) {
                        _context19.next = 58;
                        break;
                      }

                      _context19.next = 58;
                      return updateTime(to, ctime, fromObj.mtime);

                    case 58:
                      _context19.next = 62;
                      break;

                    case 60:
                      _context19.prev = 60;
                      _context19.t2 = _context19["catch"](52);

                    case 62:
                      _context19.next = 64;
                      return _this16.readdir({
                        path: from,
                        directory: fromDirectory
                      });

                    case 64:
                      contents = _context19.sent.files;
                      _iterator2 = _createForOfIteratorHelper(contents);
                      _context19.prev = 66;

                      _iterator2.s();

                    case 68:
                      if ((_step2 = _iterator2.n()).done) {
                        _context19.next = 74;
                        break;
                      }

                      filename = _step2.value;
                      _context19.next = 72;
                      return _this16._copy({
                        from: "".concat(from, "/").concat(filename),
                        to: "".concat(to, "/").concat(filename),
                        directory: fromDirectory,
                        toDirectory: toDirectory
                      }, doRename);

                    case 72:
                      _context19.next = 68;
                      break;

                    case 74:
                      _context19.next = 79;
                      break;

                    case 76:
                      _context19.prev = 76;
                      _context19.t3 = _context19["catch"](66);

                      _iterator2.e(_context19.t3);

                    case 79:
                      _context19.prev = 79;

                      _iterator2.f();

                      return _context19.finish(79);

                    case 82:
                      if (!doRename) {
                        _context19.next = 85;
                        break;
                      }

                      _context19.next = 85;
                      return _this16.rmdir({
                        path: from,
                        directory: fromDirectory
                      });

                    case 85:
                    case "end":
                      return _context19.stop();
                  }
                }
              }, _callee19, null, [[11, 17], [52, 60], [66, 76, 79, 82]]);
            }))();
          }
        }], [{
          key: "doUpgrade",
          value: function doUpgrade(event) {
            var eventTarget = event.target;
            var db = eventTarget.result;

            switch (event.oldVersion) {
              case 0:
              case 1:
              default:
                {
                  if (db.objectStoreNames.contains('FileStorage')) {
                    db.deleteObjectStore('FileStorage');
                  }

                  var store = db.createObjectStore('FileStorage', {
                    keyPath: 'path'
                  });
                  store.createIndex('by_folder', 'folder');
                }
            }
          }
        }]);

        return _FilesystemWeb;
      }(_capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin);

      _FilesystemWeb._debug = true;
      /***/
    }
  }]);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,