{"version":3,"mappings":"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","names":["TripLogSummaryComponent","tripLoggerService","helperService","tripLogSubscription","getTripLogAsObservable","subscribe","tripLog","tripLogActivitySubscription","getTripLogActivityAsObservable","tripLogActivity","interval","setInterval","lengthMs","calculateTimeFromTripLogActivity","lengthString","formatMsToTime","length","lastItem","item","state","_core_services_trip_logger_trip_log_state_enum__WEBPACK_IMPORTED_MODULE_3__","moment__WEBPACK_IMPORTED_MODULE_1___default","timestamp","diff","unsubscribe","clearInterval","_angular_core__WEBPACK_IMPORTED_MODULE_5__","selectors","decls","vars","consts","template","TripLogState","routes","path","component","_trip_log_page__WEBPACK_IMPORTED_MODULE_0__","TripLogPageModule","_angular_common__WEBPACK_IMPORTED_MODULE_3__","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","_ionic_angular__WEBPACK_IMPORTED_MODULE_5__","_angular_router__WEBPACK_IMPORTED_MODULE_6__","_ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__","declarations","_components_trip_log_summary_trip_log_summary_component__WEBPACK_IMPORTED_MODULE_1__","imports","_angular_core__WEBPACK_IMPORTED_MODULE_4__","TripLogPage","backgroundGeolocationService","_core_services_trip_logger_trip_log_state_enum__WEBPACK_IMPORTED_MODULE_2__","subscription","getTripLogStateAsObservable","activity","start","stop"],"sources":["webpack:///src/app/components/trip-log-summary/trip-log-summary.component.ts","webpack:///src/app/components/trip-log-summary/trip-log-summary.component.html","webpack:///src/app/core/services/trip-logger/trip-log-state.enum.ts","webpack:///src/app/pages/trip-log/trip-log.module.ts","webpack:///src/app/pages/trip-log/trip-log.page.html","webpack:///src/app/pages/trip-log/trip-log.page.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { TripLoggerService } from '../../core/services/trip-logger/trip-logger.service';\r\nimport moment from 'moment';\r\nimport { HelperService } from '../../core/services/helpers/helper.service';\r\nimport { TripLogItem } from '../../core/services/trip-logger/trip-log-item.model';\r\nimport { TripLogActivity } from '../../core/services/trip-logger/trip-log-activity.model';\r\nimport { TripLogState } from '../../core/services/trip-logger/trip-log-state.enum';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-trip-log-summary',\r\n  templateUrl: './trip-log-summary.component.html',\r\n  styleUrls: ['./trip-log-summary.component.scss']\r\n})\r\nexport class TripLogSummaryComponent implements OnInit, OnDestroy {\r\n  private tripLogSubscription: Subscription;\r\n  private tripLogActivitySubscription: Subscription;\r\n\r\n  lengthString: string;\r\n  interval: NodeJS.Timer;\r\n  tripLog: TripLogItem[];\r\n  tripLogActivity: TripLogActivity[];\r\n\r\n  constructor(\r\n    private tripLoggerService: TripLoggerService,\r\n    private helperService: HelperService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.tripLogSubscription = this.tripLoggerService\r\n      .getTripLogAsObservable()\r\n      .subscribe((tripLog) => {\r\n        this.tripLog = tripLog;\r\n      });\r\n    this.tripLogActivitySubscription = this.tripLoggerService\r\n      .getTripLogActivityAsObservable()\r\n      .subscribe((tripLogActivity) => {\r\n        this.tripLogActivity = tripLogActivity;\r\n      });\r\n\r\n    this.interval = setInterval(async () => {\r\n      const lengthMs = this.calculateTimeFromTripLogActivity(\r\n        this.tripLogActivity\r\n      );\r\n      this.lengthString = this.helperService.formatMsToTime(lengthMs);\r\n    }, 1000);\r\n  }\r\n\r\n  calculateTimeFromTripLogActivity(tripLogActivity: TripLogActivity[]): number {\r\n    let lengthMs = 0;\r\n    if (tripLogActivity.length > 0) {\r\n      let lastItem: TripLogActivity = null;\r\n      for (const item of tripLogActivity) {\r\n        if (item.state === TripLogState.Paused) {\r\n          lengthMs += moment\r\n            .unix(item.timestamp)\r\n            .diff(moment.unix(lastItem.timestamp));\r\n        }\r\n        lastItem = item;\r\n      }\r\n      if (lastItem.state === TripLogState.Running) {\r\n        lengthMs += moment().diff(moment.unix(lastItem.timestamp));\r\n      }\r\n    }\r\n    return lengthMs;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.tripLogSubscription.unsubscribe();\r\n    this.tripLogActivitySubscription.unsubscribe();\r\n    clearInterval(this.interval);\r\n  }\r\n}\r\n","<ion-grid>\r\n  <ion-row>\r\n    <ion-col>\r\n      <ion-label color=\"medium\" position=\"stacked\" class=\"ion-text-uppercase\">Varighet</ion-label>\r\n      <ion-text>{{lengthString}}</ion-text>\r\n    </ion-col>\r\n    <ion-col>\r\n\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>","export enum TripLogState {\r\n  NotStarted = 'NOT_STARTED',\r\n  Paused = 'PAUSED',\r\n  Running = 'RUNNING',\r\n  Stopped = 'STOPPED'\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { TripLogPage } from './trip-log.page';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TripLogSummaryComponent } from '../../components/trip-log-summary/trip-log-summary.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TripLogPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    TranslateModule\r\n  ],\r\n  declarations: [TripLogPage, TripLogSummaryComponent]\r\n})\r\nexport class TripLogPageModule {}\r\n","<ion-header>\r\n  <ion-toolbar color=\"{{ state === 'RUNNING' ? 'success' : 'dark'  }}\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button text=\"\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>\r\n      {{ 'TRIP_LOG.'+state | translate }}\r\n    </ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content>\r\n  <ng-container *ngIf=\"state === 'NOT_STARTED'\">\r\n    <ion-fab vertical=\"bottom\" class=\"x-large\" horizontal=\"center\" slot=\"fixed\">\r\n      <ion-fab-button class=\"x-large\" color=\"success\" (click)=\"startTrip()\">\r\n        {{ 'TRIP_LOG.START' | translate}}\r\n      </ion-fab-button>\r\n    </ion-fab>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"state === 'PAUSED' || state === 'RUNNING'\">\r\n    <app-trip-log-summary></app-trip-log-summary>\r\n    <ion-fab *ngIf=\"state === 'RUNNING'\" vertical=\"bottom\" class=\"x-large\" horizontal=\"center\" slot=\"fixed\">\r\n      <ion-fab-button class=\"x-large\" color=\"danger\" (click)=\"pauseTrip()\">\r\n        {{ 'TRIP_LOG.STOP' | translate}}\r\n      </ion-fab-button>\r\n    </ion-fab>\r\n    <ion-fab *ngIf=\"state === 'PAUSED'\" vertical=\"bottom\" class=\"x-large two-buttons\" horizontal=\"start\" slot=\"fixed\">\r\n      <ion-grid>\r\n        <ion-row>\r\n          <ion-col>\r\n            <ion-fab-button class=\"x-large small-text\" color=\"danger\" (click)=\"completeTrip()\">\r\n              {{ 'TRIP_LOG.COMPLETE' | translate}}\r\n            </ion-fab-button>\r\n          </ion-col>\r\n          <ion-col>\r\n            <ion-fab-button class=\"x-large small-text\" color=\"success\" (click)=\"startTrip()\">\r\n              {{ 'TRIP_LOG.CONTINUE' | translate}}\r\n            </ion-fab-button>\r\n          </ion-col>\r\n        </ion-row>\r\n      </ion-grid>\r\n    </ion-fab>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"state === 'STOPPED'\">\r\n    <app-trip-log-summary></app-trip-log-summary>\r\n  </ng-container>\r\n</ion-content>","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { BackgroundGeolocationService } from '../../core/services/background-geolocation/background-geolocation.service';\r\nimport { TripLoggerService } from '../../core/services/trip-logger/trip-logger.service';\r\nimport { TripLogState } from '../../core/services/trip-logger/trip-log-state.enum';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-trip-log',\r\n  templateUrl: './trip-log.page.html',\r\n  styleUrls: ['./trip-log.page.scss']\r\n})\r\nexport class TripLogPage implements OnInit, OnDestroy {\r\n  state: TripLogState = TripLogState.NotStarted;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private backgroundGeolocationService: BackgroundGeolocationService,\r\n    private tripLoggerService: TripLoggerService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.subscription = this.tripLoggerService\r\n      .getTripLogStateAsObservable()\r\n      .subscribe((activity) => {\r\n        this.state = activity.state;\r\n      });\r\n  }\r\n\r\n  async startTrip() {\r\n    return this.backgroundGeolocationService.start();\r\n  }\r\n\r\n  async pauseTrip() {\r\n    return this.backgroundGeolocationService.stop();\r\n  }\r\n\r\n  async completeTrip() {\r\n    // await this.tripLoggerService.updateState(TripLogState.Stopped);\r\n    // this.state = TripLogState.Stopped;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n"]}