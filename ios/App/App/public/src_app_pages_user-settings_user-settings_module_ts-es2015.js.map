{"version":3,"file":"src_app_pages_user-settings_user-settings_module_ts-es2015.js","mappings":"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","sources":["./src/app/modules/shared/services/app-reset/app-reset.service.ts","./src/app/pages/user-settings/user-settings.module.ts","./src/app/pages/user-settings/user-settings.page.ts","./src/app/pages/user-settings/user-settings.page.html"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { OnReset } from '../../interfaces/on-reset.interface';\r\nimport { DbHelperService } from '../../../../core/services/db-helper/db-helper.service';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { LogLevel } from '../logging/log-level.model';\r\n\r\nconst DEBUG_TAG = 'AppResetService';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppResetService {\r\n  constructor(\r\n    @Inject('OnReset') private services: OnReset[],\r\n    private dbHelperService: DbHelperService,\r\n    private loggingService: LoggingService\r\n  ) {}\r\n\r\n  async resetApp(): Promise<void> {\r\n    await Promise.all(\r\n      this.services.map((s) => Promise.resolve(s.appOnReset()))\r\n    );\r\n    await this.dbHelperService.resetDb((table) => {\r\n      this.loggingService.log(\r\n        `Error reset table ${table}`,\r\n        null,\r\n        LogLevel.Warning,\r\n        DEBUG_TAG\r\n      );\r\n    });\r\n    await Promise.all(\r\n      this.services.map((s) =>\r\n        Promise.resolve(s.appOnResetComplete ? s.appOnResetComplete() : true)\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserSettingsPage } from './user-settings.page';\r\nimport { SharedModule } from '../../modules/shared/shared.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserSettingsPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [SharedModule, RouterModule.forChild(routes)],\r\n  declarations: [UserSettingsPage]\r\n})\r\nexport class UserSettingsPageModule {}\r\n","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\r\nimport { UserSettingService } from '../../core/services/user-setting/user-setting.service';\r\nimport { UserSetting } from '../../core/models/user-settings.model';\r\nimport {\r\n  NavController,\r\n  AlertController,\r\n  LoadingController\r\n} from '@ionic/angular';\r\nimport { KdvService } from 'src/app/modules/common-registration/registration.services';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AppVersionService } from '../../core/services/app-version/app-version.service';\r\nimport { AppVersion } from '../../core/models/app-version.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { LoggingService } from '../../modules/shared/services/logging/logging.service';\r\nimport { LogLevel } from '../../modules/shared/services/logging/log-level.model';\r\nimport { AppResetService } from '../../modules/shared/services/app-reset/app-reset.service';\r\nimport { SelectOption } from '../../modules/shared/components/input/select/select-option.model';\r\nimport { FileLoggingService } from 'src/app/modules/shared/services/logging/file-logging.service';\r\n\r\nconst DEBUG_TAG = 'UserSettingsPage';\r\nconst TAPS_TO_ENABLE_TEST_MODE = 7;\r\n\r\n@Component({\r\n  selector: 'app-user-settings',\r\n  templateUrl: './user-settings.page.html',\r\n  styleUrls: ['./user-settings.page.scss']\r\n})\r\nexport class UserSettingsPage implements OnInit, OnDestroy {\r\n  userSettings: UserSetting;\r\n  showAdvanced = false;\r\n  isUpdating = false;\r\n  version: AppVersion;\r\n  private subscriptions: Subscription[] = [];\r\n  private versionClicks = 0;\r\n\r\n  get appModeOptions() {\r\n    const options: SelectOption[] = [\r\n      { id: 'PROD', text: 'Regobs' },\r\n      { id: 'DEMO', text: 'Demo Regobs' },\r\n      {\r\n        id: 'TEST',\r\n        text: 'Test Regobs',\r\n        disabled: !this.userSettings.featureToggleDeveloperMode\r\n      }\r\n    ];\r\n    return options;\r\n  }\r\n\r\n  constructor(\r\n    private userSettingService: UserSettingService,\r\n    private kdvService: KdvService,\r\n    private ngZone: NgZone,\r\n    private loggingService: LoggingService,\r\n    private translateService: TranslateService,\r\n    private alertController: AlertController,\r\n    private appVersionService: AppVersionService,\r\n    private loadingController: LoadingController,\r\n    private appResetService: AppResetService,\r\n    private navController: NavController,\r\n    private fileLoggingService: FileLoggingService\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.versionClicks = 0;\r\n    this.subscriptions.push(\r\n      this.userSettingService.userSetting$.subscribe((val) => {\r\n        this.ngZone.run(() => {\r\n          this.userSettings = val;\r\n        });\r\n      })\r\n    );\r\n    const appver = await this.appVersionService.getAppVersion();\r\n    this.ngZone.run(() => {\r\n      this.version = appver;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stopSubscriptions();\r\n  }\r\n\r\n  private stopSubscriptions() {\r\n    for (const subscription of this.subscriptions) {\r\n      subscription.unsubscribe();\r\n    }\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  versionClick() {\r\n    this.versionClicks++;\r\n    if (\r\n      this.versionClicks >= TAPS_TO_ENABLE_TEST_MODE &&\r\n      !this.userSettings.featureToggleDeveloperMode\r\n    ) {\r\n      this.userSettings.featureToggleDeveloperMode = true;\r\n      this.updateSettings();\r\n    }\r\n  }\r\n\r\n  updateSettings() {\r\n    this.userSettingService.saveUserSettings(this.userSettings);\r\n  }\r\n\r\n  async toggleAdvanced() {\r\n    this.showAdvanced = !this.showAdvanced;\r\n  }\r\n\r\n  async updateDropdowns() {\r\n    this.isUpdating = true;\r\n    this.kdvService.update();\r\n    await this.showKdvElementsUpdated(true);\r\n    this.ngZone.run(() => {\r\n      this.isUpdating = false;\r\n    });\r\n  }\r\n\r\n  async sendLogs() {\r\n    this.fileLoggingService.sendLogsByEmail();\r\n  }\r\n\r\n  async showKdvElementsUpdated(ok: boolean) {\r\n    const translations = await this.translateService\r\n      .get([\r\n        'SETTINGS.DROPDOWNS_UPDATED',\r\n        'SETTINGS.DROPDOWNS_FAILED',\r\n        'ALERT.OK'\r\n      ])\r\n      .toPromise();\r\n    const alert = await this.alertController.create({\r\n      message: ok\r\n        ? translations['SETTINGS.DROPDOWNS_UPDATED']\r\n        : translations['SETTINGS.DROPDOWNS_FAILED'],\r\n      buttons: [translations['ALERT.OK']]\r\n    });\r\n    alert.present();\r\n    return alert.onDidDismiss();\r\n  }\r\n\r\n  async confirmReset() {\r\n    const translations = await this.translateService\r\n      .get(['SETTINGS.CONFIRM_RESET', 'ALERT.OK', 'ALERT.CANCEL'])\r\n      .toPromise();\r\n    const alert = await this.alertController.create({\r\n      message: translations['SETTINGS.CONFIRM_RESET'],\r\n      buttons: [\r\n        {\r\n          text: translations['ALERT.OK'],\r\n          handler: () => this.reset()\r\n        },\r\n        {\r\n          text: translations['ALERT.CANCEL'],\r\n          role: 'cancel'\r\n        }\r\n      ]\r\n    });\r\n    alert.present();\r\n  }\r\n\r\n  async reset() {\r\n    const message = await this.translateService\r\n      .get('SETTINGS.RESETTING')\r\n      .toPromise();\r\n    const loading = await this.loadingController.create({\r\n      message\r\n    });\r\n    loading.present();\r\n    this.isUpdating = true;\r\n    // TODO: Implement some kind of subscription manager to stop all subscriptions and resubscribe when complete\r\n    try {\r\n      await this.doReset();\r\n    } catch (err) {\r\n      this.loggingService.log(\r\n        'Could not reset db',\r\n        err,\r\n        LogLevel.Warning,\r\n        DEBUG_TAG\r\n      );\r\n    }\r\n    this.ngZone.run(() => {\r\n      this.isUpdating = false;\r\n      loading.dismiss();\r\n      this.navController.navigateRoot('start-wizard');\r\n    });\r\n  }\r\n\r\n  private async doReset() {\r\n    this.stopSubscriptions();\r\n    return this.appResetService.resetApp();\r\n  }\r\n}\r\n","<ion-header>\r\n  <ion-toolbar appHeaderColor mode=\"ios\">\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button defaultHref=\"/\" text=\"\"></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>\r\n      {{\"SETTINGS.TITLE\" | translate}}\r\n    </ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n<ion-content class=\"ion-padding\" *ngIf=\"userSettings\">\r\n  <ion-list lines=\"full\">\r\n    <ion-item>\r\n      <ion-label>\r\n        {{'SETTINGS.EMAIL_RECEIPT' | translate}}\r\n      </ion-label>\r\n      <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.emailReceipt\" (ngModelChange)=\"updateSettings()\"></ion-toggle>\r\n    </ion-item>\r\n    <ion-item>\r\n      <ion-label>\r\n        {{'SETTINGS.ALLOW_ANALYTICS' | translate}}\r\n      </ion-label>\r\n      <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.consentForSendingAnalytics\" (ngModelChange)=\"updateSettings()\">\r\n      </ion-toggle>\r\n    </ion-item>\r\n  </ion-list>\r\n  <ion-button (click)=\"toggleAdvanced()\" fill=\"clear\" expand=\"full\">\r\n    <ion-icon slot=\"start\" [name]=\"(showAdvanced ? 'chevron-up' : 'chevron-down')\"></ion-icon>\r\n    {{( showAdvanced ? 'SETTINGS.HIDE_ADVANCED' : 'SETTINGS.SHOW_ADVANCED') | translate }}\r\n  </ion-button>\r\n  <ng-container *ngIf=\"showAdvanced\">\r\n    <ion-list lines=\"full\">\r\n      <ion-item (click)=\"versionClick()\">\r\n        <ion-label position=\"stacked\" color=\"medium\" class=\"ion-text-uppercase\">{{'SETTINGS.APP_VERSION' | translate}}\r\n        </ion-label>\r\n        <ion-text class=\"ion-align-self-start\" class=\"build-version\">\r\n          {{version.version }} ({{ version.buildNumber }})\r\n        </ion-text>\r\n        <ion-text class=\"build-rev ion-align-self-start\" color=\"medium\">\r\n          {{ version.revision }} - {{ version.date | formatDate | async }}\r\n        </ion-text>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label position=\"stacked\" color=\"medium\" class=\"ion-text-uppercase\">{{ \"SETTINGS.APPMODE\" | translate }}\r\n        </ion-label>\r\n        <app-select [(selectedValue)]=\"userSettings.appMode\" [options]=\"appModeOptions\"\r\n          (selectedValueChange)=\"updateSettings()\" [showReset]=\"false\"> </app-select>\r\n      </ion-item>\r\n      <ion-item>\r\n        <ion-label>\r\n          {{'SETTINGS.USE_RETINA_MAP' | translate}}\r\n        </ion-label>\r\n        <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.useRetinaMap\" (ngModelChange)=\"updateSettings()\">\r\n        </ion-toggle>\r\n      </ion-item>\r\n      <ion-item *ngIf=\"userSettings.featureToggleDeveloperMode\">\r\n        <ion-label>\r\n          GPS debug\r\n        </ion-label>\r\n        <ion-toggle slot=\"end\" [(ngModel)]=\"userSettings.featureToggeGpsDebug\" (ngModelChange)=\"updateSettings()\">\r\n        </ion-toggle>\r\n      </ion-item>\r\n    </ion-list>\r\n    <ion-list lines=\"none\">\r\n      <ion-button expand=\"block\" [disabled]=\"isUpdating\" (click)=\"updateDropdowns()\">\r\n        <ion-icon slot=\"start\" name=\"refresh\"></ion-icon>\r\n        {{ \"SETTINGS.UPDATE_DROPDOWNS\" | translate }}\r\n      </ion-button>\r\n      <ion-button expand=\"block\" [disabled]=\"isUpdating\" (click)=\"sendLogs()\">\r\n        <ion-icon slot=\"start\" name=\"mail-outline\"></ion-icon>\r\n        Send logger til Regobs Team\r\n      </ion-button>\r\n      <ion-button class=\"reset-button\" color=\"danger\" expand=\"block\" [disabled]=\"isUpdating\" (click)=\"confirmReset()\">\r\n        <ion-icon slot=\"start\" name=\"medkit\"></ion-icon>\r\n        {{ \"SETTINGS.RESET\" | translate }}\r\n      </ion-button>\r\n    </ion-list>\r\n  </ng-container>\r\n</ion-content>"],"names":[],"sourceRoot":"webpack:///"}