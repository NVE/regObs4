"use strict";
(self["webpackChunkregobs4"] = self["webpackChunkregobs4"] || []).push([["node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"],{

/***/ 16735:
/*!**************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_nav": function() { return /* binding */ Nav; },
/* harmony export */   "ion_nav_link": function() { return /* binding */ NavLink; }
/* harmony export */ });
/* harmony import */ var C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ 80151);
/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-7a8b7a1c.js */ 76842);
/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-63a97a32.js */ 33124);
/* harmony import */ var _cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubic-bezier-eea9a7a9.js */ 68161);
/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers-dd7e4b7b.js */ 40693);
/* harmony import */ var _index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-931440b1.js */ 39546);
/* harmony import */ var _framework_delegate_4392cd63_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./framework-delegate-4392cd63.js */ 85356);







const VIEW_STATE_NEW = 1;
const VIEW_STATE_ATTACHED = 2;
const VIEW_STATE_DESTROYED = 3;

class ViewController {
  constructor(component, params) {
    this.component = component;
    this.params = params;
    this.state = VIEW_STATE_NEW;
  }

  init(container) {
    var _this = this;

    return (0,C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      _this.state = VIEW_STATE_ATTACHED;

      if (!_this.element) {
        const component = _this.component;
        _this.element = yield (0,_framework_delegate_4392cd63_js__WEBPACK_IMPORTED_MODULE_6__.a)(_this.delegate, container, component, ['ion-page', 'ion-page-invisible'], _this.params);
      }
    })();
  }
  /**
   * DOM WRITE
   */


  _destroy() {
    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');
    const element = this.element;

    if (element) {
      if (this.delegate) {
        this.delegate.removeViewFromDom(element.parentElement, element);
      } else {
        element.remove();
      }
    }

    this.nav = undefined;
    this.state = VIEW_STATE_DESTROYED;
  }

}

const matches = (view, id, params) => {
  if (!view) {
    return false;
  }

  if (view.component !== id) {
    return false;
  }

  const currentParams = view.params;

  if (currentParams === params) {
    return true;
  }

  if (!currentParams && !params) {
    return true;
  }

  if (!currentParams || !params) {
    return false;
  }

  const keysA = Object.keys(currentParams);
  const keysB = Object.keys(params);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (const key of keysA) {
    if (currentParams[key] !== params[key]) {
      return false;
    }
  }

  return true;
};

const convertToView = (page, params) => {
  if (!page) {
    return null;
  }

  if (page instanceof ViewController) {
    return page;
  }

  return new ViewController(page, params);
};

const convertToViews = pages => {
  return pages.map(page => {
    if (page instanceof ViewController) {
      return page;
    }

    if ('component' in page) {
      /**
       * TODO Ionic 6:
       * Consider switching to just using `undefined` here
       * as well as on the public interfaces and on
       * `NavComponentWithProps`. Previously `pages` was
       * of type `any[]` so TypeScript did not catch this.
       */
      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);
    }

    return convertToView(page, undefined);
  }).filter(v => v !== null);
};

const navCss = ":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}";
const Nav = class {
  constructor(hostRef) {
    (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionNavWillLoad = (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavWillLoad", 7);
    this.ionNavWillChange = (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavWillChange", 3);
    this.ionNavDidChange = (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionNavDidChange", 3);
    this.transInstr = [];
    this.animationEnabled = true;
    this.useRouter = false;
    this.isTransitioning = false;
    this.destroyed = false;
    this.views = [];
    /**
     * If `true`, the nav should animate the transition of components.
     */

    this.animated = true;
  }

  swipeGestureChanged() {
    if (this.gesture) {
      this.gesture.enable(this.swipeGesture === true);
    }
  }

  rootChanged() {
    if (this.root !== undefined) {
      if (!this.useRouter) {
        this.setRoot(this.root, this.rootParams);
      }
    }
  }

  componentWillLoad() {
    this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');

    if (this.swipeGesture === undefined) {
      const mode = (0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
      this.swipeGesture = _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('swipeBackEnabled', mode === 'ios');
    }

    this.ionNavWillLoad.emit();
  }

  componentDidLoad() {
    var _this2 = this;

    return (0,C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      _this2.rootChanged();

      _this2.gesture = (yield __webpack_require__.e(/*! import() */ "node_modules_ionic_core_dist_esm_swipe-back-fae97365_js").then(__webpack_require__.bind(__webpack_require__, /*! ./swipe-back-fae97365.js */ 15506))).createSwipeBackGesture(_this2.el, _this2.canStart.bind(_this2), _this2.onStart.bind(_this2), _this2.onMove.bind(_this2), _this2.onEnd.bind(_this2));

      _this2.swipeGestureChanged();
    })();
  }

  disconnectedCallback() {
    for (const view of this.views) {
      (0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.d);

      view._destroy();
    }

    if (this.gesture) {
      this.gesture.destroy();
      this.gesture = undefined;
    } // release swipe back gesture and transition


    this.transInstr.length = this.views.length = 0;
    this.destroyed = true;
  }
  /**
   * Push a new component onto the current navigation stack. Pass any additional
   * information along as an object. This additional information is accessible
   * through NavParams.
   *
   * @param component The component to push onto the navigation stack.
   * @param componentProps Any properties of the component.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  push(component, componentProps, opts, done) {
    return this.queueTrns({
      insertStart: -1,
      insertViews: [{
        component,
        componentProps
      }],
      opts
    }, done);
  }
  /**
   * Inserts a component into the navigation stack at the specified index.
   * This is useful to add a component at any point in the navigation stack.
   *
   * @param insertIndex The index to insert the component at in the stack.
   * @param component The component to insert into the navigation stack.
   * @param componentProps Any properties of the component.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  insert(insertIndex, component, componentProps, opts, done) {
    return this.queueTrns({
      insertStart: insertIndex,
      insertViews: [{
        component,
        componentProps
      }],
      opts
    }, done);
  }
  /**
   * Inserts an array of components into the navigation stack at the specified index.
   * The last component in the array will become instantiated as a view, and animate
   * in to become the active view.
   *
   * @param insertIndex The index to insert the components at in the stack.
   * @param insertComponents The components to insert into the navigation stack.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  insertPages(insertIndex, insertComponents, opts, done) {
    return this.queueTrns({
      insertStart: insertIndex,
      insertViews: insertComponents,
      opts
    }, done);
  }
  /**
   * Pop a component off of the navigation stack. Navigates back from the current
   * component.
   *
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  pop(opts, done) {
    return this.queueTrns({
      removeStart: -1,
      removeCount: 1,
      opts
    }, done);
  }
  /**
   * Pop to a specific index in the navigation stack.
   *
   * @param indexOrViewCtrl The index or view controller to pop to.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  popTo(indexOrViewCtrl, opts, done) {
    const tiConfig = {
      removeStart: -1,
      removeCount: -1,
      opts
    };

    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {
      tiConfig.removeView = indexOrViewCtrl;
      tiConfig.removeStart = 1;
    } else if (typeof indexOrViewCtrl === 'number') {
      tiConfig.removeStart = indexOrViewCtrl + 1;
    }

    return this.queueTrns(tiConfig, done);
  }
  /**
   * Navigate back to the root of the stack, no matter how far back that is.
   *
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  popToRoot(opts, done) {
    return this.queueTrns({
      removeStart: 1,
      removeCount: -1,
      opts
    }, done);
  }
  /**
   * Removes a component from the navigation stack at the specified index.
   *
   * @param startIndex The number to begin removal at.
   * @param removeCount The number of components to remove.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  removeIndex(startIndex, removeCount = 1, opts, done) {
    return this.queueTrns({
      removeStart: startIndex,
      removeCount,
      opts
    }, done);
  }
  /**
   * Set the root for the current navigation stack to a component.
   *
   * @param component The component to set as the root of the navigation stack.
   * @param componentProps Any properties of the component.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  setRoot(component, componentProps, opts, done) {
    return this.setPages([{
      component,
      componentProps
    }], opts, done);
  }
  /**
   * Set the views of the current navigation stack and navigate to the last view.
   * By default animations are disabled, but they can be enabled by passing options
   * to the navigation controller. Navigation parameters can also be passed to the
   * individual pages in the array.
   *
   * @param views The list of views to set as the navigation stack.
   * @param opts The navigation options.
   * @param done The transition complete function.
   */


  setPages(views, opts, done) {
    if (opts == null) {
      opts = {};
    } // if animation wasn't set to true then default it to NOT animate


    if (opts.animated !== true) {
      opts.animated = false;
    }

    return this.queueTrns({
      insertStart: 0,
      insertViews: views,
      removeStart: 0,
      removeCount: -1,
      opts
    }, done);
  }
  /** @internal */


  setRouteId(id, params, direction, animation) {
    const active = this.getActiveSync();

    if (matches(active, id, params)) {
      return Promise.resolve({
        changed: false,
        element: active.element
      });
    }

    let resolve;
    const promise = new Promise(r => resolve = r);
    let finish;
    const commonOpts = {
      updateURL: false,
      viewIsReady: enteringEl => {
        let mark;
        const p = new Promise(r => mark = r);
        resolve({
          changed: true,
          element: enteringEl,
          markVisible: function () {
            var _ref = (0,C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
              mark();
              yield finish;
            });

            return function markVisible() {
              return _ref.apply(this, arguments);
            };
          }()
        });
        return p;
      }
    };

    if (direction === 'root') {
      finish = this.setRoot(id, params, commonOpts);
    } else {
      const viewController = this.views.find(v => matches(v, id, params));

      if (viewController) {
        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {
          direction: 'back',
          animationBuilder: animation
        }));
      } else if (direction === 'forward') {
        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {
          animationBuilder: animation
        }));
      } else if (direction === 'back') {
        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {
          direction: 'back',
          animated: true,
          animationBuilder: animation
        }));
      }
    }

    return promise;
  }
  /** @internal */


  getRouteId() {
    var _this3 = this;

    return (0,C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      const active = _this3.getActiveSync();

      return active ? {
        id: active.element.tagName,
        params: active.params,
        element: active.element
      } : undefined;
    })();
  }
  /**
   * Get the active view.
   */


  getActive() {
    return Promise.resolve(this.getActiveSync());
  }
  /**
   * Get the view at the specified index.
   *
   * @param index The index of the view.
   */


  getByIndex(index) {
    return Promise.resolve(this.views[index]);
  }
  /**
   * Returns `true` if the current view can go back.
   *
   * @param view The view to check.
   */


  canGoBack(view) {
    return Promise.resolve(this.canGoBackSync(view));
  }
  /**
   * Get the previous view.
   *
   * @param view The view to get.
   */


  getPrevious(view) {
    return Promise.resolve(this.getPreviousSync(view));
  }

  getLength() {
    return this.views.length;
  }

  getActiveSync() {
    return this.views[this.views.length - 1];
  }

  canGoBackSync(view = this.getActiveSync()) {
    return !!(view && this.getPreviousSync(view));
  }

  getPreviousSync(view = this.getActiveSync()) {
    if (!view) {
      return undefined;
    }

    const views = this.views;
    const index = views.indexOf(view);
    return index > 0 ? views[index - 1] : undefined;
  } // _queueTrns() adds a navigation stack change to the queue and schedules it to run:
  // 1. _nextTrns(): consumes the next transition in the queue
  // 2. _viewInit(): initializes enteringView if required
  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue
  // 4. _postViewInit(): add/remove the views from the navigation stack
  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run
  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM
  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.
  // 8. _transitionFinish(): called once the transition finishes
  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.


  queueTrns(ti, done) {
    var _this4 = this;

    return (0,C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      if (_this4.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {
        return Promise.resolve(false);
      }

      const promise = new Promise((resolve, reject) => {
        ti.resolve = resolve;
        ti.reject = reject;
      });
      ti.done = done;
      /**
       * If using router, check to see if navigation hooks
       * will allow us to perform this transition. This
       * is required in order for hooks to work with
       * the ion-back-button or swipe to go back.
       */

      if (ti.opts && ti.opts.updateURL !== false && _this4.useRouter) {
        const router = document.querySelector('ion-router');

        if (router) {
          const canTransition = yield router.canTransition();

          if (canTransition === false) {
            return Promise.resolve(false);
          } else if (typeof canTransition === 'string') {
            router.push(canTransition, ti.opts.direction || 'back');
            return Promise.resolve(false);
          }
        }
      } // Normalize empty


      if (ti.insertViews && ti.insertViews.length === 0) {
        ti.insertViews = undefined;
      } // Enqueue transition instruction


      _this4.transInstr.push(ti); // if there isn't a transition already happening
      // then this will kick off this transition


      _this4.nextTrns();

      return promise;
    })();
  }

  success(result, ti) {
    if (this.destroyed) {
      this.fireError('nav controller was destroyed', ti);
      return;
    }

    if (ti.done) {
      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);
    }

    ti.resolve(result.hasCompleted);

    if (ti.opts.updateURL !== false && this.useRouter) {
      const router = document.querySelector('ion-router');

      if (router) {
        const direction = result.direction === 'back' ? 'back' : 'forward';
        router.navChanged(direction);
      }
    }
  }

  failed(rejectReason, ti) {
    if (this.destroyed) {
      this.fireError('nav controller was destroyed', ti);
      return;
    }

    this.transInstr.length = 0;
    this.fireError(rejectReason, ti);
  }

  fireError(rejectReason, ti) {
    if (ti.done) {
      ti.done(false, false, rejectReason);
    }

    if (ti.reject && !this.destroyed) {
      ti.reject(rejectReason);
    } else {
      ti.resolve(false);
    }
  }

  nextTrns() {
    // this is the framework's bread 'n butta function
    // only one transition is allowed at any given time
    if (this.isTransitioning) {
      return false;
    } // there is no transition happening right now
    // get the next instruction


    const ti = this.transInstr.shift();

    if (!ti) {
      return false;
    }

    this.runTransition(ti);
    return true;
  }

  runTransition(ti) {
    var _this5 = this;

    return (0,C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      try {
        // set that this nav is actively transitioning
        _this5.ionNavWillChange.emit();

        _this5.isTransitioning = true;

        _this5.prepareTI(ti);

        const leavingView = _this5.getActiveSync();

        const enteringView = _this5.getEnteringView(ti, leavingView);

        if (!leavingView && !enteringView) {
          throw new Error('no views in the stack to be removed');
        }

        if (enteringView && enteringView.state === VIEW_STATE_NEW) {
          yield enteringView.init(_this5.el);
        }

        _this5.postViewInit(enteringView, leavingView, ti); // Needs transition?


        const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;

        if (requiresTransition && ti.opts && leavingView) {
          const isBackDirection = ti.opts.direction === 'back';
          /**
           * If heading back, use the entering page's animation
           * unless otherwise specified by the developer.
           */

          if (isBackDirection) {
            ti.opts.animationBuilder = ti.opts.animationBuilder || enteringView && enteringView.animationBuilder;
          }

          leavingView.animationBuilder = ti.opts.animationBuilder;
        }

        const result = requiresTransition ? yield _this5.transition(enteringView, leavingView, ti) : {
          // transition is not required, so we are already done!
          // they're inserting/removing the views somewhere in the middle or
          // beginning, so visually nothing needs to animate/transition
          // resolve immediately because there's no animation that's happening
          hasCompleted: true,
          requiresTransition: false
        };

        _this5.success(result, ti);

        _this5.ionNavDidChange.emit();
      } catch (rejectReason) {
        _this5.failed(rejectReason, ti);
      }

      _this5.isTransitioning = false;

      _this5.nextTrns();
    })();
  }

  prepareTI(ti) {
    const viewsLength = this.views.length;
    ti.opts = ti.opts || {};

    if (ti.opts.delegate === undefined) {
      ti.opts.delegate = this.delegate;
    }

    if (ti.removeView !== undefined) {
      (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(ti.removeStart !== undefined, 'removeView needs removeStart');
      (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(ti.removeCount !== undefined, 'removeView needs removeCount');
      const index = this.views.indexOf(ti.removeView);

      if (index < 0) {
        throw new Error('removeView was not found');
      }

      ti.removeStart += index;
    }

    if (ti.removeStart !== undefined) {
      if (ti.removeStart < 0) {
        ti.removeStart = viewsLength - 1;
      }

      if (ti.removeCount < 0) {
        ti.removeCount = viewsLength - ti.removeStart;
      }

      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;
    }

    if (ti.insertViews) {
      // allow -1 to be passed in to auto push it on the end
      // and clean up the index if it's larger then the size of the stack
      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {
        ti.insertStart = viewsLength;
      }

      ti.enteringRequiresTransition = ti.insertStart === viewsLength;
    }

    const insertViews = ti.insertViews;

    if (!insertViews) {
      return;
    }

    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(insertViews.length > 0, 'length can not be zero');
    const viewControllers = convertToViews(insertViews);

    if (viewControllers.length === 0) {
      throw new Error('invalid views to insert');
    } // Check all the inserted view are correct


    for (const view of viewControllers) {
      view.delegate = ti.opts.delegate;
      const nav = view.nav;

      if (nav && nav !== this) {
        throw new Error('inserted view was already inserted');
      }

      if (view.state === VIEW_STATE_DESTROYED) {
        throw new Error('inserted view was already destroyed');
      }
    }

    ti.insertViews = viewControllers;
  }

  getEnteringView(ti, leavingView) {
    const insertViews = ti.insertViews;

    if (insertViews !== undefined) {
      // grab the very last view of the views to be inserted
      // and initialize it as the new entering view
      return insertViews[insertViews.length - 1];
    }

    const removeStart = ti.removeStart;

    if (removeStart !== undefined) {
      const views = this.views;
      const removeEnd = removeStart + ti.removeCount;

      for (let i = views.length - 1; i >= 0; i--) {
        const view = views[i];

        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {
          return view;
        }
      }
    }

    return undefined;
  }

  postViewInit(enteringView, leavingView, ti) {
    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(leavingView || enteringView, 'Both leavingView and enteringView are null');
    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(ti.resolve, 'resolve must be valid');
    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(ti.reject, 'reject must be valid');
    const opts = ti.opts;
    const insertViews = ti.insertViews;
    const removeStart = ti.removeStart;
    const removeCount = ti.removeCount;
    let destroyQueue; // there are views to remove

    if (removeStart !== undefined && removeCount !== undefined) {
      (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(removeStart >= 0, 'removeStart can not be negative');
      (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(removeCount >= 0, 'removeCount can not be negative');
      destroyQueue = [];

      for (let i = 0; i < removeCount; i++) {
        const view = this.views[i + removeStart];

        if (view && view !== enteringView && view !== leavingView) {
          destroyQueue.push(view);
        }
      } // default the direction to "back"


      opts.direction = opts.direction || 'back';
    }

    const finalBalance = this.views.length + (insertViews !== undefined ? insertViews.length : 0) - (removeCount !== undefined ? removeCount : 0);
    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(finalBalance >= 0, 'final balance can not be negative');

    if (finalBalance === 0) {
      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);
      throw new Error('navigation stack needs at least one root page');
    } // At this point the transition can not be rejected, any throw should be an error
    // there are views to insert


    if (insertViews) {
      // add the views to the
      let insertIndex = ti.insertStart;

      for (const view of insertViews) {
        this.insertViewAt(view, insertIndex);
        insertIndex++;
      }

      if (ti.enteringRequiresTransition) {
        // default to forward if not already set
        opts.direction = opts.direction || 'forward';
      }
    } // if the views to be removed are in the beginning or middle
    // and there is not a view that needs to visually transition out
    // then just destroy them and don't transition anything
    // batch all of lifecycles together
    // let's make sure, callbacks are zoned


    if (destroyQueue && destroyQueue.length > 0) {
      for (const view of destroyQueue) {
        (0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.b);
        (0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.c);
        (0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.l)(view.element, _index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.d);
      } // once all lifecycle events has been delivered, we can safely detroy the views


      for (const view of destroyQueue) {
        this.destroyView(view);
      }
    }
  }

  transition(enteringView, leavingView, ti) {
    var _this6 = this;

    return (0,C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      // we should animate (duration > 0) if the pushed page is not the first one (startup)
      // or if it is a portal (modal, actionsheet, etc.)
      const opts = ti.opts;
      const progressCallback = opts.progressAnimation ? ani => _this6.sbAni = ani : undefined;
      const mode = (0,_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this6);
      const enteringEl = enteringView.element;
      const leavingEl = leavingView && leavingView.element;
      const animationOpts = Object.assign(Object.assign({
        mode,
        showGoBack: _this6.canGoBackSync(enteringView),
        baseEl: _this6.el,
        progressCallback,
        animated: _this6.animated && _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('animated', true),
        enteringEl,
        leavingEl
      }, opts), {
        animationBuilder: opts.animationBuilder || _this6.animation || _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.c.get('navAnimation')
      });
      const {
        hasCompleted
      } = yield (0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.t)(animationOpts);
      return _this6.transitionFinish(hasCompleted, enteringView, leavingView, opts);
    })();
  }

  transitionFinish(hasCompleted, enteringView, leavingView, opts) {
    const cleanupView = hasCompleted ? enteringView : leavingView;

    if (cleanupView) {
      this.cleanup(cleanupView);
    }

    return {
      hasCompleted,
      requiresTransition: true,
      enteringView,
      leavingView,
      direction: opts.direction
    };
  }

  insertViewAt(view, index) {
    const views = this.views;
    const existingIndex = views.indexOf(view);

    if (existingIndex > -1) {
      // this view is already in the stack!!
      // move it to its new location
      (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(view.nav === this, 'view is not part of the nav');
      views.splice(index, 0, views.splice(existingIndex, 1)[0]);
    } else {
      (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(!view.nav, 'nav is used'); // this is a new view to add to the stack
      // create the new entering view

      view.nav = this; // insert the entering view into the correct index in the stack

      views.splice(index, 0, view);
    }
  }

  removeView(view) {
    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');
    const views = this.views;
    const index = views.indexOf(view);
    (0,_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_4__.l)(index > -1, 'view must be part of the stack');

    if (index >= 0) {
      views.splice(index, 1);
    }
  }

  destroyView(view) {
    view._destroy();

    this.removeView(view);
  }
  /**
   * DOM WRITE
   */


  cleanup(activeView) {
    // ok, cleanup time!! Destroy all of the views that are
    // INACTIVE and come after the active view
    // only do this if the views exist, though
    if (this.destroyed) {
      return;
    }

    const views = this.views;
    const activeViewIndex = views.indexOf(activeView);

    for (let i = views.length - 1; i >= 0; i--) {
      const view = views[i];
      /**
       * When inserting multiple views via insertPages
       * the last page will be transitioned to, but the
       * others will not be. As a result, a DOM element
       * will only be created for the last page inserted.
       * As a result, it is possible to have views in the
       * stack that do not have `view.element` yet.
       */

      const element = view.element;

      if (element) {
        if (i > activeViewIndex) {
          // this view comes after the active view
          // let's unload it
          (0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.l)(element, _index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.d);
          this.destroyView(view);
        } else if (i < activeViewIndex) {
          // this view comes before the active view
          // and it is not a portal then ensure it is hidden
          (0,_index_931440b1_js__WEBPACK_IMPORTED_MODULE_5__.s)(element, true);
        }
      }
    }
  }

  canStart() {
    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();
  }

  onStart() {
    this.queueTrns({
      removeStart: -1,
      removeCount: 1,
      opts: {
        direction: 'back',
        progressAnimation: true
      }
    }, undefined);
  }

  onMove(stepValue) {
    if (this.sbAni) {
      this.sbAni.progressStep(stepValue);
    }
  }

  onEnd(shouldComplete, stepValue, dur) {
    if (this.sbAni) {
      this.animationEnabled = false;
      this.sbAni.onFinish(() => {
        this.animationEnabled = true;
      }, {
        oneTimeCallback: true
      }); // Account for rounding errors in JS

      let newStepValue = shouldComplete ? -0.001 : 0.001;
      /**
       * Animation will be reversed here, so need to
       * reverse the easing curve as well
       *
       * Additionally, we need to account for the time relative
       * to the new easing curve, as `stepValue` is going to be given
       * in terms of a linear curve.
       */

      if (!shouldComplete) {
        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');
        newStepValue += (0,_cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];
      } else {
        newStepValue += (0,_cubic_bezier_eea9a7a9_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];
      }

      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);
    }
  }

  render() {
    return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null);
  }

  get el() {
    return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

  static get watchers() {
    return {
      "swipeGesture": ["swipeGestureChanged"],
      "root": ["rootChanged"]
    };
  }

};
Nav.style = navCss;

const navLink = (el, routerDirection, component, componentProps, routerAnimation) => {
  const nav = el.closest('ion-nav');

  if (nav) {
    if (routerDirection === 'forward') {
      if (component !== undefined) {
        return nav.push(component, componentProps, {
          skipIfBusy: true,
          animationBuilder: routerAnimation
        });
      }
    } else if (routerDirection === 'root') {
      if (component !== undefined) {
        return nav.setRoot(component, componentProps, {
          skipIfBusy: true,
          animationBuilder: routerAnimation
        });
      }
    } else if (routerDirection === 'back') {
      return nav.pop({
        skipIfBusy: true,
        animationBuilder: routerAnimation
      });
    }
  }

  return Promise.resolve(false);
};

const NavLink = class {
  constructor(hostRef) {
    (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * The transition direction when navigating to another page.
     */

    this.routerDirection = 'forward';

    this.onClick = () => {
      return navLink(this.el, this.routerDirection, this.component, this.componentProps, this.routerAnimation);
    };
  }

  render() {
    return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick
    });
  }

  get el() {
    return (0,_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLW5hdl8yX2VudHJ5X2pzLWVzMjAxNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTTRCLGNBQWMsR0FBRyxDQUF2QjtBQUNBLE1BQU1DLG1CQUFtQixHQUFHLENBQTVCO0FBQ0EsTUFBTUMsb0JBQW9CLEdBQUcsQ0FBN0I7O0FBQ0EsTUFBTUMsY0FBTixDQUFxQjtBQUNuQkMsRUFBQUEsV0FBVyxDQUFDQyxTQUFELEVBQVlDLE1BQVosRUFBb0I7QUFDN0IsU0FBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLQyxLQUFMLEdBQWFQLGNBQWI7QUFDRDs7QUFDS1EsRUFBQUEsSUFBSSxDQUFDQyxTQUFELEVBQVk7QUFBQTs7QUFBQTtBQUNwQixXQUFJLENBQUNGLEtBQUwsR0FBYU4sbUJBQWI7O0FBQ0EsVUFBSSxDQUFDLEtBQUksQ0FBQ1MsT0FBVixFQUFtQjtBQUNqQixjQUFNTCxTQUFTLEdBQUcsS0FBSSxDQUFDQSxTQUF2QjtBQUNBLGFBQUksQ0FBQ0ssT0FBTCxTQUFxQlgsa0VBQWUsQ0FBQyxLQUFJLENBQUNZLFFBQU4sRUFBZ0JGLFNBQWhCLEVBQTJCSixTQUEzQixFQUFzQyxDQUFDLFVBQUQsRUFBYSxvQkFBYixDQUF0QyxFQUEwRSxLQUFJLENBQUNDLE1BQS9FLENBQXBDO0FBQ0Q7QUFMbUI7QUFNckI7QUFDRDtBQUNGO0FBQ0E7OztBQUNFTSxFQUFBQSxRQUFRLEdBQUc7QUFDVHhCLElBQUFBLHVEQUFNLENBQUMsS0FBS21CLEtBQUwsS0FBZUwsb0JBQWhCLEVBQXNDLDZCQUF0QyxDQUFOO0FBQ0EsVUFBTVEsT0FBTyxHQUFHLEtBQUtBLE9BQXJCOztBQUNBLFFBQUlBLE9BQUosRUFBYTtBQUNYLFVBQUksS0FBS0MsUUFBVCxFQUFtQjtBQUNq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QkQ7O0FBb0JBLE1BQU0yRixPQUFPLEdBQUcsTUFBTTtBQUNwQjVMLEVBQUFBLFdBQVcsQ0FBQ2tDLE9BQUQsRUFBVTtBQUNuQmpFLElBQUFBLHFEQUFnQixDQUFDLElBQUQsRUFBT2lFLE9BQVAsQ0FBaEI7QUFDQTtBQUNKO0FBQ0E7O0FBQ0ksU0FBS3dKLGVBQUwsR0FBdUIsU0FBdkI7O0FBQ0EsU0FBS0csT0FBTCxHQUFlLE1BQU07QUFDbkIsYUFBT0osT0FBTyxDQUFDLEtBQUtqSSxFQUFOLEVBQVUsS0FBS2tJLGVBQWYsRUFBZ0MsS0FBS3pMLFNBQXJDLEVBQWdELEtBQUs0QixjQUFyRCxFQUFxRSxLQUFLOEosZUFBMUUsQ0FBZDtBQUNELEtBRkQ7QUFHRDs7QUFDREwsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsV0FBUWxOLHFEQUFDLENBQUNJLGlEQUFELEVBQU87QUFBRXFOLE1BQUFBLE9BQU8sRUFBRSxLQUFLQTtBQUFoQixLQUFQLENBQVQ7QUFDRDs7QUFDSyxNQUFGckksRUFBRSxHQUFHO0FBQUUsV0FBT2xGLHFEQUFVLENBQUMsSUFBRCxDQUFqQjtBQUEwQjs7QUFkakIsQ0FBdEIiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi1uYXZfMi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGUgYXMgY3JlYXRlRXZlbnQsIGgsIGkgYXMgZ2V0RWxlbWVudCwgSCBhcyBIb3N0IH0gZnJvbSAnLi9pbmRleC03YThiN2ExYy5qcyc7XG5pbXBvcnQgeyBiIGFzIGdldElvbk1vZGUsIGMgYXMgY29uZmlnIH0gZnJvbSAnLi9pb25pYy1nbG9iYWwtNjNhOTdhMzIuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbiB9IGZyb20gJy4vY3ViaWMtYmV6aWVyLWVlYTlhN2E5LmpzJztcbmltcG9ydCB7IGwgYXMgYXNzZXJ0IH0gZnJvbSAnLi9oZWxwZXJzLWRkN2U0YjdiLmpzJztcbmltcG9ydCB7IGwgYXMgbGlmZWN5Y2xlLCB0IGFzIHRyYW5zaXRpb24sIHMgYXMgc2V0UGFnZUhpZGRlbiwgZCBhcyBMSUZFQ1lDTEVfV0lMTF9VTkxPQUQsIGIgYXMgTElGRUNZQ0xFX1dJTExfTEVBVkUsIGMgYXMgTElGRUNZQ0xFX0RJRF9MRUFWRSB9IGZyb20gJy4vaW5kZXgtOTMxNDQwYjEuanMnO1xuaW1wb3J0IHsgYSBhcyBhdHRhY2hDb21wb25lbnQgfSBmcm9tICcuL2ZyYW1ld29yay1kZWxlZ2F0ZS00MzkyY2Q2My5qcyc7XG5cbmNvbnN0IFZJRVdfU1RBVEVfTkVXID0gMTtcbmNvbnN0IFZJRVdfU1RBVEVfQVRUQUNIRUQgPSAyO1xuY29uc3QgVklFV19TVEFURV9ERVNUUk9ZRUQgPSAzO1xuY2xhc3MgVmlld0NvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcihjb21wb25lbnQsIHBhcmFtcykge1xuICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMuc3RhdGUgPSBWSUVXX1NUQVRFX05FVztcbiAgfVxuICBhc3luYyBpbml0KGNvbnRhaW5lcikge1xuICAgIHRoaXMuc3RhdGUgPSBWSUVXX1NUQVRFX0FUVEFDSEVEO1xuICAgIGlmICghdGhpcy5lbGVtZW50KSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGF3YWl0IGF0dGFjaENvbXBvbmVudCh0aGlzLmRlbGVnYXRlLCBjb250YWluZXIsIGNvbXBvbmVudCwgWydpb24tcGFnZScsICdpb24tcGFnZS1pbnZpc2libGUnXSwgdGhpcy5wYXJhbXMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRE9NIFdSSVRFXG4gICAqL1xuICBfZGVzdHJveSgpIHtcbiAgICBhc3NlcnQodGhpcy5zdGF0ZSAhPT0gVklFV19TVEFURV9ERVNUUk9ZRUQsICd2aWV3IHN0YXRlIG11c3QgYmUgQVRUQUNIRUQnKTtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5kZWxlZ2F0ZSkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlLnJlbW92ZVZpZXdGcm9tRG9tKGVsZW1lbnQucGFyZW50RWxlbWVudCwgZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5uYXYgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdGF0ZSA9IFZJRVdfU1RBVEVfREVTVFJPWUVEO1xuICB9XG59XG5jb25zdCBtYXRjaGVzID0gKHZpZXcsIGlkLCBwYXJhbXMpID0+IHtcbiAgaWYgKCF2aWV3KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh2aWV3LmNvbXBvbmVudCAhPT0gaWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgY3VycmVudFBhcmFtcyA9IHZpZXcucGFyYW1zO1xuICBpZiAoY3VycmVudFBhcmFtcyA9PT0gcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFjdXJyZW50UGFyYW1zICYmICFwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIWN1cnJlbnRQYXJhbXMgfHwgIXBhcmFtcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKGN1cnJlbnRQYXJhbXMpO1xuICBjb25zdCBrZXlzQiA9IE9iamVjdC5rZXlzKHBhcmFtcyk7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzQSkge1xuICAgIGlmIChjdXJyZW50UGFyYW1zW2tleV0gIT09IHBhcmFtc1trZXldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmNvbnN0IGNvbnZlcnRUb1ZpZXcgPSAocGFnZSwgcGFyYW1zKSA9PiB7XG4gIGlmICghcGFnZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChwYWdlIGluc3RhbmNlb2YgVmlld0NvbnRyb2xsZXIpIHtcbiAgICByZXR1cm4gcGFnZTtcbiAgfVxuICByZXR1cm4gbmV3IFZpZXdDb250cm9sbGVyKHBhZ2UsIHBhcmFtcyk7XG59O1xuY29uc3QgY29udmVydFRvVmlld3MgPSAocGFnZXMpID0+IHtcbiAgcmV0dXJuIHBhZ2VzLm1hcChwYWdlID0+IHtcbiAgICBpZiAocGFnZSBpbnN0YW5jZW9mIFZpZXdDb250cm9sbGVyKSB7XG4gICAgICByZXR1cm4gcGFnZTtcbiAgICB9XG4gICAgaWYgKCdjb21wb25lbnQnIGluIHBhZ2UpIHtcbiAgICAgIC8qKlxuICAgICAgICogVE9ETyBJb25pYyA2OlxuICAgICAgICogQ29uc2lkZXIgc3dpdGNoaW5nIHRvIGp1c3QgdXNpbmcgYHVuZGVmaW5lZGAgaGVyZVxuICAgICAgICogYXMgd2VsbCBhcyBvbiB0aGUgcHVibGljIGludGVyZmFjZXMgYW5kIG9uXG4gICAgICAgKiBgTmF2Q29tcG9uZW50V2l0aFByb3BzYC4gUHJldmlvdXNseSBgcGFnZXNgIHdhc1xuICAgICAgICogb2YgdHlwZSBgYW55W11gIHNvIFR5cGVTY3JpcHQgZGlkIG5vdCBjYXRjaCB0aGlzLlxuICAgICAgICovXG4gICAgICByZXR1cm4gY29udmVydFRvVmlldyhwYWdlLmNvbXBvbmVudCwgKHBhZ2UuY29tcG9uZW50UHJvcHMgPT09IG51bGwpID8gdW5kZWZpbmVkIDogcGFnZS5jb21wb25lbnRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0VG9WaWV3KHBhZ2UsIHVuZGVmaW5lZCk7XG4gIH0pLmZpbHRlcih2ID0+IHYgIT09IG51bGwpO1xufTtcblxuY29uc3QgbmF2Q3NzID0gXCI6aG9zdHtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTtjb250YWluOmxheW91dCBzaXplIHN0eWxlO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjB9XCI7XG5cbmNvbnN0IE5hdiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25OYXZXaWxsTG9hZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uTmF2V2lsbExvYWRcIiwgNyk7XG4gICAgdGhpcy5pb25OYXZXaWxsQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25OYXZXaWxsQ2hhbmdlXCIsIDMpO1xuICAgIHRoaXMuaW9uTmF2RGlkQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25OYXZEaWRDaGFuZ2VcIiwgMyk7XG4gICAgdGhpcy50cmFuc0luc3RyID0gW107XG4gICAgdGhpcy5hbmltYXRpb25FbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnVzZVJvdXRlciA9IGZhbHNlO1xuICAgIHRoaXMuaXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnZpZXdzID0gW107XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgbmF2IHNob3VsZCBhbmltYXRlIHRoZSB0cmFuc2l0aW9uIG9mIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gIH1cbiAgc3dpcGVHZXN0dXJlQ2hhbmdlZCgpIHtcbiAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICB0aGlzLmdlc3R1cmUuZW5hYmxlKHRoaXMuc3dpcGVHZXN0dXJlID09PSB0cnVlKTtcbiAgICB9XG4gIH1cbiAgcm9vdENoYW5nZWQoKSB7XG4gICAgaWYgKHRoaXMucm9vdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXRoaXMudXNlUm91dGVyKSB7XG4gICAgICAgIHRoaXMuc2V0Um9vdCh0aGlzLnJvb3QsIHRoaXMucm9vdFBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMudXNlUm91dGVyID1cbiAgICAgICEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpICYmXG4gICAgICAgICF0aGlzLmVsLmNsb3Nlc3QoJ1tuby1yb3V0ZXJdJyk7XG4gICAgaWYgKHRoaXMuc3dpcGVHZXN0dXJlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgICAgdGhpcy5zd2lwZUdlc3R1cmUgPSBjb25maWcuZ2V0Qm9vbGVhbignc3dpcGVCYWNrRW5hYmxlZCcsIG1vZGUgPT09ICdpb3MnKTtcbiAgICB9XG4gICAgdGhpcy5pb25OYXZXaWxsTG9hZC5lbWl0KCk7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLnJvb3RDaGFuZ2VkKCk7XG4gICAgdGhpcy5nZXN0dXJlID0gKGF3YWl0IGltcG9ydCgnLi9zd2lwZS1iYWNrLWZhZTk3MzY1LmpzJykpLmNyZWF0ZVN3aXBlQmFja0dlc3R1cmUodGhpcy5lbCwgdGhpcy5jYW5TdGFydC5iaW5kKHRoaXMpLCB0aGlzLm9uU3RhcnQuYmluZCh0aGlzKSwgdGhpcy5vbk1vdmUuYmluZCh0aGlzKSwgdGhpcy5vbkVuZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnN3aXBlR2VzdHVyZUNoYW5nZWQoKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBmb3IgKGNvbnN0IHZpZXcgb2YgdGhpcy52aWV3cykge1xuICAgICAgbGlmZWN5Y2xlKHZpZXcuZWxlbWVudCwgTElGRUNZQ0xFX1dJTExfVU5MT0FEKTtcbiAgICAgIHZpZXcuX2Rlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZ2VzdHVyZSkge1xuICAgICAgdGhpcy5nZXN0dXJlLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZ2VzdHVyZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBzd2lwZSBiYWNrIGdlc3R1cmUgYW5kIHRyYW5zaXRpb25cbiAgICB0aGlzLnRyYW5zSW5zdHIubGVuZ3RoID0gdGhpcy52aWV3cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogUHVzaCBhIG5ldyBjb21wb25lbnQgb250byB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHN0YWNrLiBQYXNzIGFueSBhZGRpdGlvbmFsXG4gICAqIGluZm9ybWF0aW9uIGFsb25nIGFzIGFuIG9iamVjdC4gVGhpcyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGlzIGFjY2Vzc2libGVcbiAgICogdGhyb3VnaCBOYXZQYXJhbXMuXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCB0byBwdXNoIG9udG8gdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAqIEBwYXJhbSBjb21wb25lbnRQcm9wcyBBbnkgcHJvcGVydGllcyBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gb3B0cyBUaGUgbmF2aWdhdGlvbiBvcHRpb25zLlxuICAgKiBAcGFyYW0gZG9uZSBUaGUgdHJhbnNpdGlvbiBjb21wbGV0ZSBmdW5jdGlvbi5cbiAgICovXG4gIHB1c2goY29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgb3B0cywgZG9uZSkge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICBpbnNlcnRTdGFydDogLTEsXG4gICAgICBpbnNlcnRWaWV3czogW3sgY29tcG9uZW50LCBjb21wb25lbnRQcm9wcyB9XSxcbiAgICAgIG9wdHNcbiAgICB9LCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBhIGNvbXBvbmVudCBpbnRvIHRoZSBuYXZpZ2F0aW9uIHN0YWNrIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAqIFRoaXMgaXMgdXNlZnVsIHRvIGFkZCBhIGNvbXBvbmVudCBhdCBhbnkgcG9pbnQgaW4gdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSBpbnNlcnRJbmRleCBUaGUgaW5kZXggdG8gaW5zZXJ0IHRoZSBjb21wb25lbnQgYXQgaW4gdGhlIHN0YWNrLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IFRoZSBjb21wb25lbnQgdG8gaW5zZXJ0IGludG8gdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAqIEBwYXJhbSBjb21wb25lbnRQcm9wcyBBbnkgcHJvcGVydGllcyBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gb3B0cyBUaGUgbmF2aWdhdGlvbiBvcHRpb25zLlxuICAgKiBAcGFyYW0gZG9uZSBUaGUgdHJhbnNpdGlvbiBjb21wbGV0ZSBmdW5jdGlvbi5cbiAgICovXG4gIGluc2VydChpbnNlcnRJbmRleCwgY29tcG9uZW50LCBjb21wb25lbnRQcm9wcywgb3B0cywgZG9uZSkge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICBpbnNlcnRTdGFydDogaW5zZXJ0SW5kZXgsXG4gICAgICBpbnNlcnRWaWV3czogW3sgY29tcG9uZW50LCBjb21wb25lbnRQcm9wcyB9XSxcbiAgICAgIG9wdHNcbiAgICB9LCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBhbiBhcnJheSBvZiBjb21wb25lbnRzIGludG8gdGhlIG5hdmlnYXRpb24gc3RhY2sgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICogVGhlIGxhc3QgY29tcG9uZW50IGluIHRoZSBhcnJheSB3aWxsIGJlY29tZSBpbnN0YW50aWF0ZWQgYXMgYSB2aWV3LCBhbmQgYW5pbWF0ZVxuICAgKiBpbiB0byBiZWNvbWUgdGhlIGFjdGl2ZSB2aWV3LlxuICAgKlxuICAgKiBAcGFyYW0gaW5zZXJ0SW5kZXggVGhlIGluZGV4IHRvIGluc2VydCB0aGUgY29tcG9uZW50cyBhdCBpbiB0aGUgc3RhY2suXG4gICAqIEBwYXJhbSBpbnNlcnRDb21wb25lbnRzIFRoZSBjb21wb25lbnRzIHRvIGluc2VydCBpbnRvIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLlxuICAgKiBAcGFyYW0gb3B0cyBUaGUgbmF2aWdhdGlvbiBvcHRpb25zLlxuICAgKiBAcGFyYW0gZG9uZSBUaGUgdHJhbnNpdGlvbiBjb21wbGV0ZSBmdW5jdGlvbi5cbiAgICovXG4gIGluc2VydFBhZ2VzKGluc2VydEluZGV4LCBpbnNlcnRDb21wb25lbnRzLCBvcHRzLCBkb25lKSB7XG4gICAgcmV0dXJuIHRoaXMucXVldWVUcm5zKHtcbiAgICAgIGluc2VydFN0YXJ0OiBpbnNlcnRJbmRleCxcbiAgICAgIGluc2VydFZpZXdzOiBpbnNlcnRDb21wb25lbnRzLFxuICAgICAgb3B0c1xuICAgIH0sIGRvbmUpO1xuICB9XG4gIC8qKlxuICAgKiBQb3AgYSBjb21wb25lbnQgb2ZmIG9mIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLiBOYXZpZ2F0ZXMgYmFjayBmcm9tIHRoZSBjdXJyZW50XG4gICAqIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIG9wdHMgVGhlIG5hdmlnYXRpb24gb3B0aW9ucy5cbiAgICogQHBhcmFtIGRvbmUgVGhlIHRyYW5zaXRpb24gY29tcGxldGUgZnVuY3Rpb24uXG4gICAqL1xuICBwb3Aob3B0cywgZG9uZSkge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICByZW1vdmVTdGFydDogLTEsXG4gICAgICByZW1vdmVDb3VudDogMSxcbiAgICAgIG9wdHNcbiAgICB9LCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogUG9wIHRvIGEgc3BlY2lmaWMgaW5kZXggaW4gdGhlIG5hdmlnYXRpb24gc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSBpbmRleE9yVmlld0N0cmwgVGhlIGluZGV4IG9yIHZpZXcgY29udHJvbGxlciB0byBwb3AgdG8uXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgcG9wVG8oaW5kZXhPclZpZXdDdHJsLCBvcHRzLCBkb25lKSB7XG4gICAgY29uc3QgdGlDb25maWcgPSB7XG4gICAgICByZW1vdmVTdGFydDogLTEsXG4gICAgICByZW1vdmVDb3VudDogLTEsXG4gICAgICBvcHRzXG4gICAgfTtcbiAgICBpZiAodHlwZW9mIGluZGV4T3JWaWV3Q3RybCA9PT0gJ29iamVjdCcgJiYgaW5kZXhPclZpZXdDdHJsLmNvbXBvbmVudCkge1xuICAgICAgdGlDb25maWcucmVtb3ZlVmlldyA9IGluZGV4T3JWaWV3Q3RybDtcbiAgICAgIHRpQ29uZmlnLnJlbW92ZVN0YXJ0ID0gMTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGluZGV4T3JWaWV3Q3RybCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRpQ29uZmlnLnJlbW92ZVN0YXJ0ID0gaW5kZXhPclZpZXdDdHJsICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucXVldWVUcm5zKHRpQ29uZmlnLCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogTmF2aWdhdGUgYmFjayB0byB0aGUgcm9vdCBvZiB0aGUgc3RhY2ssIG5vIG1hdHRlciBob3cgZmFyIGJhY2sgdGhhdCBpcy5cbiAgICpcbiAgICogQHBhcmFtIG9wdHMgVGhlIG5hdmlnYXRpb24gb3B0aW9ucy5cbiAgICogQHBhcmFtIGRvbmUgVGhlIHRyYW5zaXRpb24gY29tcGxldGUgZnVuY3Rpb24uXG4gICAqL1xuICBwb3BUb1Jvb3Qob3B0cywgZG9uZSkge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICByZW1vdmVTdGFydDogMSxcbiAgICAgIHJlbW92ZUNvdW50OiAtMSxcbiAgICAgIG9wdHNcbiAgICB9LCBkb25lKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBmcm9tIHRoZSBuYXZpZ2F0aW9uIHN0YWNrIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSBzdGFydEluZGV4IFRoZSBudW1iZXIgdG8gYmVnaW4gcmVtb3ZhbCBhdC5cbiAgICogQHBhcmFtIHJlbW92ZUNvdW50IFRoZSBudW1iZXIgb2YgY29tcG9uZW50cyB0byByZW1vdmUuXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgcmVtb3ZlSW5kZXgoc3RhcnRJbmRleCwgcmVtb3ZlQ291bnQgPSAxLCBvcHRzLCBkb25lKSB7XG4gICAgcmV0dXJuIHRoaXMucXVldWVUcm5zKHtcbiAgICAgIHJlbW92ZVN0YXJ0OiBzdGFydEluZGV4LFxuICAgICAgcmVtb3ZlQ291bnQsXG4gICAgICBvcHRzXG4gICAgfSwgZG9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgcm9vdCBmb3IgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBzdGFjayB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHRvIHNldCBhcyB0aGUgcm9vdCBvZiB0aGUgbmF2aWdhdGlvbiBzdGFjay5cbiAgICogQHBhcmFtIGNvbXBvbmVudFByb3BzIEFueSBwcm9wZXJ0aWVzIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSBvcHRzIFRoZSBuYXZpZ2F0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBkb25lIFRoZSB0cmFuc2l0aW9uIGNvbXBsZXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgc2V0Um9vdChjb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCBvcHRzLCBkb25lKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0UGFnZXMoW3sgY29tcG9uZW50LCBjb21wb25lbnRQcm9wcyB9XSwgb3B0cywgZG9uZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgdmlld3Mgb2YgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBzdGFjayBhbmQgbmF2aWdhdGUgdG8gdGhlIGxhc3Qgdmlldy5cbiAgICogQnkgZGVmYXVsdCBhbmltYXRpb25zIGFyZSBkaXNhYmxlZCwgYnV0IHRoZXkgY2FuIGJlIGVuYWJsZWQgYnkgcGFzc2luZyBvcHRpb25zXG4gICAqIHRvIHRoZSBuYXZpZ2F0aW9uIGNvbnRyb2xsZXIuIE5hdmlnYXRpb24gcGFyYW1ldGVycyBjYW4gYWxzbyBiZSBwYXNzZWQgdG8gdGhlXG4gICAqIGluZGl2aWR1YWwgcGFnZXMgaW4gdGhlIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0gdmlld3MgVGhlIGxpc3Qgb2Ygdmlld3MgdG8gc2V0IGFzIHRoZSBuYXZpZ2F0aW9uIHN0YWNrLlxuICAgKiBAcGFyYW0gb3B0cyBUaGUgbmF2aWdhdGlvbiBvcHRpb25zLlxuICAgKiBAcGFyYW0gZG9uZSBUaGUgdHJhbnNpdGlvbiBjb21wbGV0ZSBmdW5jdGlvbi5cbiAgICovXG4gIHNldFBhZ2VzKHZpZXdzLCBvcHRzLCBkb25lKSB7XG4gICAgaWYgKG9wdHMgPT0gbnVsbCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICAvLyBpZiBhbmltYXRpb24gd2Fzbid0IHNldCB0byB0cnVlIHRoZW4gZGVmYXVsdCBpdCB0byBOT1QgYW5pbWF0ZVxuICAgIGlmIChvcHRzLmFuaW1hdGVkICE9PSB0cnVlKSB7XG4gICAgICBvcHRzLmFuaW1hdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICBpbnNlcnRTdGFydDogMCxcbiAgICAgIGluc2VydFZpZXdzOiB2aWV3cyxcbiAgICAgIHJlbW92ZVN0YXJ0OiAwLFxuICAgICAgcmVtb3ZlQ291bnQ6IC0xLFxuICAgICAgb3B0c1xuICAgIH0sIGRvbmUpO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc2V0Um91dGVJZChpZCwgcGFyYW1zLCBkaXJlY3Rpb24sIGFuaW1hdGlvbikge1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlU3luYygpO1xuICAgIGlmIChtYXRjaGVzKGFjdGl2ZSwgaWQsIHBhcmFtcykpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICBjaGFuZ2VkOiBmYWxzZSxcbiAgICAgICAgZWxlbWVudDogYWN0aXZlLmVsZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzb2x2ZTtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UociA9PiAocmVzb2x2ZSA9IHIpKTtcbiAgICBsZXQgZmluaXNoO1xuICAgIGNvbnN0IGNvbW1vbk9wdHMgPSB7XG4gICAgICB1cGRhdGVVUkw6IGZhbHNlLFxuICAgICAgdmlld0lzUmVhZHk6IGVudGVyaW5nRWwgPT4ge1xuICAgICAgICBsZXQgbWFyaztcbiAgICAgICAgY29uc3QgcCA9IG5ldyBQcm9taXNlKHIgPT4gKG1hcmsgPSByKSk7XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIGNoYW5nZWQ6IHRydWUsXG4gICAgICAgICAgZWxlbWVudDogZW50ZXJpbmdFbCxcbiAgICAgICAgICBtYXJrVmlzaWJsZTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbWFyaygpO1xuICAgICAgICAgICAgYXdhaXQgZmluaXNoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3Jvb3QnKSB7XG4gICAgICBmaW5pc2ggPSB0aGlzLnNldFJvb3QoaWQsIHBhcmFtcywgY29tbW9uT3B0cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc3Qgdmlld0NvbnRyb2xsZXIgPSB0aGlzLnZpZXdzLmZpbmQodiA9PiBtYXRjaGVzKHYsIGlkLCBwYXJhbXMpKTtcbiAgICAgIGlmICh2aWV3Q29udHJvbGxlcikge1xuICAgICAgICBmaW5pc2ggPSB0aGlzLnBvcFRvKHZpZXdDb250cm9sbGVyLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vbk9wdHMpLCB7IGRpcmVjdGlvbjogJ2JhY2snLCBhbmltYXRpb25CdWlsZGVyOiBhbmltYXRpb24gfSkpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZm9yd2FyZCcpIHtcbiAgICAgICAgZmluaXNoID0gdGhpcy5wdXNoKGlkLCBwYXJhbXMsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uT3B0cyksIHsgYW5pbWF0aW9uQnVpbGRlcjogYW5pbWF0aW9uIH0pKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2JhY2snKSB7XG4gICAgICAgIGZpbmlzaCA9IHRoaXMuc2V0Um9vdChpZCwgcGFyYW1zLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vbk9wdHMpLCB7IGRpcmVjdGlvbjogJ2JhY2snLCBhbmltYXRlZDogdHJ1ZSwgYW5pbWF0aW9uQnVpbGRlcjogYW5pbWF0aW9uIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc3luYyBnZXRSb3V0ZUlkKCkge1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlU3luYygpO1xuICAgIHJldHVybiBhY3RpdmVcbiAgICAgID8ge1xuICAgICAgICBpZDogYWN0aXZlLmVsZW1lbnQudGFnTmFtZSxcbiAgICAgICAgcGFyYW1zOiBhY3RpdmUucGFyYW1zLFxuICAgICAgICBlbGVtZW50OiBhY3RpdmUuZWxlbWVudFxuICAgICAgfVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgYWN0aXZlIHZpZXcuXG4gICAqL1xuICBnZXRBY3RpdmUoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmdldEFjdGl2ZVN5bmMoKSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgdmlldyBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKlxuICAgKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSB2aWV3LlxuICAgKi9cbiAgZ2V0QnlJbmRleChpbmRleCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy52aWV3c1tpbmRleF0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgY3VycmVudCB2aWV3IGNhbiBnbyBiYWNrLlxuICAgKlxuICAgKiBAcGFyYW0gdmlldyBUaGUgdmlldyB0byBjaGVjay5cbiAgICovXG4gIGNhbkdvQmFjayh2aWV3KSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNhbkdvQmFja1N5bmModmlldykpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHByZXZpb3VzIHZpZXcuXG4gICAqXG4gICAqIEBwYXJhbSB2aWV3IFRoZSB2aWV3IHRvIGdldC5cbiAgICovXG4gIGdldFByZXZpb3VzKHZpZXcpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZ2V0UHJldmlvdXNTeW5jKHZpZXcpKTtcbiAgfVxuICBnZXRMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlld3MubGVuZ3RoO1xuICB9XG4gIGdldEFjdGl2ZVN5bmMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlld3NbdGhpcy52aWV3cy5sZW5ndGggLSAxXTtcbiAgfVxuICBjYW5Hb0JhY2tTeW5jKHZpZXcgPSB0aGlzLmdldEFjdGl2ZVN5bmMoKSkge1xuICAgIHJldHVybiAhISh2aWV3ICYmIHRoaXMuZ2V0UHJldmlvdXNTeW5jKHZpZXcpKTtcbiAgfVxuICBnZXRQcmV2aW91c1N5bmModmlldyA9IHRoaXMuZ2V0QWN0aXZlU3luYygpKSB7XG4gICAgaWYgKCF2aWV3KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgY29uc3QgaW5kZXggPSB2aWV3cy5pbmRleE9mKHZpZXcpO1xuICAgIHJldHVybiBpbmRleCA+IDAgPyB2aWV3c1tpbmRleCAtIDFdIDogdW5kZWZpbmVkO1xuICB9XG4gIC8vIF9xdWV1ZVRybnMoKSBhZGRzIGEgbmF2aWdhdGlvbiBzdGFjayBjaGFuZ2UgdG8gdGhlIHF1ZXVlIGFuZCBzY2hlZHVsZXMgaXQgdG8gcnVuOlxuICAvLyAxLiBfbmV4dFRybnMoKTogY29uc3VtZXMgdGhlIG5leHQgdHJhbnNpdGlvbiBpbiB0aGUgcXVldWVcbiAgLy8gMi4gX3ZpZXdJbml0KCk6IGluaXRpYWxpemVzIGVudGVyaW5nVmlldyBpZiByZXF1aXJlZFxuICAvLyAzLiBfdmlld1Rlc3QoKTogZW5zdXJlcyBjYW5MZWF2ZS9jYW5FbnRlciBSZXR1cm5zIGB0cnVlYCwgc28gdGhlIG9wZXJhdGlvbiBjYW4gY29udGludWVcbiAgLy8gNC4gX3Bvc3RWaWV3SW5pdCgpOiBhZGQvcmVtb3ZlIHRoZSB2aWV3cyBmcm9tIHRoZSBuYXZpZ2F0aW9uIHN0YWNrXG4gIC8vIDUuIF90cmFuc2l0aW9uSW5pdCgpOiBpbml0aWFsaXplcyB0aGUgdmlzdWFsIHRyYW5zaXRpb24gaWYgcmVxdWlyZWQgYW5kIHNjaGVkdWxlcyBpdCB0byBydW5cbiAgLy8gNi4gX3ZpZXdBdHRhY2hUb0RPTSgpOiBhdHRhY2hlcyB0aGUgZW50ZXJpbmdWaWV3IHRvIHRoZSBET01cbiAgLy8gNy4gX3RyYW5zaXRpb25TdGFydCgpOiBjYWxsZWQgb25jZSB0aGUgdHJhbnNpdGlvbiBhY3R1YWxseSBzdGFydHMsIGl0IGluaXRpYWxpemVzIHRoZSBBbmltYXRpb24gdW5kZXJuZWF0aC5cbiAgLy8gOC4gX3RyYW5zaXRpb25GaW5pc2goKTogY2FsbGVkIG9uY2UgdGhlIHRyYW5zaXRpb24gZmluaXNoZXNcbiAgLy8gOS4gX2NsZWFudXAoKTogc3luY3MgdGhlIG5hdmlnYXRpb24gaW50ZXJuYWwgc3RhdGUgd2l0aCB0aGUgRE9NLiBGb3IgZXhhbXBsZSBpdCByZW1vdmVzIHRoZSBwYWdlcyBmcm9tIHRoZSBET00gb3IgaGlkZXMvc2hvdyB0aGVtLlxuICBhc3luYyBxdWV1ZVRybnModGksIGRvbmUpIHtcbiAgICBpZiAodGhpcy5pc1RyYW5zaXRpb25pbmcgJiYgdGkub3B0cyAhPSBudWxsICYmIHRpLm9wdHMuc2tpcElmQnVzeSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aS5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHRpLnJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcbiAgICB0aS5kb25lID0gZG9uZTtcbiAgICAvKipcbiAgICAgKiBJZiB1c2luZyByb3V0ZXIsIGNoZWNrIHRvIHNlZSBpZiBuYXZpZ2F0aW9uIGhvb2tzXG4gICAgICogd2lsbCBhbGxvdyB1cyB0byBwZXJmb3JtIHRoaXMgdHJhbnNpdGlvbi4gVGhpc1xuICAgICAqIGlzIHJlcXVpcmVkIGluIG9yZGVyIGZvciBob29rcyB0byB3b3JrIHdpdGhcbiAgICAgKiB0aGUgaW9uLWJhY2stYnV0dG9uIG9yIHN3aXBlIHRvIGdvIGJhY2suXG4gICAgICovXG4gICAgaWYgKHRpLm9wdHMgJiYgdGkub3B0cy51cGRhdGVVUkwgIT09IGZhbHNlICYmIHRoaXMudXNlUm91dGVyKSB7XG4gICAgICBjb25zdCByb3V0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tcm91dGVyJyk7XG4gICAgICBpZiAocm91dGVyKSB7XG4gICAgICAgIGNvbnN0IGNhblRyYW5zaXRpb24gPSBhd2FpdCByb3V0ZXIuY2FuVHJhbnNpdGlvbigpO1xuICAgICAgICBpZiAoY2FuVHJhbnNpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgY2FuVHJhbnNpdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChjYW5UcmFuc2l0aW9uLCB0aS5vcHRzLmRpcmVjdGlvbiB8fCAnYmFjaycpO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE5vcm1hbGl6ZSBlbXB0eVxuICAgIGlmICh0aS5pbnNlcnRWaWV3cyAmJiB0aS5pbnNlcnRWaWV3cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRpLmluc2VydFZpZXdzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBFbnF1ZXVlIHRyYW5zaXRpb24gaW5zdHJ1Y3Rpb25cbiAgICB0aGlzLnRyYW5zSW5zdHIucHVzaCh0aSk7XG4gICAgLy8gaWYgdGhlcmUgaXNuJ3QgYSB0cmFuc2l0aW9uIGFscmVhZHkgaGFwcGVuaW5nXG4gICAgLy8gdGhlbiB0aGlzIHdpbGwga2ljayBvZmYgdGhpcyB0cmFuc2l0aW9uXG4gICAgdGhpcy5uZXh0VHJucygpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIHN1Y2Nlc3MocmVzdWx0LCB0aSkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgdGhpcy5maXJlRXJyb3IoJ25hdiBjb250cm9sbGVyIHdhcyBkZXN0cm95ZWQnLCB0aSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aS5kb25lKSB7XG4gICAgICB0aS5kb25lKHJlc3VsdC5oYXNDb21wbGV0ZWQsIHJlc3VsdC5yZXF1aXJlc1RyYW5zaXRpb24sIHJlc3VsdC5lbnRlcmluZ1ZpZXcsIHJlc3VsdC5sZWF2aW5nVmlldywgcmVzdWx0LmRpcmVjdGlvbik7XG4gICAgfVxuICAgIHRpLnJlc29sdmUocmVzdWx0Lmhhc0NvbXBsZXRlZCk7XG4gICAgaWYgKHRpLm9wdHMudXBkYXRlVVJMICE9PSBmYWxzZSAmJiB0aGlzLnVzZVJvdXRlcikge1xuICAgICAgY29uc3Qgcm91dGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpO1xuICAgICAgaWYgKHJvdXRlcikge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSByZXN1bHQuZGlyZWN0aW9uID09PSAnYmFjaycgPyAnYmFjaycgOiAnZm9yd2FyZCc7XG4gICAgICAgIHJvdXRlci5uYXZDaGFuZ2VkKGRpcmVjdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZhaWxlZChyZWplY3RSZWFzb24sIHRpKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICB0aGlzLmZpcmVFcnJvcignbmF2IGNvbnRyb2xsZXIgd2FzIGRlc3Ryb3llZCcsIHRpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy50cmFuc0luc3RyLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5maXJlRXJyb3IocmVqZWN0UmVhc29uLCB0aSk7XG4gIH1cbiAgZmlyZUVycm9yKHJlamVjdFJlYXNvbiwgdGkpIHtcbiAgICBpZiAodGkuZG9uZSkge1xuICAgICAgdGkuZG9uZShmYWxzZSwgZmFsc2UsIHJlamVjdFJlYXNvbik7XG4gICAgfVxuICAgIGlmICh0aS5yZWplY3QgJiYgIXRoaXMuZGVzdHJveWVkKSB7XG4gICAgICB0aS5yZWplY3QocmVqZWN0UmVhc29uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aS5yZXNvbHZlKGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgbmV4dFRybnMoKSB7XG4gICAgLy8gdGhpcyBpcyB0aGUgZnJhbWV3b3JrJ3MgYnJlYWQgJ24gYnV0dGEgZnVuY3Rpb25cbiAgICAvLyBvbmx5IG9uZSB0cmFuc2l0aW9uIGlzIGFsbG93ZWQgYXQgYW55IGdpdmVuIHRpbWVcbiAgICBpZiAodGhpcy5pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gdGhlcmUgaXMgbm8gdHJhbnNpdGlvbiBoYXBwZW5pbmcgcmlnaHQgbm93XG4gICAgLy8gZ2V0IHRoZSBuZXh0IGluc3RydWN0aW9uXG4gICAgY29uc3QgdGkgPSB0aGlzLnRyYW5zSW5zdHIuc2hpZnQoKTtcbiAgICBpZiAoIXRpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMucnVuVHJhbnNpdGlvbih0aSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYXN5bmMgcnVuVHJhbnNpdGlvbih0aSkge1xuICAgIHRyeSB7XG4gICAgICAvLyBzZXQgdGhhdCB0aGlzIG5hdiBpcyBhY3RpdmVseSB0cmFuc2l0aW9uaW5nXG4gICAgICB0aGlzLmlvbk5hdldpbGxDaGFuZ2UuZW1pdCgpO1xuICAgICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgdGhpcy5wcmVwYXJlVEkodGkpO1xuICAgICAgY29uc3QgbGVhdmluZ1ZpZXcgPSB0aGlzLmdldEFjdGl2ZVN5bmMoKTtcbiAgICAgIGNvbnN0IGVudGVyaW5nVmlldyA9IHRoaXMuZ2V0RW50ZXJpbmdWaWV3KHRpLCBsZWF2aW5nVmlldyk7XG4gICAgICBpZiAoIWxlYXZpbmdWaWV3ICYmICFlbnRlcmluZ1ZpZXcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyB2aWV3cyBpbiB0aGUgc3RhY2sgdG8gYmUgcmVtb3ZlZCcpO1xuICAgICAgfVxuICAgICAgaWYgKGVudGVyaW5nVmlldyAmJiBlbnRlcmluZ1ZpZXcuc3RhdGUgPT09IFZJRVdfU1RBVEVfTkVXKSB7XG4gICAgICAgIGF3YWl0IGVudGVyaW5nVmlldy5pbml0KHRoaXMuZWwpO1xuICAgICAgfVxuICAgICAgdGhpcy5wb3N0Vmlld0luaXQoZW50ZXJpbmdWaWV3LCBsZWF2aW5nVmlldywgdGkpO1xuICAgICAgLy8gTmVlZHMgdHJhbnNpdGlvbj9cbiAgICAgIGNvbnN0IHJlcXVpcmVzVHJhbnNpdGlvbiA9ICh0aS5lbnRlcmluZ1JlcXVpcmVzVHJhbnNpdGlvbiB8fCB0aS5sZWF2aW5nUmVxdWlyZXNUcmFuc2l0aW9uKSAmJlxuICAgICAgICBlbnRlcmluZ1ZpZXcgIT09IGxlYXZpbmdWaWV3O1xuICAgICAgaWYgKHJlcXVpcmVzVHJhbnNpdGlvbiAmJiB0aS5vcHRzICYmIGxlYXZpbmdWaWV3KSB7XG4gICAgICAgIGNvbnN0IGlzQmFja0RpcmVjdGlvbiA9IHRpLm9wdHMuZGlyZWN0aW9uID09PSAnYmFjayc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBoZWFkaW5nIGJhY2ssIHVzZSB0aGUgZW50ZXJpbmcgcGFnZSdzIGFuaW1hdGlvblxuICAgICAgICAgKiB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZCBieSB0aGUgZGV2ZWxvcGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlzQmFja0RpcmVjdGlvbikge1xuICAgICAgICAgIHRpLm9wdHMuYW5pbWF0aW9uQnVpbGRlciA9IHRpLm9wdHMuYW5pbWF0aW9uQnVpbGRlciB8fCAoZW50ZXJpbmdWaWV3ICYmIGVudGVyaW5nVmlldy5hbmltYXRpb25CdWlsZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBsZWF2aW5nVmlldy5hbmltYXRpb25CdWlsZGVyID0gdGkub3B0cy5hbmltYXRpb25CdWlsZGVyO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVxdWlyZXNUcmFuc2l0aW9uXG4gICAgICAgID8gYXdhaXQgdGhpcy50cmFuc2l0aW9uKGVudGVyaW5nVmlldywgbGVhdmluZ1ZpZXcsIHRpKVxuICAgICAgICA6IHtcbiAgICAgICAgICAvLyB0cmFuc2l0aW9uIGlzIG5vdCByZXF1aXJlZCwgc28gd2UgYXJlIGFscmVhZHkgZG9uZSFcbiAgICAgICAgICAvLyB0aGV5J3JlIGluc2VydGluZy9yZW1vdmluZyB0aGUgdmlld3Mgc29tZXdoZXJlIGluIHRoZSBtaWRkbGUgb3JcbiAgICAgICAgICAvLyBiZWdpbm5pbmcsIHNvIHZpc3VhbGx5IG5vdGhpbmcgbmVlZHMgdG8gYW5pbWF0ZS90cmFuc2l0aW9uXG4gICAgICAgICAgLy8gcmVzb2x2ZSBpbW1lZGlhdGVseSBiZWNhdXNlIHRoZXJlJ3Mgbm8gYW5pbWF0aW9uIHRoYXQncyBoYXBwZW5pbmdcbiAgICAgICAgICBoYXNDb21wbGV0ZWQ6IHRydWUsXG4gICAgICAgICAgcmVxdWlyZXNUcmFuc2l0aW9uOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgdGhpcy5zdWNjZXNzKHJlc3VsdCwgdGkpO1xuICAgICAgdGhpcy5pb25OYXZEaWRDaGFuZ2UuZW1pdCgpO1xuICAgIH1cbiAgICBjYXRjaCAocmVqZWN0UmVhc29uKSB7XG4gICAgICB0aGlzLmZhaWxlZChyZWplY3RSZWFzb24sIHRpKTtcbiAgICB9XG4gICAgdGhpcy5pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICB0aGlzLm5leHRUcm5zKCk7XG4gIH1cbiAgcHJlcGFyZVRJKHRpKSB7XG4gICAgY29uc3Qgdmlld3NMZW5ndGggPSB0aGlzLnZpZXdzLmxlbmd0aDtcbiAgICB0aS5vcHRzID0gdGkub3B0cyB8fCB7fTtcbiAgICBpZiAodGkub3B0cy5kZWxlZ2F0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aS5vcHRzLmRlbGVnYXRlID0gdGhpcy5kZWxlZ2F0ZTtcbiAgICB9XG4gICAgaWYgKHRpLnJlbW92ZVZpZXcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXNzZXJ0KHRpLnJlbW92ZVN0YXJ0ICE9PSB1bmRlZmluZWQsICdyZW1vdmVWaWV3IG5lZWRzIHJlbW92ZVN0YXJ0Jyk7XG4gICAgICBhc3NlcnQodGkucmVtb3ZlQ291bnQgIT09IHVuZGVmaW5lZCwgJ3JlbW92ZVZpZXcgbmVlZHMgcmVtb3ZlQ291bnQnKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy52aWV3cy5pbmRleE9mKHRpLnJlbW92ZVZpZXcpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlbW92ZVZpZXcgd2FzIG5vdCBmb3VuZCcpO1xuICAgICAgfVxuICAgICAgdGkucmVtb3ZlU3RhcnQgKz0gaW5kZXg7XG4gICAgfVxuICAgIGlmICh0aS5yZW1vdmVTdGFydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGkucmVtb3ZlU3RhcnQgPCAwKSB7XG4gICAgICAgIHRpLnJlbW92ZVN0YXJ0ID0gdmlld3NMZW5ndGggLSAxO1xuICAgICAgfVxuICAgICAgaWYgKHRpLnJlbW92ZUNvdW50IDwgMCkge1xuICAgICAgICB0aS5yZW1vdmVDb3VudCA9IHZpZXdzTGVuZ3RoIC0gdGkucmVtb3ZlU3RhcnQ7XG4gICAgICB9XG4gICAgICB0aS5sZWF2aW5nUmVxdWlyZXNUcmFuc2l0aW9uID1cbiAgICAgICAgdGkucmVtb3ZlQ291bnQgPiAwICYmIHRpLnJlbW92ZVN0YXJ0ICsgdGkucmVtb3ZlQ291bnQgPT09IHZpZXdzTGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodGkuaW5zZXJ0Vmlld3MpIHtcbiAgICAgIC8vIGFsbG93IC0xIHRvIGJlIHBhc3NlZCBpbiB0byBhdXRvIHB1c2ggaXQgb24gdGhlIGVuZFxuICAgICAgLy8gYW5kIGNsZWFuIHVwIHRoZSBpbmRleCBpZiBpdCdzIGxhcmdlciB0aGVuIHRoZSBzaXplIG9mIHRoZSBzdGFja1xuICAgICAgaWYgKHRpLmluc2VydFN0YXJ0IDwgMCB8fCB0aS5pbnNlcnRTdGFydCA+IHZpZXdzTGVuZ3RoKSB7XG4gICAgICAgIHRpLmluc2VydFN0YXJ0ID0gdmlld3NMZW5ndGg7XG4gICAgICB9XG4gICAgICB0aS5lbnRlcmluZ1JlcXVpcmVzVHJhbnNpdGlvbiA9IHRpLmluc2VydFN0YXJ0ID09PSB2aWV3c0xlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgaW5zZXJ0Vmlld3MgPSB0aS5pbnNlcnRWaWV3cztcbiAgICBpZiAoIWluc2VydFZpZXdzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzc2VydChpbnNlcnRWaWV3cy5sZW5ndGggPiAwLCAnbGVuZ3RoIGNhbiBub3QgYmUgemVybycpO1xuICAgIGNvbnN0IHZpZXdDb250cm9sbGVycyA9IGNvbnZlcnRUb1ZpZXdzKGluc2VydFZpZXdzKTtcbiAgICBpZiAodmlld0NvbnRyb2xsZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHZpZXdzIHRvIGluc2VydCcpO1xuICAgIH1cbiAgICAvLyBDaGVjayBhbGwgdGhlIGluc2VydGVkIHZpZXcgYXJlIGNvcnJlY3RcbiAgICBmb3IgKGNvbnN0IHZpZXcgb2Ygdmlld0NvbnRyb2xsZXJzKSB7XG4gICAgICB2aWV3LmRlbGVnYXRlID0gdGkub3B0cy5kZWxlZ2F0ZTtcbiAgICAgIGNvbnN0IG5hdiA9IHZpZXcubmF2O1xuICAgICAgaWYgKG5hdiAmJiBuYXYgIT09IHRoaXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnNlcnRlZCB2aWV3IHdhcyBhbHJlYWR5IGluc2VydGVkJyk7XG4gICAgICB9XG4gICAgICBpZiAodmlldy5zdGF0ZSA9PT0gVklFV19TVEFURV9ERVNUUk9ZRUQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnNlcnRlZCB2aWV3IHdhcyBhbHJlYWR5IGRlc3Ryb3llZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aS5pbnNlcnRWaWV3cyA9IHZpZXdDb250cm9sbGVycztcbiAgfVxuICBnZXRFbnRlcmluZ1ZpZXcodGksIGxlYXZpbmdWaWV3KSB7XG4gICAgY29uc3QgaW5zZXJ0Vmlld3MgPSB0aS5pbnNlcnRWaWV3cztcbiAgICBpZiAoaW5zZXJ0Vmlld3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gZ3JhYiB0aGUgdmVyeSBsYXN0IHZpZXcgb2YgdGhlIHZpZXdzIHRvIGJlIGluc2VydGVkXG4gICAgICAvLyBhbmQgaW5pdGlhbGl6ZSBpdCBhcyB0aGUgbmV3IGVudGVyaW5nIHZpZXdcbiAgICAgIHJldHVybiBpbnNlcnRWaWV3c1tpbnNlcnRWaWV3cy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlU3RhcnQgPSB0aS5yZW1vdmVTdGFydDtcbiAgICBpZiAocmVtb3ZlU3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3Qgdmlld3MgPSB0aGlzLnZpZXdzO1xuICAgICAgY29uc3QgcmVtb3ZlRW5kID0gcmVtb3ZlU3RhcnQgKyB0aS5yZW1vdmVDb3VudDtcbiAgICAgIGZvciAobGV0IGkgPSB2aWV3cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCB2aWV3ID0gdmlld3NbaV07XG4gICAgICAgIGlmICgoaSA8IHJlbW92ZVN0YXJ0IHx8IGkgPj0gcmVtb3ZlRW5kKSAmJiB2aWV3ICE9PSBsZWF2aW5nVmlldykge1xuICAgICAgICAgIHJldHVybiB2aWV3O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcG9zdFZpZXdJbml0KGVudGVyaW5nVmlldywgbGVhdmluZ1ZpZXcsIHRpKSB7XG4gICAgYXNzZXJ0KGxlYXZpbmdWaWV3IHx8IGVudGVyaW5nVmlldywgJ0JvdGggbGVhdmluZ1ZpZXcgYW5kIGVudGVyaW5nVmlldyBhcmUgbnVsbCcpO1xuICAgIGFzc2VydCh0aS5yZXNvbHZlLCAncmVzb2x2ZSBtdXN0IGJlIHZhbGlkJyk7XG4gICAgYXNzZXJ0KHRpLnJlamVjdCwgJ3JlamVjdCBtdXN0IGJlIHZhbGlkJyk7XG4gICAgY29uc3Qgb3B0cyA9IHRpLm9wdHM7XG4gICAgY29uc3QgaW5zZXJ0Vmlld3MgPSB0aS5pbnNlcnRWaWV3cztcbiAgICBjb25zdCByZW1vdmVTdGFydCA9IHRpLnJlbW92ZVN0YXJ0O1xuICAgIGNvbnN0IHJlbW92ZUNvdW50ID0gdGkucmVtb3ZlQ291bnQ7XG4gICAgbGV0IGRlc3Ryb3lRdWV1ZTtcbiAgICAvLyB0aGVyZSBhcmUgdmlld3MgdG8gcmVtb3ZlXG4gICAgaWYgKHJlbW92ZVN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgcmVtb3ZlQ291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXNzZXJ0KHJlbW92ZVN0YXJ0ID49IDAsICdyZW1vdmVTdGFydCBjYW4gbm90IGJlIG5lZ2F0aXZlJyk7XG4gICAgICBhc3NlcnQocmVtb3ZlQ291bnQgPj0gMCwgJ3JlbW92ZUNvdW50IGNhbiBub3QgYmUgbmVnYXRpdmUnKTtcbiAgICAgIGRlc3Ryb3lRdWV1ZSA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXdzW2kgKyByZW1vdmVTdGFydF07XG4gICAgICAgIGlmICh2aWV3ICYmIHZpZXcgIT09IGVudGVyaW5nVmlldyAmJiB2aWV3ICE9PSBsZWF2aW5nVmlldykge1xuICAgICAgICAgIGRlc3Ryb3lRdWV1ZS5wdXNoKHZpZXcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBkZWZhdWx0IHRoZSBkaXJlY3Rpb24gdG8gXCJiYWNrXCJcbiAgICAgIG9wdHMuZGlyZWN0aW9uID0gb3B0cy5kaXJlY3Rpb24gfHwgJ2JhY2snO1xuICAgIH1cbiAgICBjb25zdCBmaW5hbEJhbGFuY2UgPSB0aGlzLnZpZXdzLmxlbmd0aCArXG4gICAgICAoaW5zZXJ0Vmlld3MgIT09IHVuZGVmaW5lZCA/IGluc2VydFZpZXdzLmxlbmd0aCA6IDApIC1cbiAgICAgIChyZW1vdmVDb3VudCAhPT0gdW5kZWZpbmVkID8gcmVtb3ZlQ291bnQgOiAwKTtcbiAgICBhc3NlcnQoZmluYWxCYWxhbmNlID49IDAsICdmaW5hbCBiYWxhbmNlIGNhbiBub3QgYmUgbmVnYXRpdmUnKTtcbiAgICBpZiAoZmluYWxCYWxhbmNlID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFlvdSBjYW4ndCByZW1vdmUgYWxsIHRoZSBwYWdlcyBpbiB0aGUgbmF2aWdhdGlvbiBzdGFjay4gbmF2LnBvcCgpIGlzIHByb2JhYmx5IGNhbGxlZCB0b28gbWFueSB0aW1lcy5gLCB0aGlzLCB0aGlzLmVsKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbmF2aWdhdGlvbiBzdGFjayBuZWVkcyBhdCBsZWFzdCBvbmUgcm9vdCBwYWdlJyk7XG4gICAgfVxuICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHRyYW5zaXRpb24gY2FuIG5vdCBiZSByZWplY3RlZCwgYW55IHRocm93IHNob3VsZCBiZSBhbiBlcnJvclxuICAgIC8vIHRoZXJlIGFyZSB2aWV3cyB0byBpbnNlcnRcbiAgICBpZiAoaW5zZXJ0Vmlld3MpIHtcbiAgICAgIC8vIGFkZCB0aGUgdmlld3MgdG8gdGhlXG4gICAgICBsZXQgaW5zZXJ0SW5kZXggPSB0aS5pbnNlcnRTdGFydDtcbiAgICAgIGZvciAoY29uc3QgdmlldyBvZiBpbnNlcnRWaWV3cykge1xuICAgICAgICB0aGlzLmluc2VydFZpZXdBdCh2aWV3LCBpbnNlcnRJbmRleCk7XG4gICAgICAgIGluc2VydEluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAodGkuZW50ZXJpbmdSZXF1aXJlc1RyYW5zaXRpb24pIHtcbiAgICAgICAgLy8gZGVmYXVsdCB0byBmb3J3YXJkIGlmIG5vdCBhbHJlYWR5IHNldFxuICAgICAgICBvcHRzLmRpcmVjdGlvbiA9IG9wdHMuZGlyZWN0aW9uIHx8ICdmb3J3YXJkJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaWYgdGhlIHZpZXdzIHRvIGJlIHJlbW92ZWQgYXJlIGluIHRoZSBiZWdpbm5pbmcgb3IgbWlkZGxlXG4gICAgLy8gYW5kIHRoZXJlIGlzIG5vdCBhIHZpZXcgdGhhdCBuZWVkcyB0byB2aXN1YWxseSB0cmFuc2l0aW9uIG91dFxuICAgIC8vIHRoZW4ganVzdCBkZXN0cm95IHRoZW0gYW5kIGRvbid0IHRyYW5zaXRpb24gYW55dGhpbmdcbiAgICAvLyBiYXRjaCBhbGwgb2YgbGlmZWN5Y2xlcyB0b2dldGhlclxuICAgIC8vIGxldCdzIG1ha2Ugc3VyZSwgY2FsbGJhY2tzIGFyZSB6b25lZFxuICAgIGlmIChkZXN0cm95UXVldWUgJiYgZGVzdHJveVF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoY29uc3QgdmlldyBvZiBkZXN0cm95UXVldWUpIHtcbiAgICAgICAgbGlmZWN5Y2xlKHZpZXcuZWxlbWVudCwgTElGRUNZQ0xFX1dJTExfTEVBVkUpO1xuICAgICAgICBsaWZlY3ljbGUodmlldy5lbGVtZW50LCBMSUZFQ1lDTEVfRElEX0xFQVZFKTtcbiAgICAgICAgbGlmZWN5Y2xlKHZpZXcuZWxlbWVudCwgTElGRUNZQ0xFX1dJTExfVU5MT0FEKTtcbiAgICAgIH1cbiAgICAgIC8vIG9uY2UgYWxsIGxpZmVjeWNsZSBldmVudHMgaGFzIGJlZW4gZGVsaXZlcmVkLCB3ZSBjYW4gc2FmZWx5IGRldHJveSB0aGUgdmlld3NcbiAgICAgIGZvciAoY29uc3QgdmlldyBvZiBkZXN0cm95UXVldWUpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95Vmlldyh2aWV3KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXN5bmMgdHJhbnNpdGlvbihlbnRlcmluZ1ZpZXcsIGxlYXZpbmdWaWV3LCB0aSkge1xuICAgIC8vIHdlIHNob3VsZCBhbmltYXRlIChkdXJhdGlvbiA+IDApIGlmIHRoZSBwdXNoZWQgcGFnZSBpcyBub3QgdGhlIGZpcnN0IG9uZSAoc3RhcnR1cClcbiAgICAvLyBvciBpZiBpdCBpcyBhIHBvcnRhbCAobW9kYWwsIGFjdGlvbnNoZWV0LCBldGMuKVxuICAgIGNvbnN0IG9wdHMgPSB0aS5vcHRzO1xuICAgIGNvbnN0IHByb2dyZXNzQ2FsbGJhY2sgPSBvcHRzLnByb2dyZXNzQW5pbWF0aW9uXG4gICAgICA/IChhbmkpID0+IHRoaXMuc2JBbmkgPSBhbmlcbiAgICAgIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IGVudGVyaW5nRWwgPSBlbnRlcmluZ1ZpZXcuZWxlbWVudDtcbiAgICBjb25zdCBsZWF2aW5nRWwgPSBsZWF2aW5nVmlldyAmJiBsZWF2aW5nVmlldy5lbGVtZW50O1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtb2RlLCBzaG93R29CYWNrOiB0aGlzLmNhbkdvQmFja1N5bmMoZW50ZXJpbmdWaWV3KSwgYmFzZUVsOiB0aGlzLmVsLCBwcm9ncmVzc0NhbGxiYWNrLCBhbmltYXRlZDogdGhpcy5hbmltYXRlZCAmJiBjb25maWcuZ2V0Qm9vbGVhbignYW5pbWF0ZWQnLCB0cnVlKSwgZW50ZXJpbmdFbCxcbiAgICAgIGxlYXZpbmdFbCB9LCBvcHRzKSwgeyBhbmltYXRpb25CdWlsZGVyOiBvcHRzLmFuaW1hdGlvbkJ1aWxkZXIgfHwgdGhpcy5hbmltYXRpb24gfHwgY29uZmlnLmdldCgnbmF2QW5pbWF0aW9uJykgfSk7XG4gICAgY29uc3QgeyBoYXNDb21wbGV0ZWQgfSA9IGF3YWl0IHRyYW5zaXRpb24oYW5pbWF0aW9uT3B0cyk7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbkZpbmlzaChoYXNDb21wbGV0ZWQsIGVudGVyaW5nVmlldywgbGVhdmluZ1ZpZXcsIG9wdHMpO1xuICB9XG4gIHRyYW5zaXRpb25GaW5pc2goaGFzQ29tcGxldGVkLCBlbnRlcmluZ1ZpZXcsIGxlYXZpbmdWaWV3LCBvcHRzKSB7XG4gICAgY29uc3QgY2xlYW51cFZpZXcgPSBoYXNDb21wbGV0ZWQgPyBlbnRlcmluZ1ZpZXcgOiBsZWF2aW5nVmlldztcbiAgICBpZiAoY2xlYW51cFZpZXcpIHtcbiAgICAgIHRoaXMuY2xlYW51cChjbGVhbnVwVmlldyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBoYXNDb21wbGV0ZWQsXG4gICAgICByZXF1aXJlc1RyYW5zaXRpb246IHRydWUsXG4gICAgICBlbnRlcmluZ1ZpZXcsXG4gICAgICBsZWF2aW5nVmlldyxcbiAgICAgIGRpcmVjdGlvbjogb3B0cy5kaXJlY3Rpb25cbiAgICB9O1xuICB9XG4gIGluc2VydFZpZXdBdCh2aWV3LCBpbmRleCkge1xuICAgIGNvbnN0IHZpZXdzID0gdGhpcy52aWV3cztcbiAgICBjb25zdCBleGlzdGluZ0luZGV4ID0gdmlld3MuaW5kZXhPZih2aWV3KTtcbiAgICBpZiAoZXhpc3RpbmdJbmRleCA+IC0xKSB7XG4gICAgICAvLyB0aGlzIHZpZXcgaXMgYWxyZWFkeSBpbiB0aGUgc3RhY2shIVxuICAgICAgLy8gbW92ZSBpdCB0byBpdHMgbmV3IGxvY2F0aW9uXG4gICAgICBhc3NlcnQodmlldy5uYXYgPT09IHRoaXMsICd2aWV3IGlzIG5vdCBwYXJ0IG9mIHRoZSBuYXYnKTtcbiAgICAgIHZpZXdzLnNwbGljZShpbmRleCwgMCwgdmlld3Muc3BsaWNlKGV4aXN0aW5nSW5kZXgsIDEpWzBdKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhc3NlcnQoIXZpZXcubmF2LCAnbmF2IGlzIHVzZWQnKTtcbiAgICAgIC8vIHRoaXMgaXMgYSBuZXcgdmlldyB0byBhZGQgdG8gdGhlIHN0YWNrXG4gICAgICAvLyBjcmVhdGUgdGhlIG5ldyBlbnRlcmluZyB2aWV3XG4gICAgICB2aWV3Lm5hdiA9IHRoaXM7XG4gICAgICAvLyBpbnNlcnQgdGhlIGVudGVyaW5nIHZpZXcgaW50byB0aGUgY29ycmVjdCBpbmRleCBpbiB0aGUgc3RhY2tcbiAgICAgIHZpZXdzLnNwbGljZShpbmRleCwgMCwgdmlldyk7XG4gICAgfVxuICB9XG4gIHJlbW92ZVZpZXcodmlldykge1xuICAgIGFzc2VydCh2aWV3LnN0YXRlID09PSBWSUVXX1NUQVRFX0FUVEFDSEVEIHx8IHZpZXcuc3RhdGUgPT09IFZJRVdfU1RBVEVfREVTVFJPWUVELCAndmlldyBzdGF0ZSBzaG91bGQgYmUgbG9hZGVkIG9yIGRlc3Ryb3llZCcpO1xuICAgIGNvbnN0IHZpZXdzID0gdGhpcy52aWV3cztcbiAgICBjb25zdCBpbmRleCA9IHZpZXdzLmluZGV4T2Yodmlldyk7XG4gICAgYXNzZXJ0KGluZGV4ID4gLTEsICd2aWV3IG11c3QgYmUgcGFydCBvZiB0aGUgc3RhY2snKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmlld3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveVZpZXcodmlldykge1xuICAgIHZpZXcuX2Rlc3Ryb3koKTtcbiAgICB0aGlzLnJlbW92ZVZpZXcodmlldyk7XG4gIH1cbiAgLyoqXG4gICAqIERPTSBXUklURVxuICAgKi9cbiAgY2xlYW51cChhY3RpdmVWaWV3KSB7XG4gICAgLy8gb2ssIGNsZWFudXAgdGltZSEhIERlc3Ryb3kgYWxsIG9mIHRoZSB2aWV3cyB0aGF0IGFyZVxuICAgIC8vIElOQUNUSVZFIGFuZCBjb21lIGFmdGVyIHRoZSBhY3RpdmUgdmlld1xuICAgIC8vIG9ubHkgZG8gdGhpcyBpZiB0aGUgdmlld3MgZXhpc3QsIHRob3VnaFxuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2aWV3cyA9IHRoaXMudmlld3M7XG4gICAgY29uc3QgYWN0aXZlVmlld0luZGV4ID0gdmlld3MuaW5kZXhPZihhY3RpdmVWaWV3KTtcbiAgICBmb3IgKGxldCBpID0gdmlld3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IHZpZXcgPSB2aWV3c1tpXTtcbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBpbnNlcnRpbmcgbXVsdGlwbGUgdmlld3MgdmlhIGluc2VydFBhZ2VzXG4gICAgICAgKiB0aGUgbGFzdCBwYWdlIHdpbGwgYmUgdHJhbnNpdGlvbmVkIHRvLCBidXQgdGhlXG4gICAgICAgKiBvdGhlcnMgd2lsbCBub3QgYmUuIEFzIGEgcmVzdWx0LCBhIERPTSBlbGVtZW50XG4gICAgICAgKiB3aWxsIG9ubHkgYmUgY3JlYXRlZCBmb3IgdGhlIGxhc3QgcGFnZSBpbnNlcnRlZC5cbiAgICAgICAqIEFzIGEgcmVzdWx0LCBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIHZpZXdzIGluIHRoZVxuICAgICAgICogc3RhY2sgdGhhdCBkbyBub3QgaGF2ZSBgdmlldy5lbGVtZW50YCB5ZXQuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB2aWV3LmVsZW1lbnQ7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoaSA+IGFjdGl2ZVZpZXdJbmRleCkge1xuICAgICAgICAgIC8vIHRoaXMgdmlldyBjb21lcyBhZnRlciB0aGUgYWN0aXZlIHZpZXdcbiAgICAgICAgICAvLyBsZXQncyB1bmxvYWQgaXRcbiAgICAgICAgICBsaWZlY3ljbGUoZWxlbWVudCwgTElGRUNZQ0xFX1dJTExfVU5MT0FEKTtcbiAgICAgICAgICB0aGlzLmRlc3Ryb3lWaWV3KHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGkgPCBhY3RpdmVWaWV3SW5kZXgpIHtcbiAgICAgICAgICAvLyB0aGlzIHZpZXcgY29tZXMgYmVmb3JlIHRoZSBhY3RpdmUgdmlld1xuICAgICAgICAgIC8vIGFuZCBpdCBpcyBub3QgYSBwb3J0YWwgdGhlbiBlbnN1cmUgaXQgaXMgaGlkZGVuXG4gICAgICAgICAgc2V0UGFnZUhpZGRlbihlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYW5TdGFydCgpIHtcbiAgICByZXR1cm4gKCEhdGhpcy5zd2lwZUdlc3R1cmUgJiZcbiAgICAgICF0aGlzLmlzVHJhbnNpdGlvbmluZyAmJlxuICAgICAgdGhpcy50cmFuc0luc3RyLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgdGhpcy5hbmltYXRpb25FbmFibGVkICYmXG4gICAgICB0aGlzLmNhbkdvQmFja1N5bmMoKSk7XG4gIH1cbiAgb25TdGFydCgpIHtcbiAgICB0aGlzLnF1ZXVlVHJucyh7XG4gICAgICByZW1vdmVTdGFydDogLTEsXG4gICAgICByZW1vdmVDb3VudDogMSxcbiAgICAgIG9wdHM6IHtcbiAgICAgICAgZGlyZWN0aW9uOiAnYmFjaycsXG4gICAgICAgIHByb2dyZXNzQW5pbWF0aW9uOiB0cnVlXG4gICAgICB9XG4gICAgfSwgdW5kZWZpbmVkKTtcbiAgfVxuICBvbk1vdmUoc3RlcFZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc2JBbmkpIHtcbiAgICAgIHRoaXMuc2JBbmkucHJvZ3Jlc3NTdGVwKHN0ZXBWYWx1ZSk7XG4gICAgfVxuICB9XG4gIG9uRW5kKHNob3VsZENvbXBsZXRlLCBzdGVwVmFsdWUsIGR1cikge1xuICAgIGlmICh0aGlzLnNiQW5pKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2JBbmkub25GaW5pc2goKCkgPT4ge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgfSwgeyBvbmVUaW1lQ2FsbGJhY2s6IHRydWUgfSk7XG4gICAgICAvLyBBY2NvdW50IGZvciByb3VuZGluZyBlcnJvcnMgaW4gSlNcbiAgICAgIGxldCBuZXdTdGVwVmFsdWUgPSAoc2hvdWxkQ29tcGxldGUpID8gLTAuMDAxIDogMC4wMDE7XG4gICAgICAvKipcbiAgICAgICAqIEFuaW1hdGlvbiB3aWxsIGJlIHJldmVyc2VkIGhlcmUsIHNvIG5lZWQgdG9cbiAgICAgICAqIHJldmVyc2UgdGhlIGVhc2luZyBjdXJ2ZSBhcyB3ZWxsXG4gICAgICAgKlxuICAgICAgICogQWRkaXRpb25hbGx5LCB3ZSBuZWVkIHRvIGFjY291bnQgZm9yIHRoZSB0aW1lIHJlbGF0aXZlXG4gICAgICAgKiB0byB0aGUgbmV3IGVhc2luZyBjdXJ2ZSwgYXMgYHN0ZXBWYWx1ZWAgaXMgZ29pbmcgdG8gYmUgZ2l2ZW5cbiAgICAgICAqIGluIHRlcm1zIG9mIGEgbGluZWFyIGN1cnZlLlxuICAgICAgICovXG4gICAgICBpZiAoIXNob3VsZENvbXBsZXRlKSB7XG4gICAgICAgIHRoaXMuc2JBbmkuZWFzaW5nKCdjdWJpYy1iZXppZXIoMSwgMCwgMC42OCwgMC4yOCknKTtcbiAgICAgICAgbmV3U3RlcFZhbHVlICs9IGdldFRpbWVHaXZlblByb2dyZXNzaW9uKFswLCAwXSwgWzEsIDBdLCBbMC42OCwgMC4yOF0sIFsxLCAxXSwgc3RlcFZhbHVlKVswXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdTdGVwVmFsdWUgKz0gZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24oWzAsIDBdLCBbMC4zMiwgMC43Ml0sIFswLCAxXSwgWzEsIDFdLCBzdGVwVmFsdWUpWzBdO1xuICAgICAgfVxuICAgICAgdGhpcy5zYkFuaS5wcm9ncmVzc0VuZChzaG91bGRDb21wbGV0ZSA/IDEgOiAwLCBuZXdTdGVwVmFsdWUsIGR1cik7XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKGgoXCJzbG90XCIsIG51bGwpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgXCJzd2lwZUdlc3R1cmVcIjogW1wic3dpcGVHZXN0dXJlQ2hhbmdlZFwiXSxcbiAgICBcInJvb3RcIjogW1wicm9vdENoYW5nZWRcIl1cbiAgfTsgfVxufTtcbk5hdi5zdHlsZSA9IG5hdkNzcztcblxuY29uc3QgbmF2TGluayA9IChlbCwgcm91dGVyRGlyZWN0aW9uLCBjb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCByb3V0ZXJBbmltYXRpb24pID0+IHtcbiAgY29uc3QgbmF2ID0gZWwuY2xvc2VzdCgnaW9uLW5hdicpO1xuICBpZiAobmF2KSB7XG4gICAgaWYgKHJvdXRlckRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICBpZiAoY29tcG9uZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdi5wdXNoKGNvbXBvbmVudCwgY29tcG9uZW50UHJvcHMsIHsgc2tpcElmQnVzeTogdHJ1ZSwgYW5pbWF0aW9uQnVpbGRlcjogcm91dGVyQW5pbWF0aW9uIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChyb3V0ZXJEaXJlY3Rpb24gPT09ICdyb290Jykge1xuICAgICAgaWYgKGNvbXBvbmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXYuc2V0Um9vdChjb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCB7IHNraXBJZkJ1c3k6IHRydWUsIGFuaW1hdGlvbkJ1aWxkZXI6IHJvdXRlckFuaW1hdGlvbiB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocm91dGVyRGlyZWN0aW9uID09PSAnYmFjaycpIHtcbiAgICAgIHJldHVybiBuYXYucG9wKHsgc2tpcElmQnVzeTogdHJ1ZSwgYW5pbWF0aW9uQnVpbGRlcjogcm91dGVyQW5pbWF0aW9uIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbn07XG5cbmNvbnN0IE5hdkxpbmsgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc2l0aW9uIGRpcmVjdGlvbiB3aGVuIG5hdmlnYXRpbmcgdG8gYW5vdGhlciBwYWdlLlxuICAgICAqL1xuICAgIHRoaXMucm91dGVyRGlyZWN0aW9uID0gJ2ZvcndhcmQnO1xuICAgIHRoaXMub25DbGljayA9ICgpID0+IHtcbiAgICAgIHJldHVybiBuYXZMaW5rKHRoaXMuZWwsIHRoaXMucm91dGVyRGlyZWN0aW9uLCB0aGlzLmNvbXBvbmVudCwgdGhpcy5jb21wb25lbnRQcm9wcywgdGhpcy5yb3V0ZXJBbmltYXRpb24pO1xuICAgIH07XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoaChIb3N0LCB7IG9uQ2xpY2s6IHRoaXMub25DbGljayB9KSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcblxuZXhwb3J0IHsgTmF2IGFzIGlvbl9uYXYsIE5hdkxpbmsgYXMgaW9uX25hdl9saW5rIH07XG4iXSwibmFtZXMiOlsiciIsInJlZ2lzdGVySW5zdGFuY2UiLCJlIiwiY3JlYXRlRXZlbnQiLCJoIiwiaSIsImdldEVsZW1lbnQiLCJIIiwiSG9zdCIsImIiLCJnZXRJb25Nb2RlIiwiYyIsImNvbmZpZyIsImciLCJnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbiIsImwiLCJhc3NlcnQiLCJsaWZlY3ljbGUiLCJ0IiwidHJhbnNpdGlvbiIsInMiLCJzZXRQYWdlSGlkZGVuIiwiZCIsIkxJRkVDWUNMRV9XSUxMX1VOTE9BRCIsIkxJRkVDWUNMRV9XSUxMX0xFQVZFIiwiTElGRUNZQ0xFX0RJRF9MRUFWRSIsImEiLCJhdHRhY2hDb21wb25lbnQiLCJWSUVXX1NUQVRFX05FVyIsIlZJRVdfU1RBVEVfQVRUQUNIRUQiLCJWSUVXX1NUQVRFX0RFU1RST1lFRCIsIlZpZXdDb250cm9sbGVyIiwiY29uc3RydWN0b3IiLCJjb21wb25lbnQiLCJwYXJhbXMiLCJzdGF0ZSIsImluaXQiLCJjb250YWluZXIiLCJlbGVtZW50IiwiZGVsZWdhdGUiLCJfZGVzdHJveSIsInJlbW92ZVZpZXdGcm9tRG9tIiwicGFyZW50RWxlbWVudCIsInJlbW92ZSIsIm5hdiIsInVuZGVmaW5lZCIsIm1hdGNoZXMiLCJ2aWV3IiwiaWQiLCJjdXJyZW50UGFyYW1zIiwia2V5c0EiLCJPYmplY3QiLCJrZXlzIiwia2V5c0IiLCJsZW5ndGgiLCJrZXkiLCJjb252ZXJ0VG9WaWV3IiwicGFnZSIsImNvbnZlcnRUb1ZpZXdzIiwicGFnZXMiLCJtYXAiLCJjb21wb25lbnRQcm9wcyIsImZpbHRlciIsInYiLCJuYXZDc3MiLCJOYXYiLCJob3N0UmVmIiwiaW9uTmF2V2lsbExvYWQiLCJpb25OYXZXaWxsQ2hhbmdlIiwiaW9uTmF2RGlkQ2hhbmdlIiwidHJhbnNJbnN0ciIsImFuaW1hdGlvbkVuYWJsZWQiLCJ1c2VSb3V0ZXIiLCJpc1RyYW5zaXRpb25pbmciLCJkZXN0cm95ZWQiLCJ2aWV3cyIsImFuaW1hdGVkIiwic3dpcGVHZXN0dXJlQ2hhbmdlZCIsImdlc3R1cmUiLCJlbmFibGUiLCJzd2lwZUdlc3R1cmUiLCJyb290Q2hhbmdlZCIsInJvb3QiLCJzZXRSb290Iiwicm9vdFBhcmFtcyIsImNvbXBvbmVudFdpbGxMb2FkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZWwiLCJjbG9zZXN0IiwibW9kZSIsImdldEJvb2xlYW4iLCJlbWl0IiwiY29tcG9uZW50RGlkTG9hZCIsImNyZWF0ZVN3aXBlQmFja0dlc3R1cmUiLCJjYW5TdGFydCIsImJpbmQiLCJvblN0YXJ0Iiwib25Nb3ZlIiwib25FbmQiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImRlc3Ryb3kiLCJwdXNoIiwib3B0cyIsImRvbmUiLCJxdWV1ZVRybnMiLCJpbnNlcnRTdGFydCIsImluc2VydFZpZXdzIiwiaW5zZXJ0IiwiaW5zZXJ0SW5kZXgiLCJpbnNlcnRQYWdlcyIsImluc2VydENvbXBvbmVudHMiLCJwb3AiLCJyZW1vdmVTdGFydCIsInJlbW92ZUNvdW50IiwicG9wVG8iLCJpbmRleE9yVmlld0N0cmwiLCJ0aUNvbmZpZyIsInJlbW92ZVZpZXciLCJwb3BUb1Jvb3QiLCJyZW1vdmVJbmRleCIsInN0YXJ0SW5kZXgiLCJzZXRQYWdlcyIsInNldFJvdXRlSWQiLCJkaXJlY3Rpb24iLCJhbmltYXRpb24iLCJhY3RpdmUiLCJnZXRBY3RpdmVTeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjaGFuZ2VkIiwicHJvbWlzZSIsImZpbmlzaCIsImNvbW1vbk9wdHMiLCJ1cGRhdGVVUkwiLCJ2aWV3SXNSZWFkeSIsImVudGVyaW5nRWwiLCJtYXJrIiwicCIsIm1hcmtWaXNpYmxlIiwidmlld0NvbnRyb2xsZXIiLCJmaW5kIiwiYXNzaWduIiwiYW5pbWF0aW9uQnVpbGRlciIsImdldFJvdXRlSWQiLCJ0YWdOYW1lIiwiZ2V0QWN0aXZlIiwiZ2V0QnlJbmRleCIsImluZGV4IiwiY2FuR29CYWNrIiwiY2FuR29CYWNrU3luYyIsImdldFByZXZpb3VzIiwiZ2V0UHJldmlvdXNTeW5jIiwiZ2V0TGVuZ3RoIiwiaW5kZXhPZiIsInRpIiwic2tpcElmQnVzeSIsInJlamVjdCIsInJvdXRlciIsImNhblRyYW5zaXRpb24iLCJuZXh0VHJucyIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJmaXJlRXJyb3IiLCJoYXNDb21wbGV0ZWQiLCJyZXF1aXJlc1RyYW5zaXRpb24iLCJlbnRlcmluZ1ZpZXciLCJsZWF2aW5nVmlldyIsIm5hdkNoYW5nZWQiLCJmYWlsZWQiLCJyZWplY3RSZWFzb24iLCJzaGlmdCIsInJ1blRyYW5zaXRpb24iLCJwcmVwYXJlVEkiLCJnZXRFbnRlcmluZ1ZpZXciLCJFcnJvciIsInBvc3RWaWV3SW5pdCIsImVudGVyaW5nUmVxdWlyZXNUcmFuc2l0aW9uIiwibGVhdmluZ1JlcXVpcmVzVHJhbnNpdGlvbiIsImlzQmFja0RpcmVjdGlvbiIsInZpZXdzTGVuZ3RoIiwidmlld0NvbnRyb2xsZXJzIiwicmVtb3ZlRW5kIiwiZGVzdHJveVF1ZXVlIiwiZmluYWxCYWxhbmNlIiwiY29uc29sZSIsIndhcm4iLCJpbnNlcnRWaWV3QXQiLCJkZXN0cm95VmlldyIsInByb2dyZXNzQ2FsbGJhY2siLCJwcm9ncmVzc0FuaW1hdGlvbiIsImFuaSIsInNiQW5pIiwibGVhdmluZ0VsIiwiYW5pbWF0aW9uT3B0cyIsInNob3dHb0JhY2siLCJiYXNlRWwiLCJnZXQiLCJ0cmFuc2l0aW9uRmluaXNoIiwiY2xlYW51cFZpZXciLCJjbGVhbnVwIiwiZXhpc3RpbmdJbmRleCIsInNwbGljZSIsImFjdGl2ZVZpZXciLCJhY3RpdmVWaWV3SW5kZXgiLCJzdGVwVmFsdWUiLCJwcm9ncmVzc1N0ZXAiLCJzaG91bGRDb21wbGV0ZSIsImR1ciIsIm9uRmluaXNoIiwib25lVGltZUNhbGxiYWNrIiwibmV3U3RlcFZhbHVlIiwiZWFzaW5nIiwicHJvZ3Jlc3NFbmQiLCJyZW5kZXIiLCJ3YXRjaGVycyIsInN0eWxlIiwibmF2TGluayIsInJvdXRlckRpcmVjdGlvbiIsInJvdXRlckFuaW1hdGlvbiIsIk5hdkxpbmsiLCJvbkNsaWNrIiwiaW9uX25hdiIsImlvbl9uYXZfbGluayJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8ifQ==