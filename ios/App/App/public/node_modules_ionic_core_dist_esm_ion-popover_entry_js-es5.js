(function () {
  "use strict";

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (self["webpackChunkregobs4"] = self["webpackChunkregobs4"] || []).push([["node_modules_ionic_core_dist_esm_ion-popover_entry_js"], {
    /***/
    87686: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ion_popover": function ion_popover() {
          return (
            /* binding */
            Popover
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator */
      80151);
      /* harmony import */


      var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./index-7a8b7a1c.js */
      76842);
      /* harmony import */


      var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./ionic-global-63a97a32.js */
      33124);
      /* harmony import */


      var _framework_delegate_4392cd63_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./framework-delegate-4392cd63.js */
      85356);
      /* harmony import */


      var _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./overlays-e9ccff30.js */
      36838);
      /* harmony import */


      var _theme_ff3fc52f_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./theme-ff3fc52f.js */
      43784);
      /* harmony import */


      var _index_931440b1_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./index-931440b1.js */
      39546);
      /* harmony import */


      var _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./animation-096c6391.js */
      93844);
      /* harmony import */


      var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./helpers-dd7e4b7b.js */
      40693);
      /* harmony import */


      var _hardware_back_button_4a6b37fb_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./hardware-back-button-4a6b37fb.js */
      57899);
      /**
       * iOS Popover Enter Animation
       */


      var iosEnterAnimation = function iosEnterAnimation(baseEl, ev) {
        var originY = 'top';
        var originX = 'left';
        var contentEl = baseEl.querySelector('.popover-content');
        var contentDimentions = contentEl.getBoundingClientRect();
        var contentWidth = contentDimentions.width;
        var contentHeight = contentDimentions.height;
        var bodyWidth = baseEl.ownerDocument.defaultView.innerWidth;
        var bodyHeight = baseEl.ownerDocument.defaultView.innerHeight; // If ev was passed, use that for target element

        var targetDim = ev && ev.target && ev.target.getBoundingClientRect();
        var targetTop = targetDim != null && 'top' in targetDim ? targetDim.top : bodyHeight / 2 - contentHeight / 2;
        var targetLeft = targetDim != null && 'left' in targetDim ? targetDim.left : bodyWidth / 2;
        var targetWidth = targetDim && targetDim.width || 0;
        var targetHeight = targetDim && targetDim.height || 0;
        var arrowEl = baseEl.querySelector('.popover-arrow');
        var arrowDim = arrowEl.getBoundingClientRect();
        var arrowWidth = arrowDim.width;
        var arrowHeight = arrowDim.height;

        if (targetDim == null) {
          arrowEl.style.display = 'none';
        }

        var arrowCSS = {
          top: targetTop + targetHeight,
          left: targetLeft + targetWidth / 2 - arrowWidth / 2
        };
        var popoverCSS = {
          top: targetTop + targetHeight + (arrowHeight - 1),
          left: targetLeft + targetWidth / 2 - contentWidth / 2
        }; // If the popover left is less than the padding it is off screen
        // to the left so adjust it, else if the width of the popover
        // exceeds the body width it is off screen to the right so adjust
        //

        var checkSafeAreaLeft = false;
        var checkSafeAreaRight = false; // If the popover left is less than the padding it is off screen
        // to the left so adjust it, else if the width of the popover
        // exceeds the body width it is off screen to the right so adjust
        // 25 is a random/arbitrary number. It seems to work fine for ios11
        // and iPhoneX. Is it perfect? No. Does it work? Yes.

        if (popoverCSS.left < POPOVER_IOS_BODY_PADDING + 25) {
          checkSafeAreaLeft = true;
          popoverCSS.left = POPOVER_IOS_BODY_PADDING;
        } else if (contentWidth + POPOVER_IOS_BODY_PADDING + popoverCSS.left + 25 > bodyWidth) {
          // Ok, so we're on the right side of the screen,
          // but now we need to make sure we're still a bit further right
          // cus....notchurally... Again, 25 is random. It works tho
          checkSafeAreaRight = true;
          popoverCSS.left = bodyWidth - contentWidth - POPOVER_IOS_BODY_PADDING;
          originX = 'right';
        } // make it pop up if there's room above


        if (targetTop + targetHeight + contentHeight > bodyHeight && targetTop - contentHeight > 0) {
          arrowCSS.top = targetTop - (arrowHeight + 1);
          popoverCSS.top = targetTop - contentHeight - (arrowHeight - 1);
          baseEl.className = baseEl.className + ' popover-bottom';
          originY = 'bottom'; // If there isn't room for it to pop up above the target cut it off
        } else if (targetTop + targetHeight + contentHeight > bodyHeight) {
          contentEl.style.bottom = POPOVER_IOS_BODY_PADDING + '%';
        }

        arrowEl.style.top = arrowCSS.top + 'px';
        arrowEl.style.left = arrowCSS.left + 'px';
        contentEl.style.top = popoverCSS.top + 'px';
        contentEl.style.left = popoverCSS.left + 'px';

        if (checkSafeAreaLeft) {
          contentEl.style.left = "calc(".concat(popoverCSS.left, "px + var(--ion-safe-area-left, 0px))");
        }

        if (checkSafeAreaRight) {
          contentEl.style.left = "calc(".concat(popoverCSS.left, "px - var(--ion-safe-area-right, 0px))");
        }

        contentEl.style.transformOrigin = originY + ' ' + originX;
        var baseAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var backdropAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var wrapperAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({
          'pointer-events': 'none'
        }).afterClearStyles(['pointer-events']);
        wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.01, 1);
        return baseAnimation.addElement(baseEl).easing('ease').duration(100).addAnimation([backdropAnimation, wrapperAnimation]);
      };

      var POPOVER_IOS_BODY_PADDING = 5;
      /**
       * iOS Popover Leave Animation
       */

      var iosLeaveAnimation = function iosLeaveAnimation(baseEl) {
        var baseAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var backdropAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var wrapperAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0);
        wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.99, 0);
        return baseAnimation.addElement(baseEl).easing('ease').duration(500).addAnimation([backdropAnimation, wrapperAnimation]);
      };
      /**
       * Md Popover Enter Animation
       */


      var mdEnterAnimation = function mdEnterAnimation(baseEl, ev) {
        var POPOVER_MD_BODY_PADDING = 12;
        var doc = baseEl.ownerDocument;
        var isRTL = doc.dir === 'rtl';
        var originY = 'top';
        var originX = isRTL ? 'right' : 'left';
        var contentEl = baseEl.querySelector('.popover-content');
        var contentDimentions = contentEl.getBoundingClientRect();
        var contentWidth = contentDimentions.width;
        var contentHeight = contentDimentions.height;
        var bodyWidth = doc.defaultView.innerWidth;
        var bodyHeight = doc.defaultView.innerHeight; // If ev was passed, use that for target element

        var targetDim = ev && ev.target && ev.target.getBoundingClientRect(); // As per MD spec, by default position the popover below the target (trigger) element

        var targetTop = targetDim != null && 'bottom' in targetDim ? targetDim.bottom : bodyHeight / 2 - contentHeight / 2;
        var targetLeft = targetDim != null && 'left' in targetDim ? isRTL ? targetDim.left - contentWidth + targetDim.width : targetDim.left : bodyWidth / 2 - contentWidth / 2;
        var targetHeight = targetDim && targetDim.height || 0;
        var popoverCSS = {
          top: targetTop,
          left: targetLeft
        }; // If the popover left is less than the padding it is off screen
        // to the left so adjust it, else if the width of the popover
        // exceeds the body width it is off screen to the right so adjust

        if (popoverCSS.left < POPOVER_MD_BODY_PADDING) {
          popoverCSS.left = POPOVER_MD_BODY_PADDING; // Same origin in this case for both LTR & RTL
          // Note: in LTR, originX is already 'left'

          originX = 'left';
        } else if (contentWidth + POPOVER_MD_BODY_PADDING + popoverCSS.left > bodyWidth) {
          popoverCSS.left = bodyWidth - contentWidth - POPOVER_MD_BODY_PADDING; // Same origin in this case for both LTR & RTL
          // Note: in RTL, originX is already 'right'

          originX = 'right';
        } // If the popover when popped down stretches past bottom of screen,
        // make it pop up if there's room above


        if (targetTop + targetHeight + contentHeight > bodyHeight && targetTop - contentHeight > 0) {
          popoverCSS.top = targetTop - contentHeight - targetHeight;
          baseEl.className = baseEl.className + ' popover-bottom';
          originY = 'bottom'; // If there isn't room for it to pop up above the target cut it off
        } else if (targetTop + targetHeight + contentHeight > bodyHeight) {
          contentEl.style.bottom = POPOVER_MD_BODY_PADDING + 'px';
        }

        var baseAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var backdropAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var wrapperAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var contentAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var viewportAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({
          'pointer-events': 'none'
        }).afterClearStyles(['pointer-events']);
        wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.01, 1);
        contentAnimation.addElement(contentEl).beforeStyles({
          'top': "".concat(popoverCSS.top, "px"),
          'left': "".concat(popoverCSS.left, "px"),
          'transform-origin': "".concat(originY, " ").concat(originX)
        }).fromTo('transform', 'scale(0.001)', 'scale(1)');
        viewportAnimation.addElement(baseEl.querySelector('.popover-viewport')).fromTo('opacity', 0.01, 1);
        return baseAnimation.addElement(baseEl).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(300).addAnimation([backdropAnimation, wrapperAnimation, contentAnimation, viewportAnimation]);
      };
      /**
       * Md Popover Leave Animation
       */


      var mdLeaveAnimation = function mdLeaveAnimation(baseEl) {
        var baseAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var backdropAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        var wrapperAnimation = (0, _animation_096c6391_js__WEBPACK_IMPORTED_MODULE_7__.c)();
        backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0);
        wrapperAnimation.addElement(baseEl.querySelector('.popover-wrapper')).fromTo('opacity', 0.99, 0);
        return baseAnimation.addElement(baseEl).easing('ease').duration(500).addAnimation([backdropAnimation, wrapperAnimation]);
      };

      var popoverIosCss = ".sc-ion-popover-ios-h{--background:var(--ion-background-color, #fff);--min-width:0;--min-height:0;--max-width:auto;--height:auto;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:fixed;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;color:var(--ion-text-color, #000);z-index:1001}.overlay-hidden.sc-ion-popover-ios-h{display:none}.popover-wrapper.sc-ion-popover-ios{opacity:0;z-index:10}.popover-content.sc-ion-popover-ios{display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:auto;z-index:10}.popover-viewport.sc-ion-popover-ios{--ion-safe-area-top:0px;--ion-safe-area-right:0px;--ion-safe-area-bottom:0px;--ion-safe-area-left:0px}.sc-ion-popover-ios-h{--width:200px;--max-height:90%;--box-shadow:none;--backdrop-opacity:var(--ion-backdrop-opacity, 0.08)}.popover-content.sc-ion-popover-ios{border-radius:10px}.popover-arrow.sc-ion-popover-ios{display:block;position:absolute;width:20px;height:10px;overflow:hidden}.popover-arrow.sc-ion-popover-ios::after{left:3px;top:3px;border-radius:3px;position:absolute;width:14px;height:14px;-webkit-transform:rotate(45deg);transform:rotate(45deg);background:var(--background);content:\"\";z-index:10}[dir=rtl].sc-ion-popover-ios .popover-arrow.sc-ion-popover-ios::after,[dir=rtl].sc-ion-popover-ios-h .popover-arrow.sc-ion-popover-ios::after,[dir=rtl] .sc-ion-popover-ios-h .popover-arrow.sc-ion-popover-ios::after{left:unset;right:unset;right:3px}.popover-bottom.sc-ion-popover-ios-h .popover-arrow.sc-ion-popover-ios{top:auto;bottom:-10px}.popover-bottom.sc-ion-popover-ios-h .popover-arrow.sc-ion-popover-ios::after{top:-6px}@supports ((-webkit-backdrop-filter: blur(0)) or (backdrop-filter: blur(0))){.popover-translucent.sc-ion-popover-ios-h .popover-content.sc-ion-popover-ios,.popover-translucent.sc-ion-popover-ios-h .popover-arrow.sc-ion-popover-ios::after{background:rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);-webkit-backdrop-filter:saturate(180%) blur(20px);backdrop-filter:saturate(180%) blur(20px)}}";
      var popoverMdCss = ".sc-ion-popover-md-h{--background:var(--ion-background-color, #fff);--min-width:0;--min-height:0;--max-width:auto;--height:auto;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:fixed;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;color:var(--ion-text-color, #000);z-index:1001}.overlay-hidden.sc-ion-popover-md-h{display:none}.popover-wrapper.sc-ion-popover-md{opacity:0;z-index:10}.popover-content.sc-ion-popover-md{display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:auto;z-index:10}.popover-viewport.sc-ion-popover-md{--ion-safe-area-top:0px;--ion-safe-area-right:0px;--ion-safe-area-bottom:0px;--ion-safe-area-left:0px}.sc-ion-popover-md-h{--width:250px;--max-height:90%;--box-shadow:0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);--backdrop-opacity:var(--ion-backdrop-opacity, 0.32)}.popover-content.sc-ion-popover-md{border-radius:4px;-webkit-transform-origin:left top;transform-origin:left top}[dir=rtl].sc-ion-popover-md .popover-content.sc-ion-popover-md,[dir=rtl].sc-ion-popover-md-h .popover-content.sc-ion-popover-md,[dir=rtl] .sc-ion-popover-md-h .popover-content.sc-ion-popover-md{-webkit-transform-origin:right top;transform-origin:right top}.popover-viewport.sc-ion-popover-md{-webkit-transition-delay:100ms;transition-delay:100ms}";

      var Popover = /*#__PURE__*/function () {
        function Popover(hostRef) {
          var _this3 = this;

          _classCallCheck(this, Popover);

          (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
          this.didPresent = (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPopoverDidPresent", 7);
          this.willPresent = (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPopoverWillPresent", 7);
          this.willDismiss = (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPopoverWillDismiss", 7);
          this.didDismiss = (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionPopoverDidDismiss", 7);
          this.presented = false;
          /**
           * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
           */

          this.keyboardClose = true;
          /**
           * If `true`, the popover will be dismissed when the backdrop is clicked.
           */

          this.backdropDismiss = true;
          /**
           * If `true`, a backdrop will be displayed behind the popover.
           */

          this.showBackdrop = true;
          /**
           * If `true`, the popover will be translucent.
           * Only applies when the mode is `"ios"` and the device supports
           * [`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).
           */

          this.translucent = false;
          /**
           * If `true`, the popover will animate.
           */

          this.animated = true;

          this.onDismiss = function (ev) {
            ev.stopPropagation();
            ev.preventDefault();

            _this3.dismiss();
          };

          this.onBackdropTap = function () {
            _this3.dismiss(undefined, _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_4__.B);
          };

          this.onLifecycle = function (modalEvent) {
            var el = _this3.usersElement;
            var name = LIFECYCLE_MAP[modalEvent.type];

            if (el && name) {
              var event = new CustomEvent(name, {
                bubbles: false,
                cancelable: false,
                detail: modalEvent.detail
              });
              el.dispatchEvent(event);
            }
          };
        }

        _createClass(Popover, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            (0, _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_4__.e)(this.el);
          }
          /**
           * Present the popover overlay after it has been created.
           */

        }, {
          key: "present",
          value: function present() {
            var _this = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var container, data;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!_this.presented) {
                        _context.next = 2;
                        break;
                      }

                      return _context.abrupt("return");

                    case 2:
                      container = _this.el.querySelector('.popover-content');

                      if (container) {
                        _context.next = 5;
                        break;
                      }

                      throw new Error('container is undefined');

                    case 5:
                      data = Object.assign(Object.assign({}, _this.componentProps), {
                        popover: _this.el
                      });
                      _context.next = 8;
                      return (0, _framework_delegate_4392cd63_js__WEBPACK_IMPORTED_MODULE_3__.a)(_this.delegate, container, _this.component, ['popover-viewport', _this.el['s-sc']], data);

                    case 8:
                      _this.usersElement = _context.sent;
                      _context.next = 11;
                      return (0, _index_931440b1_js__WEBPACK_IMPORTED_MODULE_6__.e)(_this.usersElement);

                    case 11:
                      return _context.abrupt("return", (0, _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_4__.d)(_this, 'popoverEnter', iosEnterAnimation, mdEnterAnimation, _this.event));

                    case 12:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))();
          }
          /**
           * Dismiss the popover overlay after it has been presented.
           *
           * @param data Any data to emit in the dismiss events.
           * @param role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'.
           */

        }, {
          key: "dismiss",
          value: function dismiss(data, role) {
            var _this2 = this;

            return (0, C_Repos_regobs_regObs4_node_modules_angular_devkit_build_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
              var shouldDismiss;
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return (0, _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_4__.f)(_this2, data, role, 'popoverLeave', iosLeaveAnimation, mdLeaveAnimation, _this2.event);

                    case 2:
                      shouldDismiss = _context2.sent;

                      if (!shouldDismiss) {
                        _context2.next = 6;
                        break;
                      }

                      _context2.next = 6;
                      return (0, _framework_delegate_4392cd63_js__WEBPACK_IMPORTED_MODULE_3__.d)(_this2.delegate, _this2.usersElement);

                    case 6:
                      return _context2.abrupt("return", shouldDismiss);

                    case 7:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            }))();
          }
          /**
           * Returns a promise that resolves when the popover did dismiss.
           */

        }, {
          key: "onDidDismiss",
          value: function onDidDismiss() {
            return (0, _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.el, 'ionPopoverDidDismiss');
          }
          /**
           * Returns a promise that resolves when the popover will dismiss.
           */

        }, {
          key: "onWillDismiss",
          value: function onWillDismiss() {
            return (0, _overlays_e9ccff30_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.el, 'ionPopoverWillDismiss');
          }
        }, {
          key: "render",
          value: function render() {
            var _Object$assign;

            var mode = (0, _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
            var onLifecycle = this.onLifecycle;
            return (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.H, {
              "aria-modal": "true",
              "no-router": true,
              tabindex: "-1",
              style: {
                zIndex: "".concat(20000 + this.overlayIndex)
              },
              "class": Object.assign(Object.assign({}, (0, _theme_ff3fc52f_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.cssClass)), (_Object$assign = {}, _defineProperty(_Object$assign, mode, true), _defineProperty(_Object$assign, 'popover-translucent', this.translucent), _Object$assign)),
              onIonPopoverDidPresent: onLifecycle,
              onIonPopoverWillPresent: onLifecycle,
              onIonPopoverWillDismiss: onLifecycle,
              onIonPopoverDidDismiss: onLifecycle,
              onIonDismiss: this.onDismiss,
              onIonBackdropTap: this.onBackdropTap
            }, (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-backdrop", {
              tappable: this.backdropDismiss,
              visible: this.showBackdrop
            }), (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              tabindex: "0"
            }), (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              "class": "popover-wrapper ion-overlay-wrapper"
            }, (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              "class": "popover-arrow"
            }), (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              "class": "popover-content"
            })), (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
              tabindex: "0"
            }));
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
          }
        }]);

        return Popover;
      }();

      var LIFECYCLE_MAP = {
        'ionPopoverDidPresent': 'ionViewDidEnter',
        'ionPopoverWillPresent': 'ionViewWillEnter',
        'ionPopoverWillDismiss': 'ionViewWillLeave',
        'ionPopoverDidDismiss': 'ionViewDidLeave'
      };
      Popover.style = {
        ios: popoverIosCss,
        md: popoverMdCss
      };
      /***/
    }
  }]);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7OztBQUNBLFVBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQ0MsTUFBRCxFQUFTQyxFQUFULEVBQWdCO0FBQ3hDLFlBQUlDLE9BQU8sR0FBRyxLQUFkO0FBQ0EsWUFBSUMsT0FBTyxHQUFHLE1BQWQ7QUFDQSxZQUFNQyxTQUFTLEdBQUdKLE1BQU0sQ0FBQ0ssYUFBUEwsQ0FBcUIsa0JBQXJCQSxDQUFsQjtBQUNBLFlBQU1NLGlCQUFpQixHQUFHRixTQUFTLENBQUNHLHFCQUFWSCxFQUExQjtBQUNBLFlBQU1JLFlBQVksR0FBR0YsaUJBQWlCLENBQUNHLEtBQXZDO0FBQ0EsWUFBTUMsYUFBYSxHQUFHSixpQkFBaUIsQ0FBQ0ssTUFBeEM7QUFDQSxZQUFNQyxTQUFTLEdBQUdaLE1BQU0sQ0FBQ2EsYUFBUGIsQ0FBcUJjLFdBQXJCZCxDQUFpQ2UsVUFBbkQ7QUFDQSxZQUFNQyxVQUFVLEdBQUdoQixNQUFNLENBQUNhLGFBQVBiLENBQXFCYyxXQUFyQmQsQ0FBaUNpQixXQUFwRCxDQVJ3QyxDQVN4Qzs7QUFDQSxZQUFNQyxTQUFTLEdBQUdqQixFQUFFLElBQUlBLEVBQUUsQ0FBQ2tCLE1BQVRsQixJQUFtQkEsRUFBRSxDQUFDa0IsTUFBSGxCLENBQVVNLHFCQUFWTixFQUFyQztBQUNBLFlBQU1tQixTQUFTLEdBQUdGLFNBQVMsSUFBSSxJQUFiQSxJQUFxQixTQUFTQSxTQUE5QkEsR0FBMENBLFNBQVMsQ0FBQ0csR0FBcERILEdBQTBERixVQUFVLEdBQUcsQ0FBYkEsR0FBaUJOLGFBQWEsR0FBRyxDQUE3RztBQUNBLFlBQU1ZLFVBQVUsR0FBR0osU0FBUyxJQUFJLElBQWJBLElBQXFCLFVBQVVBLFNBQS9CQSxHQUEyQ0EsU0FBUyxDQUFDSyxJQUFyREwsR0FBNEROLFNBQVMsR0FBRyxDQUEzRjtBQUNBLFlBQU1ZLFdBQVcsR0FBSU4sU0FBUyxJQUFJQSxTQUFTLENBQUNULEtBQXZCUyxJQUFpQyxDQUF0RDtBQUNBLFlBQU1PLFlBQVksR0FBSVAsU0FBUyxJQUFJQSxTQUFTLENBQUNQLE1BQXZCTyxJQUFrQyxDQUF4RDtBQUNBLFlBQU1RLE9BQU8sR0FBRzFCLE1BQU0sQ0FBQ0ssYUFBUEwsQ0FBcUIsZ0JBQXJCQSxDQUFoQjtBQUNBLFlBQU0yQixRQUFRLEdBQUdELE9BQU8sQ0FBQ25CLHFCQUFSbUIsRUFBakI7QUFDQSxZQUFNRSxVQUFVLEdBQUdELFFBQVEsQ0FBQ2xCLEtBQTVCO0FBQ0EsWUFBTW9CLFdBQVcsR0FBR0YsUUFBUSxDQUFDaEIsTUFBN0I7O0FBQ0EsWUFBSU8sU0FBUyxJQUFJLElBQWpCLEVBQXVCO0FBQ3JCUSxpQkFBTyxDQUFDSSxLQUFSSixDQUFjSyxPQUFkTCxHQUF3QixNQUF4QkE7QUFDRDs7QUFDRCxZQUFNTSxRQUFRLEdBQUc7QUFDZlgsYUFBRyxFQUFFRCxTQUFTLEdBQUdLLFlBREY7QUFFZkYsY0FBSSxFQUFFRCxVQUFVLEdBQUdFLFdBQVcsR0FBRyxDQUEzQkYsR0FBK0JNLFVBQVUsR0FBRztBQUZuQyxTQUFqQjtBQUlBLFlBQU1LLFVBQVUsR0FBRztBQUNqQlosYUFBRyxFQUFFRCxTQUFTLEdBQUdLLFlBQVpMLElBQTRCUyxXQUFXLEdBQUcsQ0FBMUNULENBRFk7QUFFakJHLGNBQUksRUFBRUQsVUFBVSxHQUFHRSxXQUFXLEdBQUcsQ0FBM0JGLEdBQStCZCxZQUFZLEdBQUc7QUFGbkMsU0FBbkIsQ0ExQndDLENBOEJ4QztBQUNBO0FBQ0E7QUFDQTs7QUFDQSxZQUFJMEIsaUJBQWlCLEdBQUcsS0FBeEI7QUFDQSxZQUFJQyxrQkFBa0IsR0FBRyxLQUF6QixDQW5Dd0MsQ0FvQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsWUFBSUYsVUFBVSxDQUFDVixJQUFYVSxHQUFrQkcsd0JBQXdCLEdBQUcsRUFBakQsRUFBcUQ7QUFDbkRGLDJCQUFpQixHQUFHLElBQXBCQTtBQUNBRCxvQkFBVSxDQUFDVixJQUFYVSxHQUFrQkcsd0JBQWxCSDtBQUZGLGVBSUssSUFBSXpCLFlBQVksR0FBRzRCLHdCQUFmNUIsR0FBMEN5QixVQUFVLENBQUNWLElBQXJEZixHQUE0RCxFQUE1REEsR0FBaUVJLFNBQXJFLEVBQWdGO0FBQ25GO0FBQ0E7QUFDQTtBQUNBdUIsNEJBQWtCLEdBQUcsSUFBckJBO0FBQ0FGLG9CQUFVLENBQUNWLElBQVhVLEdBQWtCckIsU0FBUyxHQUFHSixZQUFaSSxHQUEyQndCLHdCQUE3Q0g7QUFDQTlCLGlCQUFPLEdBQUcsT0FBVkE7QUFuRHNDLFVBcUR4Qzs7O0FBQ0EsWUFBSWlCLFNBQVMsR0FBR0ssWUFBWkwsR0FBMkJWLGFBQTNCVSxHQUEyQ0osVUFBM0NJLElBQXlEQSxTQUFTLEdBQUdWLGFBQVpVLEdBQTRCLENBQXpGLEVBQTRGO0FBQzFGWSxrQkFBUSxDQUFDWCxHQUFUVyxHQUFlWixTQUFTLElBQUlTLFdBQVcsR0FBRyxDQUFsQixDQUF4Qkc7QUFDQUMsb0JBQVUsQ0FBQ1osR0FBWFksR0FBaUJiLFNBQVMsR0FBR1YsYUFBWlUsSUFBNkJTLFdBQVcsR0FBRyxDQUEzQ1QsQ0FBakJhO0FBQ0FqQyxnQkFBTSxDQUFDcUMsU0FBUHJDLEdBQW1CQSxNQUFNLENBQUNxQyxTQUFQckMsR0FBbUIsaUJBQXRDQTtBQUNBRSxpQkFBTyxHQUFHLFFBQVZBLENBSjBGLENBSzFGO0FBTEYsZUFPSyxJQUFJa0IsU0FBUyxHQUFHSyxZQUFaTCxHQUEyQlYsYUFBM0JVLEdBQTJDSixVQUEvQyxFQUEyRDtBQUM5RFosbUJBQVMsQ0FBQzBCLEtBQVYxQixDQUFnQmtDLE1BQWhCbEMsR0FBeUJnQyx3QkFBd0IsR0FBRyxHQUFwRGhDO0FBQ0Q7O0FBQ0RzQixlQUFPLENBQUNJLEtBQVJKLENBQWNMLEdBQWRLLEdBQW9CTSxRQUFRLENBQUNYLEdBQVRXLEdBQWUsSUFBbkNOO0FBQ0FBLGVBQU8sQ0FBQ0ksS0FBUkosQ0FBY0gsSUFBZEcsR0FBcUJNLFFBQVEsQ0FBQ1QsSUFBVFMsR0FBZ0IsSUFBckNOO0FBQ0F0QixpQkFBUyxDQUFDMEIsS0FBVjFCLENBQWdCaUIsR0FBaEJqQixHQUFzQjZCLFVBQVUsQ0FBQ1osR0FBWFksR0FBaUIsSUFBdkM3QjtBQUNBQSxpQkFBUyxDQUFDMEIsS0FBVjFCLENBQWdCbUIsSUFBaEJuQixHQUF1QjZCLFVBQVUsQ0FBQ1YsSUFBWFUsR0FBa0IsSUFBekM3Qjs7QUFDQSxZQUFJOEIsaUJBQUosRUFBdUI7QUFDckI5QixtQkFBUyxDQUFDMEIsS0FBVjFCLENBQWdCbUIsSUFBaEJuQixrQkFBK0I2QixVQUFVLENBQUNWLElBQTFDbkI7QUFDRDs7QUFDRCxZQUFJK0Isa0JBQUosRUFBd0I7QUFDdEIvQixtQkFBUyxDQUFDMEIsS0FBVjFCLENBQWdCbUIsSUFBaEJuQixrQkFBK0I2QixVQUFVLENBQUNWLElBQTFDbkI7QUFDRDs7QUFDREEsaUJBQVMsQ0FBQzBCLEtBQVYxQixDQUFnQm1DLGVBQWhCbkMsR0FBa0NGLE9BQU8sR0FBRyxHQUFWQSxHQUFnQkMsT0FBbERDO0FBQ0EsWUFBTW9DLGFBQWEsR0FBR0MsNERBQXRCO0FBQ0EsWUFBTUMsaUJBQWlCLEdBQUdELDREQUExQjtBQUNBLFlBQU1FLGdCQUFnQixHQUFHRiw0REFBekI7QUFDQUMseUJBQWlCLENBQ2RFLFVBREhGLENBQ2MxQyxNQUFNLENBQUNLLGFBQVBMLENBQXFCLGNBQXJCQSxDQURkMEMsRUFFR0csTUFGSEgsQ0FFVSxTQUZWQSxFQUVxQixJQUZyQkEsRUFFMkIseUJBRjNCQSxFQUdHSSxZQUhISixDQUdnQjtBQUNkLDRCQUFrQjtBQURKLFNBSGhCQSxFQU1HSyxnQkFOSEwsQ0FNb0IsQ0FBQyxnQkFBRCxDQU5wQkE7QUFPQUMsd0JBQWdCLENBQ2JDLFVBREhELENBQ2MzQyxNQUFNLENBQUNLLGFBQVBMLENBQXFCLGtCQUFyQkEsQ0FEZDJDLEVBRUdFLE1BRkhGLENBRVUsU0FGVkEsRUFFcUIsSUFGckJBLEVBRTJCLENBRjNCQTtBQUdBLGVBQU9ILGFBQWEsQ0FDakJJLFVBRElKLENBQ094QyxNQURQd0MsRUFFSlEsTUFGSVIsQ0FFRyxNQUZIQSxFQUdKUyxRQUhJVCxDQUdLLEdBSExBLEVBSUpVLFlBSklWLENBSVMsQ0FBQ0UsaUJBQUQsRUFBb0JDLGdCQUFwQixDQUpUSCxDQUFQO0FBeEZGOztBQThGQSxVQUFNSix3QkFBd0IsR0FBRyxDQUFqQztBQUVBO0FBQ0E7QUFDQTs7QUFDQSxVQUFNZSxpQkFBaUIsR0FBSW5ELFNBQXJCbUQsaUJBQXFCbkQsT0FBRCxFQUFZO0FBQ3BDLFlBQU13QyxhQUFhLEdBQUdDLDREQUF0QjtBQUNBLFlBQU1DLGlCQUFpQixHQUFHRCw0REFBMUI7QUFDQSxZQUFNRSxnQkFBZ0IsR0FBR0YsNERBQXpCO0FBQ0FDLHlCQUFpQixDQUNkRSxVQURIRixDQUNjMUMsTUFBTSxDQUFDSyxhQUFQTCxDQUFxQixjQUFyQkEsQ0FEZDBDLEVBRUdHLE1BRkhILENBRVUsU0FGVkEsRUFFcUIseUJBRnJCQSxFQUVnRCxDQUZoREE7QUFHQUMsd0JBQWdCLENBQ2JDLFVBREhELENBQ2MzQyxNQUFNLENBQUNLLGFBQVBMLENBQXFCLGtCQUFyQkEsQ0FEZDJDLEVBRUdFLE1BRkhGLENBRVUsU0FGVkEsRUFFcUIsSUFGckJBLEVBRTJCLENBRjNCQTtBQUdBLGVBQU9ILGFBQWEsQ0FDakJJLFVBRElKLENBQ094QyxNQURQd0MsRUFFSlEsTUFGSVIsQ0FFRyxNQUZIQSxFQUdKUyxRQUhJVCxDQUdLLEdBSExBLEVBSUpVLFlBSklWLENBSVMsQ0FBQ0UsaUJBQUQsRUFBb0JDLGdCQUFwQixDQUpUSCxDQUFQO0FBVkY7QUFpQkE7QUFDQTtBQUNBOzs7QUFDQSxVQUFNWSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUNwRCxNQUFELEVBQVNDLEVBQVQsRUFBZ0I7QUFDdkMsWUFBTW9ELHVCQUF1QixHQUFHLEVBQWhDO0FBQ0EsWUFBTUMsR0FBRyxHQUFHdEQsTUFBTSxDQUFDYSxhQUFuQjtBQUNBLFlBQU0wQyxLQUFLLEdBQUdELEdBQUcsQ0FBQ0UsR0FBSkYsS0FBWSxLQUExQjtBQUNBLFlBQUlwRCxPQUFPLEdBQUcsS0FBZDtBQUNBLFlBQUlDLE9BQU8sR0FBR29ELEtBQUssR0FBRyxPQUFILEdBQWEsTUFBaEM7QUFDQSxZQUFNbkQsU0FBUyxHQUFHSixNQUFNLENBQUNLLGFBQVBMLENBQXFCLGtCQUFyQkEsQ0FBbEI7QUFDQSxZQUFNTSxpQkFBaUIsR0FBR0YsU0FBUyxDQUFDRyxxQkFBVkgsRUFBMUI7QUFDQSxZQUFNSSxZQUFZLEdBQUdGLGlCQUFpQixDQUFDRyxLQUF2QztBQUNBLFlBQU1DLGFBQWEsR0FBR0osaUJBQWlCLENBQUNLLE1BQXhDO0FBQ0EsWUFBTUMsU0FBUyxHQUFHMEMsR0FBRyxDQUFDeEMsV0FBSndDLENBQWdCdkMsVUFBbEM7QUFDQSxZQUFNQyxVQUFVLEdBQUdzQyxHQUFHLENBQUN4QyxXQUFKd0MsQ0FBZ0JyQyxXQUFuQyxDQVh1QyxDQVl2Qzs7QUFDQSxZQUFNQyxTQUFTLEdBQUdqQixFQUFFLElBQUlBLEVBQUUsQ0FBQ2tCLE1BQVRsQixJQUFtQkEsRUFBRSxDQUFDa0IsTUFBSGxCLENBQVVNLHFCQUFWTixFQUFyQyxDQWJ1QyxDQWN2Qzs7QUFDQSxZQUFNbUIsU0FBUyxHQUFHRixTQUFTLElBQUksSUFBYkEsSUFBcUIsWUFBWUEsU0FBakNBLEdBQ2RBLFNBQVMsQ0FBQ29CLE1BRElwQixHQUVkRixVQUFVLEdBQUcsQ0FBYkEsR0FBaUJOLGFBQWEsR0FBRyxDQUZyQztBQUdBLFlBQU1ZLFVBQVUsR0FBR0osU0FBUyxJQUFJLElBQWJBLElBQXFCLFVBQVVBLFNBQS9CQSxHQUNmcUMsS0FBSyxHQUNIckMsU0FBUyxDQUFDSyxJQUFWTCxHQUFpQlYsWUFBakJVLEdBQWdDQSxTQUFTLENBQUNULEtBRHZDLEdBRUhTLFNBQVMsQ0FBQ0ssSUFIR0wsR0FJZk4sU0FBUyxHQUFHLENBQVpBLEdBQWdCSixZQUFZLEdBQUcsQ0FKbkM7QUFLQSxZQUFNaUIsWUFBWSxHQUFJUCxTQUFTLElBQUlBLFNBQVMsQ0FBQ1AsTUFBdkJPLElBQWtDLENBQXhEO0FBQ0EsWUFBTWUsVUFBVSxHQUFHO0FBQ2pCWixhQUFHLEVBQUVELFNBRFk7QUFFakJHLGNBQUksRUFBRUQ7QUFGVyxTQUFuQixDQXhCdUMsQ0E0QnZDO0FBQ0E7QUFDQTs7QUFDQSxZQUFJVyxVQUFVLENBQUNWLElBQVhVLEdBQWtCb0IsdUJBQXRCLEVBQStDO0FBQzdDcEIsb0JBQVUsQ0FBQ1YsSUFBWFUsR0FBa0JvQix1QkFBbEJwQixDQUQ2QyxDQUU3QztBQUNBOztBQUNBOUIsaUJBQU8sR0FBRyxNQUFWQTtBQUpGLGVBTUssSUFBSUssWUFBWSxHQUFHNkMsdUJBQWY3QyxHQUF5Q3lCLFVBQVUsQ0FBQ1YsSUFBcERmLEdBQ1BJLFNBREcsRUFDUTtBQUNYcUIsb0JBQVUsQ0FBQ1YsSUFBWFUsR0FBa0JyQixTQUFTLEdBQUdKLFlBQVpJLEdBQTJCeUMsdUJBQTdDcEIsQ0FEVyxDQUVYO0FBQ0E7O0FBQ0E5QixpQkFBTyxHQUFHLE9BQVZBO0FBMUNxQyxVQTRDdkM7QUFDQTs7O0FBQ0EsWUFBSWlCLFNBQVMsR0FBR0ssWUFBWkwsR0FBMkJWLGFBQTNCVSxHQUEyQ0osVUFBM0NJLElBQ0ZBLFNBQVMsR0FBR1YsYUFBWlUsR0FBNEIsQ0FEOUIsRUFDaUM7QUFDL0JhLG9CQUFVLENBQUNaLEdBQVhZLEdBQWlCYixTQUFTLEdBQUdWLGFBQVpVLEdBQTRCSyxZQUE3Q1E7QUFDQWpDLGdCQUFNLENBQUNxQyxTQUFQckMsR0FBbUJBLE1BQU0sQ0FBQ3FDLFNBQVByQyxHQUFtQixpQkFBdENBO0FBQ0FFLGlCQUFPLEdBQUcsUUFBVkEsQ0FIK0IsQ0FJL0I7QUFMRixlQU9LLElBQUlrQixTQUFTLEdBQUdLLFlBQVpMLEdBQTJCVixhQUEzQlUsR0FBMkNKLFVBQS9DLEVBQTJEO0FBQzlEWixtQkFBUyxDQUFDMEIsS0FBVjFCLENBQWdCa0MsTUFBaEJsQyxHQUF5QmlELHVCQUF1QixHQUFHLElBQW5EakQ7QUFDRDs7QUFDRCxZQUFNb0MsYUFBYSxHQUFHQyw0REFBdEI7QUFDQSxZQUFNQyxpQkFBaUIsR0FBR0QsNERBQTFCO0FBQ0EsWUFBTUUsZ0JBQWdCLEdBQUdGLDREQUF6QjtBQUNBLFlBQU1nQixnQkFBZ0IsR0FBR2hCLDREQUF6QjtBQUNBLFlBQU1pQixpQkFBaUIsR0FBR2pCLDREQUExQjtBQUNBQyx5QkFBaUIsQ0FDZEUsVUFESEYsQ0FDYzFDLE1BQU0sQ0FBQ0ssYUFBUEwsQ0FBcUIsY0FBckJBLENBRGQwQyxFQUVHRyxNQUZISCxDQUVVLFNBRlZBLEVBRXFCLElBRnJCQSxFQUUyQix5QkFGM0JBLEVBR0dJLFlBSEhKLENBR2dCO0FBQ2QsNEJBQWtCO0FBREosU0FIaEJBLEVBTUdLLGdCQU5ITCxDQU1vQixDQUFDLGdCQUFELENBTnBCQTtBQU9BQyx3QkFBZ0IsQ0FDYkMsVUFESEQsQ0FDYzNDLE1BQU0sQ0FBQ0ssYUFBUEwsQ0FBcUIsa0JBQXJCQSxDQURkMkMsRUFFR0UsTUFGSEYsQ0FFVSxTQUZWQSxFQUVxQixJQUZyQkEsRUFFMkIsQ0FGM0JBO0FBR0FjLHdCQUFnQixDQUNiYixVQURIYSxDQUNjckQsU0FEZHFELEVBRUdYLFlBRkhXLENBRWdCO0FBQ2QsMkJBQVV4QixVQUFVLENBQUNaLEdBQXJCLE9BRGM7QUFFZCw0QkFBV1ksVUFBVSxDQUFDVixJQUF0QixPQUZjO0FBR2Qsd0NBQXVCckIsT0FBdkIsY0FBa0NDLE9BQWxDO0FBSGMsU0FGaEJzRCxFQU9HWixNQVBIWSxDQU9VLFdBUFZBLEVBT3VCLGNBUHZCQSxFQU91QyxVQVB2Q0E7QUFRQUMseUJBQWlCLENBQ2RkLFVBREhjLENBQ2MxRCxNQUFNLENBQUNLLGFBQVBMLENBQXFCLG1CQUFyQkEsQ0FEZDBELEVBRUdiLE1BRkhhLENBRVUsU0FGVkEsRUFFcUIsSUFGckJBLEVBRTJCLENBRjNCQTtBQUdBLGVBQU9sQixhQUFhLENBQ2pCSSxVQURJSixDQUNPeEMsTUFEUHdDLEVBRUpRLE1BRklSLENBRUcsZ0NBRkhBLEVBR0pTLFFBSElULENBR0ssR0FITEEsRUFJSlUsWUFKSVYsQ0FJUyxDQUFDRSxpQkFBRCxFQUFvQkMsZ0JBQXBCLEVBQXNDYyxnQkFBdEMsRUFBd0RDLGlCQUF4RCxDQUpUbEIsQ0FBUDtBQWxGRjtBQXlGQTtBQUNBO0FBQ0E7OztBQUNBLFVBQU1tQixnQkFBZ0IsR0FBSTNELFNBQXBCMkQsZ0JBQW9CM0QsT0FBRCxFQUFZO0FBQ25DLFlBQU13QyxhQUFhLEdBQUdDLDREQUF0QjtBQUNBLFlBQU1DLGlCQUFpQixHQUFHRCw0REFBMUI7QUFDQSxZQUFNRSxnQkFBZ0IsR0FBR0YsNERBQXpCO0FBQ0FDLHlCQUFpQixDQUNkRSxVQURIRixDQUNjMUMsTUFBTSxDQUFDSyxhQUFQTCxDQUFxQixjQUFyQkEsQ0FEZDBDLEVBRUdHLE1BRkhILENBRVUsU0FGVkEsRUFFcUIseUJBRnJCQSxFQUVnRCxDQUZoREE7QUFHQUMsd0JBQWdCLENBQ2JDLFVBREhELENBQ2MzQyxNQUFNLENBQUNLLGFBQVBMLENBQXFCLGtCQUFyQkEsQ0FEZDJDLEVBRUdFLE1BRkhGLENBRVUsU0FGVkEsRUFFcUIsSUFGckJBLEVBRTJCLENBRjNCQTtBQUdBLGVBQU9ILGFBQWEsQ0FDakJJLFVBRElKLENBQ094QyxNQURQd0MsRUFFSlEsTUFGSVIsQ0FFRyxNQUZIQSxFQUdKUyxRQUhJVCxDQUdLLEdBSExBLEVBSUpVLFlBSklWLENBSVMsQ0FBQ0UsaUJBQUQsRUFBb0JDLGdCQUFwQixDQUpUSCxDQUFQO0FBVkY7O0FBaUJBLFVBQU1vQixhQUFhLEdBQUcseXlFQUF0QjtBQUVBLFVBQU1DLFlBQVksR0FBRyxxcERBQXJCOztBQUVBLFVBQU1DLE9BQU87QUFDWEMseUJBQVlDLE9BQVpELEVBQXFCO0FBQUE7O0FBQUE7O0FBQ25CRSxpRUFBaUIsSUFBakJBLEVBQXVCRCxPQUF2QkM7QUFDQSxlQUFLQyxVQUFMLEdBQWtCQyx1REFBWSxJQUFaQSxFQUFrQixzQkFBbEJBLEVBQTBDLENBQTFDQSxDQUFsQjtBQUNBLGVBQUtDLFdBQUwsR0FBbUJELHVEQUFZLElBQVpBLEVBQWtCLHVCQUFsQkEsRUFBMkMsQ0FBM0NBLENBQW5CO0FBQ0EsZUFBS0UsV0FBTCxHQUFtQkYsdURBQVksSUFBWkEsRUFBa0IsdUJBQWxCQSxFQUEyQyxDQUEzQ0EsQ0FBbkI7QUFDQSxlQUFLRyxVQUFMLEdBQWtCSCx1REFBWSxJQUFaQSxFQUFrQixzQkFBbEJBLEVBQTBDLENBQTFDQSxDQUFsQjtBQUNBLGVBQUtJLFNBQUwsR0FBaUIsS0FBakI7QUFDQTtBQUNKO0FBQ0E7O0FBQ0ksZUFBS0MsYUFBTCxHQUFxQixJQUFyQjtBQUNBO0FBQ0o7QUFDQTs7QUFDSSxlQUFLQyxlQUFMLEdBQXVCLElBQXZCO0FBQ0E7QUFDSjtBQUNBOztBQUNJLGVBQUtDLFlBQUwsR0FBb0IsSUFBcEI7QUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUNJLGVBQUtDLFdBQUwsR0FBbUIsS0FBbkI7QUFDQTtBQUNKO0FBQ0E7O0FBQ0ksZUFBS0MsUUFBTCxHQUFnQixJQUFoQjs7QUFDQSxlQUFLQyxTQUFMLEdBQWtCNUUsWUFBRCxFQUFRO0FBQ3ZCQSxjQUFFLENBQUM2RSxlQUFIN0U7QUFDQUEsY0FBRSxDQUFDOEUsY0FBSDlFOztBQUNBLG1CQUFLK0UsT0FBTDtBQUhGOztBQUtBLGVBQUtDLGFBQUwsR0FBcUIsWUFBTTtBQUN6QixtQkFBS0QsT0FBTCxDQUFhRSxTQUFiLEVBQXdCQyxvREFBeEI7QUFERjs7QUFHQSxlQUFLQyxXQUFMLEdBQW9CQyxvQkFBRCxFQUFnQjtBQUNqQyxnQkFBTUMsRUFBRSxHQUFHLE9BQUtDLFlBQWhCO0FBQ0EsZ0JBQU1DLElBQUksR0FBR0MsYUFBYSxDQUFDSixVQUFVLENBQUNLLElBQVosQ0FBMUI7O0FBQ0EsZ0JBQUlKLEVBQUUsSUFBSUUsSUFBVixFQUFnQjtBQUNkLGtCQUFNRyxLQUFLLEdBQUcsSUFBSUMsV0FBSixDQUFnQkosSUFBaEIsRUFBc0I7QUFDbENLLHVCQUFPLEVBQUUsS0FEeUI7QUFFbENDLDBCQUFVLEVBQUUsS0FGc0I7QUFHbENDLHNCQUFNLEVBQUVWLFVBQVUsQ0FBQ1U7QUFIZSxlQUF0QixDQUFkO0FBS0FULGdCQUFFLENBQUNVLGFBQUhWLENBQWlCSyxLQUFqQkw7QUFDRDtBQVZIO0FBWUQ7O0FBbERVO0FBQUE7QUFBQSxpQkFtRFhXLDZCQUFvQjtBQUNsQkMsc0VBQWUsS0FBS1osRUFBcEJZO0FBQ0Q7QUFDRDtBQUNGO0FBQ0E7O0FBeERhO0FBQUE7QUFBQSxpQkF5RExDLG1CQUFVO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsMkJBQ1ZDLEtBQUksQ0FBQzdCLFNBREs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7QUFJUjhCLCtCQUpRLEdBSUlELEtBQUksQ0FBQ2QsRUFBTCxDQUFRakYsYUFBUixDQUFzQixrQkFBdEIsQ0FKSjs7QUFBQSwwQkFLVGdHLFNBTFM7QUFBQTtBQUFBO0FBQUE7O0FBQUEsNEJBTU4sSUFBSUMsS0FBSixDQUFVLHdCQUFWLENBTk07O0FBQUE7QUFRUkMsMEJBUlEsR0FRREMsTUFBTSxDQUFDQyxNQUFQRCxDQUFjQSxNQUFNLENBQUNDLE1BQVBELENBQWMsRUFBZEEsRUFBa0JKLEtBQUksQ0FBQ00sY0FBdkJGLENBQWRBLEVBQXNEO0FBQUVHLCtCQUFPLEVBQUVQLEtBQUksQ0FBQ2Q7QUFBaEIsdUJBQXREa0IsQ0FSQztBQUFBO0FBU2QsNkJBQTBCSSxvRUFBZ0JSLEtBQUksQ0FBQ1MsUUFBckJELEVBQStCUCxTQUEvQk8sRUFBMENSLEtBQUksQ0FBQ1UsU0FBL0NGLEVBQTBELENBQUMsa0JBQUQsRUFBcUJSLEtBQUksQ0FBQ2QsRUFBTCxDQUFRLE1BQVIsQ0FBckIsQ0FBMURzQixFQUFpR0wsSUFBakdLLENBQTFCOztBQVRjO0FBU2RSLDJCQUFJLENBQUNiLFlBVFM7QUFBQTtBQVVkLDZCQUFNd0IsdURBQVVYLEtBQUksQ0FBQ2IsWUFBZndCLENBQU47O0FBVmM7QUFBQSx1REFXUFosMERBQVFDLEtBQVJELEVBQWMsY0FBZEEsRUFBOEJwRyxpQkFBOUJvRyxFQUFpRC9DLGdCQUFqRCtDLEVBQW1FQyxLQUFJLENBQUNULEtBQXhFUSxDQVhPOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWWY7QUFDRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBM0VhO0FBQUE7QUFBQSxpQkE0RUxuQixpQkFBUXVCLElBQVJ2QixFQUFjZ0MsSUFBZGhDLEVBQW9CO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDTCw2QkFBU0EsMERBQVFpQyxNQUFSakMsRUFBY3VCLElBQWR2QixFQUFvQmdDLElBQXBCaEMsRUFBMEIsY0FBMUJBLEVBQTBDN0IsaUJBQTFDNkIsRUFBNkRyQixnQkFBN0RxQixFQUErRWlDLE1BQUksQ0FBQ3RCLEtBQXBGWCxDQUFUOztBQURLO0FBQ2xCa0MsbUNBRGtCOztBQUFBLDJCQUVwQkEsYUFGb0I7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFHdEIsNkJBQU1DLG9FQUFnQkYsTUFBSSxDQUFDSixRQUFyQk0sRUFBK0JGLE1BQUksQ0FBQzFCLFlBQXBDNEIsQ0FBTjs7QUFIc0I7QUFBQSx3REFLakJELGFBTGlCOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTXpCO0FBQ0Q7QUFDRjtBQUNBOztBQXJGYTtBQUFBO0FBQUEsaUJBc0ZYRSx3QkFBZTtBQUNiLG1CQUFPQywwREFBWSxLQUFLL0IsRUFBakIrQixFQUFxQixzQkFBckJBLENBQVA7QUFDRDtBQUNEO0FBQ0Y7QUFDQTs7QUEzRmE7QUFBQTtBQUFBLGlCQTRGWEMseUJBQWdCO0FBQ2QsbUJBQU9ELDBEQUFZLEtBQUsvQixFQUFqQitCLEVBQXFCLHVCQUFyQkEsQ0FBUDtBQUNEO0FBOUZVO0FBQUE7QUFBQSxpQkErRlhFLGtCQUFTO0FBQUE7O0FBQ1AsZ0JBQU1DLElBQUksR0FBR0MsOERBQVcsSUFBWEEsQ0FBYjtBQUNBLGdCQUFRckMsV0FBUixHQUF3QixJQUF4QixDQUFRQSxXQUFSO0FBQ0EsbUJBQVFzQyx1REFBRUMsaURBQUZELEVBQVE7QUFBRSw0QkFBYyxNQUFoQjtBQUF3QiwyQkFBYSxJQUFyQztBQUEyQ0Usc0JBQVEsRUFBRSxJQUFyRDtBQUEyRDlGLG1CQUFLLEVBQUU7QUFDOUUrRixzQkFBTSxZQUFLLFFBQVEsS0FBS0MsWUFBbEI7QUFEd0UsZUFBbEU7QUFFWEMsdUJBQU92QixNQUFNLENBQUNDLE1BQVBELENBQWNBLE1BQU0sQ0FBQ0MsTUFBUEQsQ0FBYyxFQUFkQSxFQUFrQndCLHVEQUFZLEtBQUtDLFFBQWpCRCxDQUFsQnhCLENBQWRBLHdEQUFnRWdCLElBQWhFaEIsRUFBdUUsSUFBdkVBLG1DQUE2RSxxQkFBN0VBLEVBQW9HLEtBQUs3QixXQUF6RzZCLG1CQUZJO0FBRXFIMEIsb0NBQXNCLEVBQUU5QyxXQUY3STtBQUUwSitDLHFDQUF1QixFQUFFL0MsV0FGbkw7QUFFZ01nRCxxQ0FBdUIsRUFBRWhELFdBRnpOO0FBRXNPaUQsb0NBQXNCLEVBQUVqRCxXQUY5UDtBQUUyUWtELDBCQUFZLEVBQUUsS0FBS3pELFNBRjlSO0FBRXlTMEQsOEJBQWdCLEVBQUUsS0FBS3REO0FBRmhVLGFBQVJ5QyxFQUV5VkEsdURBQUUsY0FBRkEsRUFBa0I7QUFBRWMsc0JBQVEsRUFBRSxLQUFLL0QsZUFBakI7QUFBa0NnRSxxQkFBTyxFQUFFLEtBQUsvRDtBQUFoRCxhQUFsQmdELENBRnpWQSxFQUU0YUEsdURBQUUsS0FBRkEsRUFBUztBQUFFRSxzQkFBUSxFQUFFO0FBQVosYUFBVEYsQ0FGNWFBLEVBRXljQSx1REFBRSxLQUFGQSxFQUFTO0FBQUVLLHVCQUFPO0FBQVQsYUFBVEwsRUFBMkRBLHVEQUFFLEtBQUZBLEVBQVM7QUFBRUssdUJBQU87QUFBVCxhQUFUTCxDQUEzREEsRUFBaUdBLHVEQUFFLEtBQUZBLEVBQVM7QUFBRUssdUJBQU87QUFBVCxhQUFUTCxDQUFqR0EsQ0FGemNBLEVBRW1sQkEsdURBQUUsS0FBRkEsRUFBUztBQUFFRSxzQkFBUSxFQUFFO0FBQVosYUFBVEYsQ0FGbmxCQSxDQUFSO0FBR0Q7QUFyR1U7QUFBQTtBQUFBLGVBc0dMLGVBQUc7QUFBRSxtQkFBT2dCLHVEQUFXLElBQVhBLENBQVA7QUFBMEI7QUF0RzFCOztBQUFBO0FBQUEsU0FBYjs7QUF3R0EsVUFBTWpELGFBQWEsR0FBRztBQUNwQixnQ0FBd0IsaUJBREo7QUFFcEIsaUNBQXlCLGtCQUZMO0FBR3BCLGlDQUF5QixrQkFITDtBQUlwQixnQ0FBd0I7QUFKSixPQUF0QjtBQU1BM0IsYUFBTyxDQUFDaEMsS0FBUmdDLEdBQWdCO0FBQ2Q2RSxXQUFHLEVBQUUvRSxhQURTO0FBRWRnRixVQUFFLEVBQUUvRTtBQUZVLE9BQWhCQzs7OyIsIm5hbWVzIjpbImlvc0VudGVyQW5pbWF0aW9uIiwiYmFzZUVsIiwiZXYiLCJvcmlnaW5ZIiwib3JpZ2luWCIsImNvbnRlbnRFbCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RGltZW50aW9ucyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNvbnRlbnRXaWR0aCIsIndpZHRoIiwiY29udGVudEhlaWdodCIsImhlaWdodCIsImJvZHlXaWR0aCIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImlubmVyV2lkdGgiLCJib2R5SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJ0YXJnZXREaW0iLCJ0YXJnZXQiLCJ0YXJnZXRUb3AiLCJ0b3AiLCJ0YXJnZXRMZWZ0IiwibGVmdCIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiYXJyb3dFbCIsImFycm93RGltIiwiYXJyb3dXaWR0aCIsImFycm93SGVpZ2h0Iiwic3R5bGUiLCJkaXNwbGF5IiwiYXJyb3dDU1MiLCJwb3BvdmVyQ1NTIiwiY2hlY2tTYWZlQXJlYUxlZnQiLCJjaGVja1NhZmVBcmVhUmlnaHQiLCJQT1BPVkVSX0lPU19CT0RZX1BBRERJTkciLCJjbGFzc05hbWUiLCJib3R0b20iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJiYXNlQW5pbWF0aW9uIiwiY3JlYXRlQW5pbWF0aW9uIiwiYmFja2Ryb3BBbmltYXRpb24iLCJ3cmFwcGVyQW5pbWF0aW9uIiwiYWRkRWxlbWVudCIsImZyb21UbyIsImJlZm9yZVN0eWxlcyIsImFmdGVyQ2xlYXJTdHlsZXMiLCJlYXNpbmciLCJkdXJhdGlvbiIsImFkZEFuaW1hdGlvbiIsImlvc0xlYXZlQW5pbWF0aW9uIiwibWRFbnRlckFuaW1hdGlvbiIsIlBPUE9WRVJfTURfQk9EWV9QQURESU5HIiwiZG9jIiwiaXNSVEwiLCJkaXIiLCJjb250ZW50QW5pbWF0aW9uIiwidmlld3BvcnRBbmltYXRpb24iLCJtZExlYXZlQW5pbWF0aW9uIiwicG9wb3Zlcklvc0NzcyIsInBvcG92ZXJNZENzcyIsIlBvcG92ZXIiLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJyZWdpc3Rlckluc3RhbmNlIiwiZGlkUHJlc2VudCIsImNyZWF0ZUV2ZW50Iiwid2lsbFByZXNlbnQiLCJ3aWxsRGlzbWlzcyIsImRpZERpc21pc3MiLCJwcmVzZW50ZWQiLCJrZXlib2FyZENsb3NlIiwiYmFja2Ryb3BEaXNtaXNzIiwic2hvd0JhY2tkcm9wIiwidHJhbnNsdWNlbnQiLCJhbmltYXRlZCIsIm9uRGlzbWlzcyIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZGlzbWlzcyIsIm9uQmFja2Ryb3BUYXAiLCJ1bmRlZmluZWQiLCJCQUNLRFJPUCIsIm9uTGlmZWN5Y2xlIiwibW9kYWxFdmVudCIsImVsIiwidXNlcnNFbGVtZW50IiwibmFtZSIsIkxJRkVDWUNMRV9NQVAiLCJ0eXBlIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsImNvbm5lY3RlZENhbGxiYWNrIiwicHJlcGFyZU92ZXJsYXkiLCJwcmVzZW50IiwiX3RoaXMiLCJjb250YWluZXIiLCJFcnJvciIsImRhdGEiLCJPYmplY3QiLCJhc3NpZ24iLCJjb21wb25lbnRQcm9wcyIsInBvcG92ZXIiLCJhdHRhY2hDb21wb25lbnQiLCJkZWxlZ2F0ZSIsImNvbXBvbmVudCIsImRlZXBSZWFkeSIsInJvbGUiLCJfdGhpczIiLCJzaG91bGREaXNtaXNzIiwiZGV0YWNoQ29tcG9uZW50Iiwib25EaWREaXNtaXNzIiwiZXZlbnRNZXRob2QiLCJvbldpbGxEaXNtaXNzIiwicmVuZGVyIiwibW9kZSIsImdldElvbk1vZGUiLCJoIiwiSG9zdCIsInRhYmluZGV4IiwiekluZGV4Iiwib3ZlcmxheUluZGV4IiwiY2xhc3MiLCJnZXRDbGFzc01hcCIsImNzc0NsYXNzIiwib25Jb25Qb3BvdmVyRGlkUHJlc2VudCIsIm9uSW9uUG9wb3ZlcldpbGxQcmVzZW50Iiwib25Jb25Qb3BvdmVyV2lsbERpc21pc3MiLCJvbklvblBvcG92ZXJEaWREaXNtaXNzIiwib25Jb25EaXNtaXNzIiwib25Jb25CYWNrZHJvcFRhcCIsInRhcHBhYmxlIiwidmlzaWJsZSIsImdldEVsZW1lbnQiLCJpb3MiLCJtZCJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi1wb3BvdmVyLmVudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgZSBhcyBjcmVhdGVFdmVudCwgaCwgSCBhcyBIb3N0LCBpIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LTdhOGI3YTFjLmpzJztcbmltcG9ydCB7IGIgYXMgZ2V0SW9uTW9kZSB9IGZyb20gJy4vaW9uaWMtZ2xvYmFsLTYzYTk3YTMyLmpzJztcbmltcG9ydCB7IGEgYXMgYXR0YWNoQ29tcG9uZW50LCBkIGFzIGRldGFjaENvbXBvbmVudCB9IGZyb20gJy4vZnJhbWV3b3JrLWRlbGVnYXRlLTQzOTJjZDYzLmpzJztcbmltcG9ydCB7IEIgYXMgQkFDS0RST1AsIGUgYXMgcHJlcGFyZU92ZXJsYXksIGQgYXMgcHJlc2VudCwgZiBhcyBkaXNtaXNzLCBnIGFzIGV2ZW50TWV0aG9kIH0gZnJvbSAnLi9vdmVybGF5cy1lOWNjZmYzMC5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldENsYXNzTWFwIH0gZnJvbSAnLi90aGVtZS1mZjNmYzUyZi5qcyc7XG5pbXBvcnQgeyBlIGFzIGRlZXBSZWFkeSB9IGZyb20gJy4vaW5kZXgtOTMxNDQwYjEuanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVBbmltYXRpb24gfSBmcm9tICcuL2FuaW1hdGlvbi0wOTZjNjM5MS5qcyc7XG5pbXBvcnQgJy4vaGVscGVycy1kZDdlNGI3Yi5qcyc7XG5pbXBvcnQgJy4vaGFyZHdhcmUtYmFjay1idXR0b24tNGE2YjM3ZmIuanMnO1xuXG4vKipcbiAqIGlPUyBQb3BvdmVyIEVudGVyIEFuaW1hdGlvblxuICovXG5jb25zdCBpb3NFbnRlckFuaW1hdGlvbiA9IChiYXNlRWwsIGV2KSA9PiB7XG4gIGxldCBvcmlnaW5ZID0gJ3RvcCc7XG4gIGxldCBvcmlnaW5YID0gJ2xlZnQnO1xuICBjb25zdCBjb250ZW50RWwgPSBiYXNlRWwucXVlcnlTZWxlY3RvcignLnBvcG92ZXItY29udGVudCcpO1xuICBjb25zdCBjb250ZW50RGltZW50aW9ucyA9IGNvbnRlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgY29udGVudFdpZHRoID0gY29udGVudERpbWVudGlvbnMud2lkdGg7XG4gIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSBjb250ZW50RGltZW50aW9ucy5oZWlnaHQ7XG4gIGNvbnN0IGJvZHlXaWR0aCA9IGJhc2VFbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmlubmVyV2lkdGg7XG4gIGNvbnN0IGJvZHlIZWlnaHQgPSBiYXNlRWwub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5pbm5lckhlaWdodDtcbiAgLy8gSWYgZXYgd2FzIHBhc3NlZCwgdXNlIHRoYXQgZm9yIHRhcmdldCBlbGVtZW50XG4gIGNvbnN0IHRhcmdldERpbSA9IGV2ICYmIGV2LnRhcmdldCAmJiBldi50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHRhcmdldFRvcCA9IHRhcmdldERpbSAhPSBudWxsICYmICd0b3AnIGluIHRhcmdldERpbSA/IHRhcmdldERpbS50b3AgOiBib2R5SGVpZ2h0IC8gMiAtIGNvbnRlbnRIZWlnaHQgLyAyO1xuICBjb25zdCB0YXJnZXRMZWZ0ID0gdGFyZ2V0RGltICE9IG51bGwgJiYgJ2xlZnQnIGluIHRhcmdldERpbSA/IHRhcmdldERpbS5sZWZ0IDogYm9keVdpZHRoIC8gMjtcbiAgY29uc3QgdGFyZ2V0V2lkdGggPSAodGFyZ2V0RGltICYmIHRhcmdldERpbS53aWR0aCkgfHwgMDtcbiAgY29uc3QgdGFyZ2V0SGVpZ2h0ID0gKHRhcmdldERpbSAmJiB0YXJnZXREaW0uaGVpZ2h0KSB8fCAwO1xuICBjb25zdCBhcnJvd0VsID0gYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLWFycm93Jyk7XG4gIGNvbnN0IGFycm93RGltID0gYXJyb3dFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgYXJyb3dXaWR0aCA9IGFycm93RGltLndpZHRoO1xuICBjb25zdCBhcnJvd0hlaWdodCA9IGFycm93RGltLmhlaWdodDtcbiAgaWYgKHRhcmdldERpbSA9PSBudWxsKSB7XG4gICAgYXJyb3dFbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG4gIGNvbnN0IGFycm93Q1NTID0ge1xuICAgIHRvcDogdGFyZ2V0VG9wICsgdGFyZ2V0SGVpZ2h0LFxuICAgIGxlZnQ6IHRhcmdldExlZnQgKyB0YXJnZXRXaWR0aCAvIDIgLSBhcnJvd1dpZHRoIC8gMlxuICB9O1xuICBjb25zdCBwb3BvdmVyQ1NTID0ge1xuICAgIHRvcDogdGFyZ2V0VG9wICsgdGFyZ2V0SGVpZ2h0ICsgKGFycm93SGVpZ2h0IC0gMSksXG4gICAgbGVmdDogdGFyZ2V0TGVmdCArIHRhcmdldFdpZHRoIC8gMiAtIGNvbnRlbnRXaWR0aCAvIDJcbiAgfTtcbiAgLy8gSWYgdGhlIHBvcG92ZXIgbGVmdCBpcyBsZXNzIHRoYW4gdGhlIHBhZGRpbmcgaXQgaXMgb2ZmIHNjcmVlblxuICAvLyB0byB0aGUgbGVmdCBzbyBhZGp1c3QgaXQsIGVsc2UgaWYgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyXG4gIC8vIGV4Y2VlZHMgdGhlIGJvZHkgd2lkdGggaXQgaXMgb2ZmIHNjcmVlbiB0byB0aGUgcmlnaHQgc28gYWRqdXN0XG4gIC8vXG4gIGxldCBjaGVja1NhZmVBcmVhTGVmdCA9IGZhbHNlO1xuICBsZXQgY2hlY2tTYWZlQXJlYVJpZ2h0ID0gZmFsc2U7XG4gIC8vIElmIHRoZSBwb3BvdmVyIGxlZnQgaXMgbGVzcyB0aGFuIHRoZSBwYWRkaW5nIGl0IGlzIG9mZiBzY3JlZW5cbiAgLy8gdG8gdGhlIGxlZnQgc28gYWRqdXN0IGl0LCBlbHNlIGlmIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlclxuICAvLyBleGNlZWRzIHRoZSBib2R5IHdpZHRoIGl0IGlzIG9mZiBzY3JlZW4gdG8gdGhlIHJpZ2h0IHNvIGFkanVzdFxuICAvLyAyNSBpcyBhIHJhbmRvbS9hcmJpdHJhcnkgbnVtYmVyLiBJdCBzZWVtcyB0byB3b3JrIGZpbmUgZm9yIGlvczExXG4gIC8vIGFuZCBpUGhvbmVYLiBJcyBpdCBwZXJmZWN0PyBOby4gRG9lcyBpdCB3b3JrPyBZZXMuXG4gIGlmIChwb3BvdmVyQ1NTLmxlZnQgPCBQT1BPVkVSX0lPU19CT0RZX1BBRERJTkcgKyAyNSkge1xuICAgIGNoZWNrU2FmZUFyZWFMZWZ0ID0gdHJ1ZTtcbiAgICBwb3BvdmVyQ1NTLmxlZnQgPSBQT1BPVkVSX0lPU19CT0RZX1BBRERJTkc7XG4gIH1cbiAgZWxzZSBpZiAoY29udGVudFdpZHRoICsgUE9QT1ZFUl9JT1NfQk9EWV9QQURESU5HICsgcG9wb3ZlckNTUy5sZWZ0ICsgMjUgPiBib2R5V2lkdGgpIHtcbiAgICAvLyBPaywgc28gd2UncmUgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHNjcmVlbixcbiAgICAvLyBidXQgbm93IHdlIG5lZWQgdG8gbWFrZSBzdXJlIHdlJ3JlIHN0aWxsIGEgYml0IGZ1cnRoZXIgcmlnaHRcbiAgICAvLyBjdXMuLi4ubm90Y2h1cmFsbHkuLi4gQWdhaW4sIDI1IGlzIHJhbmRvbS4gSXQgd29ya3MgdGhvXG4gICAgY2hlY2tTYWZlQXJlYVJpZ2h0ID0gdHJ1ZTtcbiAgICBwb3BvdmVyQ1NTLmxlZnQgPSBib2R5V2lkdGggLSBjb250ZW50V2lkdGggLSBQT1BPVkVSX0lPU19CT0RZX1BBRERJTkc7XG4gICAgb3JpZ2luWCA9ICdyaWdodCc7XG4gIH1cbiAgLy8gbWFrZSBpdCBwb3AgdXAgaWYgdGhlcmUncyByb29tIGFib3ZlXG4gIGlmICh0YXJnZXRUb3AgKyB0YXJnZXRIZWlnaHQgKyBjb250ZW50SGVpZ2h0ID4gYm9keUhlaWdodCAmJiB0YXJnZXRUb3AgLSBjb250ZW50SGVpZ2h0ID4gMCkge1xuICAgIGFycm93Q1NTLnRvcCA9IHRhcmdldFRvcCAtIChhcnJvd0hlaWdodCArIDEpO1xuICAgIHBvcG92ZXJDU1MudG9wID0gdGFyZ2V0VG9wIC0gY29udGVudEhlaWdodCAtIChhcnJvd0hlaWdodCAtIDEpO1xuICAgIGJhc2VFbC5jbGFzc05hbWUgPSBiYXNlRWwuY2xhc3NOYW1lICsgJyBwb3BvdmVyLWJvdHRvbSc7XG4gICAgb3JpZ2luWSA9ICdib3R0b20nO1xuICAgIC8vIElmIHRoZXJlIGlzbid0IHJvb20gZm9yIGl0IHRvIHBvcCB1cCBhYm92ZSB0aGUgdGFyZ2V0IGN1dCBpdCBvZmZcbiAgfVxuICBlbHNlIGlmICh0YXJnZXRUb3AgKyB0YXJnZXRIZWlnaHQgKyBjb250ZW50SGVpZ2h0ID4gYm9keUhlaWdodCkge1xuICAgIGNvbnRlbnRFbC5zdHlsZS5ib3R0b20gPSBQT1BPVkVSX0lPU19CT0RZX1BBRERJTkcgKyAnJSc7XG4gIH1cbiAgYXJyb3dFbC5zdHlsZS50b3AgPSBhcnJvd0NTUy50b3AgKyAncHgnO1xuICBhcnJvd0VsLnN0eWxlLmxlZnQgPSBhcnJvd0NTUy5sZWZ0ICsgJ3B4JztcbiAgY29udGVudEVsLnN0eWxlLnRvcCA9IHBvcG92ZXJDU1MudG9wICsgJ3B4JztcbiAgY29udGVudEVsLnN0eWxlLmxlZnQgPSBwb3BvdmVyQ1NTLmxlZnQgKyAncHgnO1xuICBpZiAoY2hlY2tTYWZlQXJlYUxlZnQpIHtcbiAgICBjb250ZW50RWwuc3R5bGUubGVmdCA9IGBjYWxjKCR7cG9wb3ZlckNTUy5sZWZ0fXB4ICsgdmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0LCAwcHgpKWA7XG4gIH1cbiAgaWYgKGNoZWNrU2FmZUFyZWFSaWdodCkge1xuICAgIGNvbnRlbnRFbC5zdHlsZS5sZWZ0ID0gYGNhbGMoJHtwb3BvdmVyQ1NTLmxlZnR9cHggLSB2YXIoLS1pb24tc2FmZS1hcmVhLXJpZ2h0LCAwcHgpKWA7XG4gIH1cbiAgY29udGVudEVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpblkgKyAnICcgKyBvcmlnaW5YO1xuICBjb25zdCBiYXNlQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IGJhY2tkcm9wQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IHdyYXBwZXJBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgYmFja2Ryb3BBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChiYXNlRWwucXVlcnlTZWxlY3RvcignaW9uLWJhY2tkcm9wJykpXG4gICAgLmZyb21Ubygnb3BhY2l0eScsIDAuMDEsICd2YXIoLS1iYWNrZHJvcC1vcGFjaXR5KScpXG4gICAgLmJlZm9yZVN0eWxlcyh7XG4gICAgJ3BvaW50ZXItZXZlbnRzJzogJ25vbmUnXG4gIH0pXG4gICAgLmFmdGVyQ2xlYXJTdHlsZXMoWydwb2ludGVyLWV2ZW50cyddKTtcbiAgd3JhcHBlckFuaW1hdGlvblxuICAgIC5hZGRFbGVtZW50KGJhc2VFbC5xdWVyeVNlbGVjdG9yKCcucG9wb3Zlci13cmFwcGVyJykpXG4gICAgLmZyb21Ubygnb3BhY2l0eScsIDAuMDEsIDEpO1xuICByZXR1cm4gYmFzZUFuaW1hdGlvblxuICAgIC5hZGRFbGVtZW50KGJhc2VFbClcbiAgICAuZWFzaW5nKCdlYXNlJylcbiAgICAuZHVyYXRpb24oMTAwKVxuICAgIC5hZGRBbmltYXRpb24oW2JhY2tkcm9wQW5pbWF0aW9uLCB3cmFwcGVyQW5pbWF0aW9uXSk7XG59O1xuY29uc3QgUE9QT1ZFUl9JT1NfQk9EWV9QQURESU5HID0gNTtcblxuLyoqXG4gKiBpT1MgUG9wb3ZlciBMZWF2ZSBBbmltYXRpb25cbiAqL1xuY29uc3QgaW9zTGVhdmVBbmltYXRpb24gPSAoYmFzZUVsKSA9PiB7XG4gIGNvbnN0IGJhc2VBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgY29uc3QgYmFja2Ryb3BBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgY29uc3Qgd3JhcHBlckFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBiYWNrZHJvcEFuaW1hdGlvblxuICAgIC5hZGRFbGVtZW50KGJhc2VFbC5xdWVyeVNlbGVjdG9yKCdpb24tYmFja2Ryb3AnKSlcbiAgICAuZnJvbVRvKCdvcGFjaXR5JywgJ3ZhcigtLWJhY2tkcm9wLW9wYWNpdHkpJywgMCk7XG4gIHdyYXBwZXJBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChiYXNlRWwucXVlcnlTZWxlY3RvcignLnBvcG92ZXItd3JhcHBlcicpKVxuICAgIC5mcm9tVG8oJ29wYWNpdHknLCAwLjk5LCAwKTtcbiAgcmV0dXJuIGJhc2VBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChiYXNlRWwpXG4gICAgLmVhc2luZygnZWFzZScpXG4gICAgLmR1cmF0aW9uKDUwMClcbiAgICAuYWRkQW5pbWF0aW9uKFtiYWNrZHJvcEFuaW1hdGlvbiwgd3JhcHBlckFuaW1hdGlvbl0pO1xufTtcblxuLyoqXG4gKiBNZCBQb3BvdmVyIEVudGVyIEFuaW1hdGlvblxuICovXG5jb25zdCBtZEVudGVyQW5pbWF0aW9uID0gKGJhc2VFbCwgZXYpID0+IHtcbiAgY29uc3QgUE9QT1ZFUl9NRF9CT0RZX1BBRERJTkcgPSAxMjtcbiAgY29uc3QgZG9jID0gYmFzZUVsLm93bmVyRG9jdW1lbnQ7XG4gIGNvbnN0IGlzUlRMID0gZG9jLmRpciA9PT0gJ3J0bCc7XG4gIGxldCBvcmlnaW5ZID0gJ3RvcCc7XG4gIGxldCBvcmlnaW5YID0gaXNSVEwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICBjb25zdCBjb250ZW50RWwgPSBiYXNlRWwucXVlcnlTZWxlY3RvcignLnBvcG92ZXItY29udGVudCcpO1xuICBjb25zdCBjb250ZW50RGltZW50aW9ucyA9IGNvbnRlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgY29udGVudFdpZHRoID0gY29udGVudERpbWVudGlvbnMud2lkdGg7XG4gIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSBjb250ZW50RGltZW50aW9ucy5oZWlnaHQ7XG4gIGNvbnN0IGJvZHlXaWR0aCA9IGRvYy5kZWZhdWx0Vmlldy5pbm5lcldpZHRoO1xuICBjb25zdCBib2R5SGVpZ2h0ID0gZG9jLmRlZmF1bHRWaWV3LmlubmVySGVpZ2h0O1xuICAvLyBJZiBldiB3YXMgcGFzc2VkLCB1c2UgdGhhdCBmb3IgdGFyZ2V0IGVsZW1lbnRcbiAgY29uc3QgdGFyZ2V0RGltID0gZXYgJiYgZXYudGFyZ2V0ICYmIGV2LnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgLy8gQXMgcGVyIE1EIHNwZWMsIGJ5IGRlZmF1bHQgcG9zaXRpb24gdGhlIHBvcG92ZXIgYmVsb3cgdGhlIHRhcmdldCAodHJpZ2dlcikgZWxlbWVudFxuICBjb25zdCB0YXJnZXRUb3AgPSB0YXJnZXREaW0gIT0gbnVsbCAmJiAnYm90dG9tJyBpbiB0YXJnZXREaW1cbiAgICA/IHRhcmdldERpbS5ib3R0b21cbiAgICA6IGJvZHlIZWlnaHQgLyAyIC0gY29udGVudEhlaWdodCAvIDI7XG4gIGNvbnN0IHRhcmdldExlZnQgPSB0YXJnZXREaW0gIT0gbnVsbCAmJiAnbGVmdCcgaW4gdGFyZ2V0RGltXG4gICAgPyBpc1JUTFxuICAgICAgPyB0YXJnZXREaW0ubGVmdCAtIGNvbnRlbnRXaWR0aCArIHRhcmdldERpbS53aWR0aFxuICAgICAgOiB0YXJnZXREaW0ubGVmdFxuICAgIDogYm9keVdpZHRoIC8gMiAtIGNvbnRlbnRXaWR0aCAvIDI7XG4gIGNvbnN0IHRhcmdldEhlaWdodCA9ICh0YXJnZXREaW0gJiYgdGFyZ2V0RGltLmhlaWdodCkgfHwgMDtcbiAgY29uc3QgcG9wb3ZlckNTUyA9IHtcbiAgICB0b3A6IHRhcmdldFRvcCxcbiAgICBsZWZ0OiB0YXJnZXRMZWZ0XG4gIH07XG4gIC8vIElmIHRoZSBwb3BvdmVyIGxlZnQgaXMgbGVzcyB0aGFuIHRoZSBwYWRkaW5nIGl0IGlzIG9mZiBzY3JlZW5cbiAgLy8gdG8gdGhlIGxlZnQgc28gYWRqdXN0IGl0LCBlbHNlIGlmIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlclxuICAvLyBleGNlZWRzIHRoZSBib2R5IHdpZHRoIGl0IGlzIG9mZiBzY3JlZW4gdG8gdGhlIHJpZ2h0IHNvIGFkanVzdFxuICBpZiAocG9wb3ZlckNTUy5sZWZ0IDwgUE9QT1ZFUl9NRF9CT0RZX1BBRERJTkcpIHtcbiAgICBwb3BvdmVyQ1NTLmxlZnQgPSBQT1BPVkVSX01EX0JPRFlfUEFERElORztcbiAgICAvLyBTYW1lIG9yaWdpbiBpbiB0aGlzIGNhc2UgZm9yIGJvdGggTFRSICYgUlRMXG4gICAgLy8gTm90ZTogaW4gTFRSLCBvcmlnaW5YIGlzIGFscmVhZHkgJ2xlZnQnXG4gICAgb3JpZ2luWCA9ICdsZWZ0JztcbiAgfVxuICBlbHNlIGlmIChjb250ZW50V2lkdGggKyBQT1BPVkVSX01EX0JPRFlfUEFERElORyArIHBvcG92ZXJDU1MubGVmdCA+XG4gICAgYm9keVdpZHRoKSB7XG4gICAgcG9wb3ZlckNTUy5sZWZ0ID0gYm9keVdpZHRoIC0gY29udGVudFdpZHRoIC0gUE9QT1ZFUl9NRF9CT0RZX1BBRERJTkc7XG4gICAgLy8gU2FtZSBvcmlnaW4gaW4gdGhpcyBjYXNlIGZvciBib3RoIExUUiAmIFJUTFxuICAgIC8vIE5vdGU6IGluIFJUTCwgb3JpZ2luWCBpcyBhbHJlYWR5ICdyaWdodCdcbiAgICBvcmlnaW5YID0gJ3JpZ2h0JztcbiAgfVxuICAvLyBJZiB0aGUgcG9wb3ZlciB3aGVuIHBvcHBlZCBkb3duIHN0cmV0Y2hlcyBwYXN0IGJvdHRvbSBvZiBzY3JlZW4sXG4gIC8vIG1ha2UgaXQgcG9wIHVwIGlmIHRoZXJlJ3Mgcm9vbSBhYm92ZVxuICBpZiAodGFyZ2V0VG9wICsgdGFyZ2V0SGVpZ2h0ICsgY29udGVudEhlaWdodCA+IGJvZHlIZWlnaHQgJiZcbiAgICB0YXJnZXRUb3AgLSBjb250ZW50SGVpZ2h0ID4gMCkge1xuICAgIHBvcG92ZXJDU1MudG9wID0gdGFyZ2V0VG9wIC0gY29udGVudEhlaWdodCAtIHRhcmdldEhlaWdodDtcbiAgICBiYXNlRWwuY2xhc3NOYW1lID0gYmFzZUVsLmNsYXNzTmFtZSArICcgcG9wb3Zlci1ib3R0b20nO1xuICAgIG9yaWdpblkgPSAnYm90dG9tJztcbiAgICAvLyBJZiB0aGVyZSBpc24ndCByb29tIGZvciBpdCB0byBwb3AgdXAgYWJvdmUgdGhlIHRhcmdldCBjdXQgaXQgb2ZmXG4gIH1cbiAgZWxzZSBpZiAodGFyZ2V0VG9wICsgdGFyZ2V0SGVpZ2h0ICsgY29udGVudEhlaWdodCA+IGJvZHlIZWlnaHQpIHtcbiAgICBjb250ZW50RWwuc3R5bGUuYm90dG9tID0gUE9QT1ZFUl9NRF9CT0RZX1BBRERJTkcgKyAncHgnO1xuICB9XG4gIGNvbnN0IGJhc2VBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgY29uc3QgYmFja2Ryb3BBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgY29uc3Qgd3JhcHBlckFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCBjb250ZW50QW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IHZpZXdwb3J0QW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGJhY2tkcm9wQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKVxuICAgIC5mcm9tVG8oJ29wYWNpdHknLCAwLjAxLCAndmFyKC0tYmFja2Ryb3Atb3BhY2l0eSknKVxuICAgIC5iZWZvcmVTdHlsZXMoe1xuICAgICdwb2ludGVyLWV2ZW50cyc6ICdub25lJ1xuICB9KVxuICAgIC5hZnRlckNsZWFyU3R5bGVzKFsncG9pbnRlci1ldmVudHMnXSk7XG4gIHdyYXBwZXJBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChiYXNlRWwucXVlcnlTZWxlY3RvcignLnBvcG92ZXItd3JhcHBlcicpKVxuICAgIC5mcm9tVG8oJ29wYWNpdHknLCAwLjAxLCAxKTtcbiAgY29udGVudEFuaW1hdGlvblxuICAgIC5hZGRFbGVtZW50KGNvbnRlbnRFbClcbiAgICAuYmVmb3JlU3R5bGVzKHtcbiAgICAndG9wJzogYCR7cG9wb3ZlckNTUy50b3B9cHhgLFxuICAgICdsZWZ0JzogYCR7cG9wb3ZlckNTUy5sZWZ0fXB4YCxcbiAgICAndHJhbnNmb3JtLW9yaWdpbic6IGAke29yaWdpbll9ICR7b3JpZ2luWH1gXG4gIH0pXG4gICAgLmZyb21UbygndHJhbnNmb3JtJywgJ3NjYWxlKDAuMDAxKScsICdzY2FsZSgxKScpO1xuICB2aWV3cG9ydEFuaW1hdGlvblxuICAgIC5hZGRFbGVtZW50KGJhc2VFbC5xdWVyeVNlbGVjdG9yKCcucG9wb3Zlci12aWV3cG9ydCcpKVxuICAgIC5mcm9tVG8oJ29wYWNpdHknLCAwLjAxLCAxKTtcbiAgcmV0dXJuIGJhc2VBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChiYXNlRWwpXG4gICAgLmVhc2luZygnY3ViaWMtYmV6aWVyKDAuMzYsMC42NiwwLjA0LDEpJylcbiAgICAuZHVyYXRpb24oMzAwKVxuICAgIC5hZGRBbmltYXRpb24oW2JhY2tkcm9wQW5pbWF0aW9uLCB3cmFwcGVyQW5pbWF0aW9uLCBjb250ZW50QW5pbWF0aW9uLCB2aWV3cG9ydEFuaW1hdGlvbl0pO1xufTtcblxuLyoqXG4gKiBNZCBQb3BvdmVyIExlYXZlIEFuaW1hdGlvblxuICovXG5jb25zdCBtZExlYXZlQW5pbWF0aW9uID0gKGJhc2VFbCkgPT4ge1xuICBjb25zdCBiYXNlQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IGJhY2tkcm9wQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IHdyYXBwZXJBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgYmFja2Ryb3BBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChiYXNlRWwucXVlcnlTZWxlY3RvcignaW9uLWJhY2tkcm9wJykpXG4gICAgLmZyb21Ubygnb3BhY2l0eScsICd2YXIoLS1iYWNrZHJvcC1vcGFjaXR5KScsIDApO1xuICB3cmFwcGVyQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsLnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLXdyYXBwZXInKSlcbiAgICAuZnJvbVRvKCdvcGFjaXR5JywgMC45OSwgMCk7XG4gIHJldHVybiBiYXNlQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsKVxuICAgIC5lYXNpbmcoJ2Vhc2UnKVxuICAgIC5kdXJhdGlvbig1MDApXG4gICAgLmFkZEFuaW1hdGlvbihbYmFja2Ryb3BBbmltYXRpb24sIHdyYXBwZXJBbmltYXRpb25dKTtcbn07XG5cbmNvbnN0IHBvcG92ZXJJb3NDc3MgPSBcIi5zYy1pb24tcG9wb3Zlci1pb3MtaHstLWJhY2tncm91bmQ6dmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpOy0tbWluLXdpZHRoOjA7LS1taW4taGVpZ2h0OjA7LS1tYXgtd2lkdGg6YXV0bzstLWhlaWdodDphdXRvO2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmZpeGVkOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtvdXRsaW5lOm5vbmU7Y29sb3I6dmFyKC0taW9uLXRleHQtY29sb3IsICMwMDApO3otaW5kZXg6MTAwMX0ub3ZlcmxheS1oaWRkZW4uc2MtaW9uLXBvcG92ZXItaW9zLWh7ZGlzcGxheTpub25lfS5wb3BvdmVyLXdyYXBwZXIuc2MtaW9uLXBvcG92ZXItaW9ze29wYWNpdHk6MDt6LWluZGV4OjEwfS5wb3BvdmVyLWNvbnRlbnQuc2MtaW9uLXBvcG92ZXItaW9ze2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmFic29sdXRlOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKTttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoKTtoZWlnaHQ6dmFyKC0taGVpZ2h0KTttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTstd2Via2l0LWJveC1zaGFkb3c6dmFyKC0tYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1ib3gtc2hhZG93KTtvdmVyZmxvdzphdXRvO3otaW5kZXg6MTB9LnBvcG92ZXItdmlld3BvcnQuc2MtaW9uLXBvcG92ZXItaW9zey0taW9uLXNhZmUtYXJlYS10b3A6MHB4Oy0taW9uLXNhZmUtYXJlYS1yaWdodDowcHg7LS1pb24tc2FmZS1hcmVhLWJvdHRvbTowcHg7LS1pb24tc2FmZS1hcmVhLWxlZnQ6MHB4fS5zYy1pb24tcG9wb3Zlci1pb3MtaHstLXdpZHRoOjIwMHB4Oy0tbWF4LWhlaWdodDo5MCU7LS1ib3gtc2hhZG93Om5vbmU7LS1iYWNrZHJvcC1vcGFjaXR5OnZhcigtLWlvbi1iYWNrZHJvcC1vcGFjaXR5LCAwLjA4KX0ucG9wb3Zlci1jb250ZW50LnNjLWlvbi1wb3BvdmVyLWlvc3tib3JkZXItcmFkaXVzOjEwcHh9LnBvcG92ZXItYXJyb3cuc2MtaW9uLXBvcG92ZXItaW9ze2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MjBweDtoZWlnaHQ6MTBweDtvdmVyZmxvdzpoaWRkZW59LnBvcG92ZXItYXJyb3cuc2MtaW9uLXBvcG92ZXItaW9zOjphZnRlcntsZWZ0OjNweDt0b3A6M3B4O2JvcmRlci1yYWRpdXM6M3B4O3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjE0cHg7aGVpZ2h0OjE0cHg7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2NvbnRlbnQ6XFxcIlxcXCI7ei1pbmRleDoxMH1bZGlyPXJ0bF0uc2MtaW9uLXBvcG92ZXItaW9zIC5wb3BvdmVyLWFycm93LnNjLWlvbi1wb3BvdmVyLWlvczo6YWZ0ZXIsW2Rpcj1ydGxdLnNjLWlvbi1wb3BvdmVyLWlvcy1oIC5wb3BvdmVyLWFycm93LnNjLWlvbi1wb3BvdmVyLWlvczo6YWZ0ZXIsW2Rpcj1ydGxdIC5zYy1pb24tcG9wb3Zlci1pb3MtaCAucG9wb3Zlci1hcnJvdy5zYy1pb24tcG9wb3Zlci1pb3M6OmFmdGVye2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6M3B4fS5wb3BvdmVyLWJvdHRvbS5zYy1pb24tcG9wb3Zlci1pb3MtaCAucG9wb3Zlci1hcnJvdy5zYy1pb24tcG9wb3Zlci1pb3N7dG9wOmF1dG87Ym90dG9tOi0xMHB4fS5wb3BvdmVyLWJvdHRvbS5zYy1pb24tcG9wb3Zlci1pb3MtaCAucG9wb3Zlci1hcnJvdy5zYy1pb24tcG9wb3Zlci1pb3M6OmFmdGVye3RvcDotNnB4fUBzdXBwb3J0cyAoKC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDApKSBvciAoYmFja2Ryb3AtZmlsdGVyOiBibHVyKDApKSl7LnBvcG92ZXItdHJhbnNsdWNlbnQuc2MtaW9uLXBvcG92ZXItaW9zLWggLnBvcG92ZXItY29udGVudC5zYy1pb24tcG9wb3Zlci1pb3MsLnBvcG92ZXItdHJhbnNsdWNlbnQuc2MtaW9uLXBvcG92ZXItaW9zLWggLnBvcG92ZXItYXJyb3cuc2MtaW9uLXBvcG92ZXItaW9zOjphZnRlcntiYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLWJhY2tncm91bmQtY29sb3ItcmdiLCAyNTUsIDI1NSwgMjU1KSwgMC44KTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpzYXR1cmF0ZSgxODAlKSBibHVyKDIwcHgpO2JhY2tkcm9wLWZpbHRlcjpzYXR1cmF0ZSgxODAlKSBibHVyKDIwcHgpfX1cIjtcblxuY29uc3QgcG9wb3Zlck1kQ3NzID0gXCIuc2MtaW9uLXBvcG92ZXItbWQtaHstLWJhY2tncm91bmQ6dmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpOy0tbWluLXdpZHRoOjA7LS1taW4taGVpZ2h0OjA7LS1tYXgtd2lkdGg6YXV0bzstLWhlaWdodDphdXRvO2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmZpeGVkOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtvdXRsaW5lOm5vbmU7Y29sb3I6dmFyKC0taW9uLXRleHQtY29sb3IsICMwMDApO3otaW5kZXg6MTAwMX0ub3ZlcmxheS1oaWRkZW4uc2MtaW9uLXBvcG92ZXItbWQtaHtkaXNwbGF5Om5vbmV9LnBvcG92ZXItd3JhcHBlci5zYy1pb24tcG9wb3Zlci1tZHtvcGFjaXR5OjA7ei1pbmRleDoxMH0ucG9wb3Zlci1jb250ZW50LnNjLWlvbi1wb3BvdmVyLW1ke2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmFic29sdXRlOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKTttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoKTtoZWlnaHQ6dmFyKC0taGVpZ2h0KTttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTstd2Via2l0LWJveC1zaGFkb3c6dmFyKC0tYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1ib3gtc2hhZG93KTtvdmVyZmxvdzphdXRvO3otaW5kZXg6MTB9LnBvcG92ZXItdmlld3BvcnQuc2MtaW9uLXBvcG92ZXItbWR7LS1pb24tc2FmZS1hcmVhLXRvcDowcHg7LS1pb24tc2FmZS1hcmVhLXJpZ2h0OjBweDstLWlvbi1zYWZlLWFyZWEtYm90dG9tOjBweDstLWlvbi1zYWZlLWFyZWEtbGVmdDowcHh9LnNjLWlvbi1wb3BvdmVyLW1kLWh7LS13aWR0aDoyNTBweDstLW1heC1oZWlnaHQ6OTAlOy0tYm94LXNoYWRvdzowIDVweCA1cHggLTNweCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgOHB4IDEwcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDAgM3B4IDE0cHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xMik7LS1iYWNrZHJvcC1vcGFjaXR5OnZhcigtLWlvbi1iYWNrZHJvcC1vcGFjaXR5LCAwLjMyKX0ucG9wb3Zlci1jb250ZW50LnNjLWlvbi1wb3BvdmVyLW1ke2JvcmRlci1yYWRpdXM6NHB4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgdG9wfVtkaXI9cnRsXS5zYy1pb24tcG9wb3Zlci1tZCAucG9wb3Zlci1jb250ZW50LnNjLWlvbi1wb3BvdmVyLW1kLFtkaXI9cnRsXS5zYy1pb24tcG9wb3Zlci1tZC1oIC5wb3BvdmVyLWNvbnRlbnQuc2MtaW9uLXBvcG92ZXItbWQsW2Rpcj1ydGxdIC5zYy1pb24tcG9wb3Zlci1tZC1oIC5wb3BvdmVyLWNvbnRlbnQuc2MtaW9uLXBvcG92ZXItbWR7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IHRvcH0ucG9wb3Zlci12aWV3cG9ydC5zYy1pb24tcG9wb3Zlci1tZHstd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6MTAwbXM7dHJhbnNpdGlvbi1kZWxheToxMDBtc31cIjtcblxuY29uc3QgUG9wb3ZlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5kaWRQcmVzZW50ID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25Qb3BvdmVyRGlkUHJlc2VudFwiLCA3KTtcbiAgICB0aGlzLndpbGxQcmVzZW50ID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25Qb3BvdmVyV2lsbFByZXNlbnRcIiwgNyk7XG4gICAgdGhpcy53aWxsRGlzbWlzcyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uUG9wb3ZlcldpbGxEaXNtaXNzXCIsIDcpO1xuICAgIHRoaXMuZGlkRGlzbWlzcyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uUG9wb3ZlckRpZERpc21pc3NcIiwgNyk7XG4gICAgdGhpcy5wcmVzZW50ZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBrZXlib2FyZCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGlzbWlzc2VkIHdoZW4gdGhlIG92ZXJsYXkgaXMgcHJlc2VudGVkLlxuICAgICAqL1xuICAgIHRoaXMua2V5Ym9hcmRDbG9zZSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgcG9wb3ZlciB3aWxsIGJlIGRpc21pc3NlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgICAqL1xuICAgIHRoaXMuYmFja2Ryb3BEaXNtaXNzID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIGEgYmFja2Ryb3Agd2lsbCBiZSBkaXNwbGF5ZWQgYmVoaW5kIHRoZSBwb3BvdmVyLlxuICAgICAqL1xuICAgIHRoaXMuc2hvd0JhY2tkcm9wID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBwb3BvdmVyIHdpbGwgYmUgdHJhbnNsdWNlbnQuXG4gICAgICogT25seSBhcHBsaWVzIHdoZW4gdGhlIG1vZGUgaXMgYFwiaW9zXCJgIGFuZCB0aGUgZGV2aWNlIHN1cHBvcnRzXG4gICAgICogW2BiYWNrZHJvcC1maWx0ZXJgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYmFja2Ryb3AtZmlsdGVyI0Jyb3dzZXJfY29tcGF0aWJpbGl0eSkuXG4gICAgICovXG4gICAgdGhpcy50cmFuc2x1Y2VudCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHBvcG92ZXIgd2lsbCBhbmltYXRlLlxuICAgICAqL1xuICAgIHRoaXMuYW5pbWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub25EaXNtaXNzID0gKGV2KSA9PiB7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmRpc21pc3MoKTtcbiAgICB9O1xuICAgIHRoaXMub25CYWNrZHJvcFRhcCA9ICgpID0+IHtcbiAgICAgIHRoaXMuZGlzbWlzcyh1bmRlZmluZWQsIEJBQ0tEUk9QKTtcbiAgICB9O1xuICAgIHRoaXMub25MaWZlY3ljbGUgPSAobW9kYWxFdmVudCkgPT4ge1xuICAgICAgY29uc3QgZWwgPSB0aGlzLnVzZXJzRWxlbWVudDtcbiAgICAgIGNvbnN0IG5hbWUgPSBMSUZFQ1lDTEVfTUFQW21vZGFsRXZlbnQudHlwZV07XG4gICAgICBpZiAoZWwgJiYgbmFtZSkge1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudChuYW1lLCB7XG4gICAgICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgICAgZGV0YWlsOiBtb2RhbEV2ZW50LmRldGFpbFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBwcmVwYXJlT3ZlcmxheSh0aGlzLmVsKTtcbiAgfVxuICAvKipcbiAgICogUHJlc2VudCB0aGUgcG9wb3ZlciBvdmVybGF5IGFmdGVyIGl0IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAqL1xuICBhc3luYyBwcmVzZW50KCkge1xuICAgIGlmICh0aGlzLnByZXNlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLWNvbnRlbnQnKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb250YWluZXIgaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29tcG9uZW50UHJvcHMpLCB7IHBvcG92ZXI6IHRoaXMuZWwgfSk7XG4gICAgdGhpcy51c2Vyc0VsZW1lbnQgPSBhd2FpdCBhdHRhY2hDb21wb25lbnQodGhpcy5kZWxlZ2F0ZSwgY29udGFpbmVyLCB0aGlzLmNvbXBvbmVudCwgWydwb3BvdmVyLXZpZXdwb3J0JywgdGhpcy5lbFsncy1zYyddXSwgZGF0YSk7XG4gICAgYXdhaXQgZGVlcFJlYWR5KHRoaXMudXNlcnNFbGVtZW50KTtcbiAgICByZXR1cm4gcHJlc2VudCh0aGlzLCAncG9wb3ZlckVudGVyJywgaW9zRW50ZXJBbmltYXRpb24sIG1kRW50ZXJBbmltYXRpb24sIHRoaXMuZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBEaXNtaXNzIHRoZSBwb3BvdmVyIG92ZXJsYXkgYWZ0ZXIgaXQgaGFzIGJlZW4gcHJlc2VudGVkLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSBBbnkgZGF0YSB0byBlbWl0IGluIHRoZSBkaXNtaXNzIGV2ZW50cy5cbiAgICogQHBhcmFtIHJvbGUgVGhlIHJvbGUgb2YgdGhlIGVsZW1lbnQgdGhhdCBpcyBkaXNtaXNzaW5nIHRoZSBwb3BvdmVyLiBGb3IgZXhhbXBsZSwgJ2NhbmNlbCcgb3IgJ2JhY2tkcm9wJy5cbiAgICovXG4gIGFzeW5jIGRpc21pc3MoZGF0YSwgcm9sZSkge1xuICAgIGNvbnN0IHNob3VsZERpc21pc3MgPSBhd2FpdCBkaXNtaXNzKHRoaXMsIGRhdGEsIHJvbGUsICdwb3BvdmVyTGVhdmUnLCBpb3NMZWF2ZUFuaW1hdGlvbiwgbWRMZWF2ZUFuaW1hdGlvbiwgdGhpcy5ldmVudCk7XG4gICAgaWYgKHNob3VsZERpc21pc3MpIHtcbiAgICAgIGF3YWl0IGRldGFjaENvbXBvbmVudCh0aGlzLmRlbGVnYXRlLCB0aGlzLnVzZXJzRWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBzaG91bGREaXNtaXNzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHBvcG92ZXIgZGlkIGRpc21pc3MuXG4gICAqL1xuICBvbkRpZERpc21pc3MoKSB7XG4gICAgcmV0dXJuIGV2ZW50TWV0aG9kKHRoaXMuZWwsICdpb25Qb3BvdmVyRGlkRGlzbWlzcycpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHBvcG92ZXIgd2lsbCBkaXNtaXNzLlxuICAgKi9cbiAgb25XaWxsRGlzbWlzcygpIHtcbiAgICByZXR1cm4gZXZlbnRNZXRob2QodGhpcy5lbCwgJ2lvblBvcG92ZXJXaWxsRGlzbWlzcycpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCB7IG9uTGlmZWN5Y2xlIH0gPSB0aGlzO1xuICAgIHJldHVybiAoaChIb3N0LCB7IFwiYXJpYS1tb2RhbFwiOiBcInRydWVcIiwgXCJuby1yb3V0ZXJcIjogdHJ1ZSwgdGFiaW5kZXg6IFwiLTFcIiwgc3R5bGU6IHtcbiAgICAgICAgekluZGV4OiBgJHsyMDAwMCArIHRoaXMub3ZlcmxheUluZGV4fWAsXG4gICAgICB9LCBjbGFzczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBnZXRDbGFzc01hcCh0aGlzLmNzc0NsYXNzKSksIHsgW21vZGVdOiB0cnVlLCAncG9wb3Zlci10cmFuc2x1Y2VudCc6IHRoaXMudHJhbnNsdWNlbnQgfSksIG9uSW9uUG9wb3ZlckRpZFByZXNlbnQ6IG9uTGlmZWN5Y2xlLCBvbklvblBvcG92ZXJXaWxsUHJlc2VudDogb25MaWZlY3ljbGUsIG9uSW9uUG9wb3ZlcldpbGxEaXNtaXNzOiBvbkxpZmVjeWNsZSwgb25Jb25Qb3BvdmVyRGlkRGlzbWlzczogb25MaWZlY3ljbGUsIG9uSW9uRGlzbWlzczogdGhpcy5vbkRpc21pc3MsIG9uSW9uQmFja2Ryb3BUYXA6IHRoaXMub25CYWNrZHJvcFRhcCB9LCBoKFwiaW9uLWJhY2tkcm9wXCIsIHsgdGFwcGFibGU6IHRoaXMuYmFja2Ryb3BEaXNtaXNzLCB2aXNpYmxlOiB0aGlzLnNob3dCYWNrZHJvcCB9KSwgaChcImRpdlwiLCB7IHRhYmluZGV4OiBcIjBcIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInBvcG92ZXItd3JhcHBlciBpb24tb3ZlcmxheS13cmFwcGVyXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInBvcG92ZXItYXJyb3dcIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInBvcG92ZXItY29udGVudFwiIH0pKSwgaChcImRpdlwiLCB7IHRhYmluZGV4OiBcIjBcIiB9KSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5jb25zdCBMSUZFQ1lDTEVfTUFQID0ge1xuICAnaW9uUG9wb3ZlckRpZFByZXNlbnQnOiAnaW9uVmlld0RpZEVudGVyJyxcbiAgJ2lvblBvcG92ZXJXaWxsUHJlc2VudCc6ICdpb25WaWV3V2lsbEVudGVyJyxcbiAgJ2lvblBvcG92ZXJXaWxsRGlzbWlzcyc6ICdpb25WaWV3V2lsbExlYXZlJyxcbiAgJ2lvblBvcG92ZXJEaWREaXNtaXNzJzogJ2lvblZpZXdEaWRMZWF2ZScsXG59O1xuUG9wb3Zlci5zdHlsZSA9IHtcbiAgaW9zOiBwb3BvdmVySW9zQ3NzLFxuICBtZDogcG9wb3Zlck1kQ3NzXG59O1xuXG5leHBvcnQgeyBQb3BvdmVyIGFzIGlvbl9wb3BvdmVyIH07XG4iXX0=